
cese_spin_coater_freertos/out/cese_spin_coater_freertos.elf:     file format elf32-littlearm
cese_spin_coater_freertos/out/cese_spin_coater_freertos.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0004c9

Program Header:
0x70000001 off    0x00014958 vaddr 0x1a004958 paddr 0x1a004958 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100a8 vaddr 0x100000a8 paddr 0x100000a8 align 2**16
         filesz 0x00000000 memsz 0x00002ae4 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00004960 memsz 0x00004960 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a004960 align 2**16
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004954  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  10000000  1a004960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
  6 .bss          00002ae4  100000a8  100000a8  000100a8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 11 .init_array   00000004  1a004954  1a004954  00014954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a004958  1a004958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 18 .noinit       00000000  10002b8c  10002b8c  000200a4  2**2
                  CONTENTS
 19 .debug_info   00025ad0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004f9e  00000000  00000000  00045b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000a7a0  00000000  00000000  0004ab12  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000ef0  00000000  00000000  000552b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001010  00000000  00000000  000561a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000f35f  00000000  00000000  000571b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00011a02  00000000  00000000  00066511  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002f878  00000000  00000000  00077f13  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000a778b  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000a780a  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002a9c  00000000  00000000  000a7844  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004954 l    d  .init_array	00000000 .init_array
1a004958 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002b8c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
100000a8 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 system.c
100000ac l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a00061c l     F .text	00000064 prvHeapInit
100000b4 l     O .bss	00002000 ucHeap
1a000680 l     F .text	00000058 prvInsertBlockIntoFreeList
100000b0 l     O .bss	00000004 pxEnd
100020b4 l     O .bss	00000004 xBlockAllocatedBit
100020b8 l     O .bss	00000004 xFreeBytesRemaining
100020bc l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100020c0 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a000864 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000876 l     F .text	0000001e prvIsQueueFull
1a000894 l     F .text	0000001a prvIsQueueEmpty
1a0008ae l     F .text	00000076 prvCopyDataToQueue
1a000924 l     F .text	00000024 prvCopyDataFromQueue
1a000948 l     F .text	0000006e prvUnlockQueue
1a000a3c l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020c8 l     O .bss	00000168 uxIdleTaskStack.10728
10002230 l     O .bss	000005a0 uxTimerTaskStack.10735
100027d0 l     O .bss	00000060 xIdleTaskTCB.10727
10002830 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a0011b8 l     F .text	0000002c prvResetNextTaskUnblockTime
1a0011e4 l     F .text	00000092 prvInitialiseNewTask
1a001278 l     F .text	00000068 prvInitialiseTaskLists
1a0012e0 l     F .text	000000ac prvAddNewTaskToReadyList
1a00138c l     F .text	00000038 prvDeleteTCB
1a0013c4 l     F .text	0000004c prvCheckTasksWaitingTermination
1a001410 l     F .text	00000028 prvIdleTask
1a001438 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002894 l     O .bss	00000004 pxDelayedTaskList
10002898 l     O .bss	00000004 pxOverflowDelayedTaskList
1000289c l     O .bss	0000008c pxReadyTasksLists
10002928 l     O .bss	00000004 uxCurrentNumberOfTasks
1000292c l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002930 l     O .bss	00000004 uxPendedTicks
10002934 l     O .bss	00000004 uxSchedulerSuspended
10002938 l     O .bss	00000004 uxTaskNumber
1000293c l     O .bss	00000004 uxTopReadyPriority
10002940 l     O .bss	00000014 xDelayedTaskList1
10002954 l     O .bss	00000014 xDelayedTaskList2
10002968 l     O .bss	00000004 xNextTaskUnblockTime
1000296c l     O .bss	00000004 xNumOfOverflows
10002970 l     O .bss	00000014 xPendingReadyList
10002984 l     O .bss	00000004 xSchedulerRunning
10002988 l     O .bss	00000014 xSuspendedTaskList
1000299c l     O .bss	00000014 xTasksWaitingTermination
100029b0 l     O .bss	00000004 xTickCount
100029b4 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001dcc l     F .text	00000020 prvGetNextExpireTime
1a001dec l     F .text	00000048 prvInsertTimerInActiveList
1a001e34 l     F .text	00000070 prvCheckForValidListAndQueue
1a001ea4 l     F .text	00000040 prvInitialiseNewTimer
1a002274 l     F .text	00000016 prvTimerTask
1a002000 l     F .text	00000078 prvSwitchTimerLists
1a002078 l     F .text	0000002c prvSampleTimeNow
1a0020a4 l     F .text	00000060 prvProcessExpiredTimer
1a002104 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002178 l     F .text	000000fc prvProcessReceivedCommands
100029b8 l     O .bss	00000004 pxCurrentTimerList
100029bc l     O .bss	00000004 pxOverflowTimerList
100029c0 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002a60 l     O .bss	00000014 xActiveTimerList1
10002a74 l     O .bss	00000014 xActiveTimerList2
10002a88 l     O .bss	00000004 xLastTime.11777
10002a8c l     O .bss	00000050 xStaticTimerQueue.11827
10002adc l     O .bss	00000004 xTimerQueue
10002ae0 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a00228c l     F .text	00000040 prvTaskExitError
1a0022cc l     F .text	00000022 prvPortStartFirstTask
1a0022f4 l     F .text	0000000e vPortEnableVFP
1a002360 l       .text	00000000 pxCurrentTCBConst2
1a002440 l       .text	00000000 pxCurrentTCBConst
10002ae4 l     O .bss	00000001 ucMaxSysCallPriority
10002ae8 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 board.c
1a002614 l     F .text	00000044 Board_LED_Init
1a002658 l     F .text	00000040 Board_TEC_Init
1a002698 l     F .text	00000040 Board_GPIO_Init
1a0026d8 l     F .text	00000030 Board_ADC_Init
1a002708 l     F .text	00000038 Board_SPI_Init
1a002740 l     F .text	00000024 Board_I2C_Init
1a0045e4 l     O .text	00000008 GpioButtons
1a0045ec l     O .text	0000000c GpioLeds
1a0045f8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004610 l     O .text	00000004 InitClkStates
1a004614 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0028b0 l     F .text	0000002c Chip_UART_GetIndex
1a004688 l     O .text	00000008 UART_BClock
1a004690 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002a58 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002a6c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002b20 l     F .text	000000a4 pll_calc_divs
1a002bc4 l     F .text	0000010c pll_get_frac
1a002cd0 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002f44 l     F .text	00000022 Chip_Clock_GetDivRate
10002aec l     O .bss	00000008 audio_usb_pll_freq
1a0046a4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004710 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00321c l     F .text	00000014 Chip_SSP_GetClockIndex
1a003230 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a004758 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10002af4 l     O .bss	00000004 callBackFuncParams
10002af8 l     O .bss	00000008 tickCounter
10002b00 l     O .bss	00000004 tickHookFunction
10002b04 l     O .bss	00000030 tickerObject.11826
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0034fc l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b34 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003fc0 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
10000044 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a004958 l       .init_array	00000000 __init_array_end
1a004954 l       .bss_RAM5	00000000 __preinit_array_end
1a004954 l       .init_array	00000000 __init_array_start
1a004954 l       .bss_RAM5	00000000 __preinit_array_start
1a002d68 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000568 g     F .text	00000012 _isatty_r
1a003c18 g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a00057a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0003c4 g     F .text	00000030 myTask_SenialesLed
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a000302 g     F .text	00000002 myTask_ControlUart
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0023a8 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0027f6 g     F .text	00000008 __stdio_init
1a0043c6 g     F .text	00000024 __sseek
1a004040 g     F .text	00000060 __sinit
1a003ce0 g     F .text	000000a4 __swbuf_r
1a000304 g     F .text	000000c0 myTask_BotonEmergencia
1a00017a  w    F .text	00000002 HardFault_Handler
1a0010a0 g     F .text	00000052 vQueueWaitForMessageRestricted
1a004014 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a002b12 g     F .text	0000000c Chip_ADC_SetResolution
1a0043f4 g     F .text	00000002 __malloc_unlock
10002b40 g     O .bss	00000004 eventoBotonEmergenciaPulsado
1a002444 g     F .text	0000002c SysTick_Handler
1a002930 g     F .text	00000040 Chip_UART_SetBaud
1a0004c4  w    F .text	00000002 initialise_monitor_handles
1a003890 g     F .text	00000008 printString
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a00279c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a0023e0 g     F .text	00000064 PendSV_Handler
1a000cb8 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a004960 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10002890 g     O .bss	00000004 pxCurrentTCB
1a00055e g     F .text	0000000a _fstat_r
53ff73c6 g       *ABS*	00000000 __valid_user_code_checksum
1a004960 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001ac4 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a002fe6 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0024a8 g     F .text	00000110 xPortStartScheduler
1a003bf0 g     F .text	00000016 memcpy
1a0019d0 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a004008 g     F .text	0000000c _cleanup_r
1a002470  w    F .text	00000038 vPortSetupTimerInterrupt
1a0038a8 g     F .text	00000000 .hidden __aeabi_uldivmod
10002b8c g       .noinit	00000000 _noinit
1a003cd0 g     F .text	00000010 puts
1a0007f4 g     F .text	00000070 vPortFree
1a003462 g     F .text	00000018 uartWriteString
10002b84 g     O .bss	00000004 SystemCoreClock
1a0028dc g     F .text	00000054 Chip_UART_Init
1a000edc g     F .text	0000019c xQueueSemaphoreTake
1a00347c g     F .text	00000034 tickerCallback
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0025b8 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a003064 g     F .text	0000004c Chip_Clock_GetRate
1a00110e g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a003880 g     F .text	00000010 printInitUart
1a002838 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0038d8 g     F .text	000002cc .hidden __udivmoddi4
1a0005fc g     F .text	00000020 _sbrk_r
1a0045e0 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000584 g     F .text	0000004e _read_r
1a001108 g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000d84 g     F .text	00000158 xQueueReceive
10002b44 g     O .bss	00000040 xQueueRegistry
1a00119c g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a004958 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a004950 g     O .text	00000004 _global_impure_ptr
1a003ba8 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0006d8 g     F .text	0000011c pvPortMalloc
1a0027b8 g     F .text	0000002c Board_Init
1a000552  w    F .text	00000002 _init
1a0010f2 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a00164c g     F .text	0000000c xTaskGetTickCount
1a000b3c g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002b8c g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a0004c8 g     F .text	00000088 Reset_Handler
1a0034b0 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a003314 g     F .text	00000038 Chip_I2C_SetClockRate
1a001c40 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002d1c g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001a38 g     F .text	0000008c xTaskRemoveFromEventList
1a0011b6 g     F .text	00000002 vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0048f0 g     O .text	00000020 __sf_fake_stderr
1a0032f0 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a003898 g     F .text	00000010 printEnter
1a002ed8 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0047ac g     O .text	00000140 gpioPinsInit
1a003448 g     F .text	0000001a uartWriteByte
1a001db0 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a003248 g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a001adc g     F .text	00000080 xTaskCheckForTimeOut
1a00421c g     F .text	0000009c _free_r
1a002fc0 g     F .text	00000026 Chip_Clock_GetBaseClock
1a001b88 g     F .text	000000b8 xTaskPriorityInherit
100000a8 g       .bss	00000000 _bss
1a002ae0 g     F .text	00000032 Chip_ADC_SetSampleRate
1a00163c g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00325a g     F .text	0000003e Chip_SSP_SetBitRate
1a00115a g     F .text	00000028 uxListRemove
1a0030c4 g     F .text	00000002 Chip_GPIO_Init
1a000300 g     F .text	00000002 myTask_ReadWriteRegisterDriver
1a00460c g     O .text	00000004 OscRateIn
1a0033cc g     F .text	0000007c uartInit
1a0014d0 g     F .text	00000072 xTaskCreateStatic
10002b8c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001908 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000a5e g     F .text	00000090 xQueueGenericCreateStatic
1a001a00 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000554 g     F .text	0000000a _close_r
1a003530 g     F .text	00000194 gpioInit
1a001184 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a001f94 g     F .text	0000006c xTimerGenericCommand
1a003d84 g     F .text	000000dc __swsetup_r
1a0011b4 g     F .text	00000002 vApplicationStackOverflowHook
1a003ba4  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0040a0 g     F .text	00000078 __sfp
1a00436c g     F .text	00000022 __sread
1a003770 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0043f2 g     F .text	00000002 __malloc_lock
1a002788 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003f6c g     F .text	00000054 _fflush_r
1a004910 g     O .text	00000020 __sf_fake_stdin
1a002d84 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003c06 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0003f4 g     F .text	000000d0 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001126 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002340 g     F .text	00000024 SVC_Handler
1a0043ea g     F .text	00000008 __sclose
1a001ee4 g     F .text	00000064 xTimerCreateTimerTask
1a0042b8 g     F .text	000000b4 _malloc_r
1a0033a0 g     F .text	00000018 uartTxReady
1a001864 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002ff4 g     F .text	0000003c Chip_Clock_EnableOpts
1a0027ee g     F .text	00000008 __stdio_getchar
1a000aee g     F .text	0000004e xQueueGenericCreate
1a002da0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002e58 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00334c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0036c4 g     F .text	00000056 gpioWrite
1a000550  w    F .text	00000002 _fini
1a001770 g     F .text	000000f4 xTaskResumeAll
1a0015a8 g     F .text	00000094 vTaskStartScheduler
1a002aa0 g     F .text	00000040 Chip_ADC_Init
10002b88 g     O .bss	00000004 g_pUsbApi
1a002800 g     F .text	00000038 Board_SetupMuxing
1a002970 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0005d2 g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000040 g     O .data	00000004 _impure_ptr
1a003e60 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0033b8 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001b5c g     F .text	0000000c vTaskMissedYield
10002b8c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003298 g     F .text	00000038 Chip_SSP_Init
1a001078 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001658 g     F .text	00000118 xTaskIncrementTick
1a004154 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a002764 g     F .text	00000024 Board_Debug_Init
1a0027e4 g     F .text	0000000a __stdio_putchar
1a0009b8 g     F .text	00000084 xQueueGenericReset
100000a4 g       .data	00000000 _edata
1a0032d0 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001542 g     F .text	00000066 xTaskCreate
1a0030c8 g     F .text	00000154 Chip_SetupCoreClock
1a00438e g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a004118 g     F .text	0000003c _fwalk_reent
1a0030b0 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a004930 g     O .text	00000020 __sf_fake_stdout
1a001b68 g     F .text	00000020 xTaskGetSchedulerState
1a001cf0 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a003ba4  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a00419c g     F .text	00000080 __smakebuf_r
1a002308 g     F .text	0000002c pxPortInitialiseStack
1a003030 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002b3c g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a001f48 g     F .text	0000004c xTimerCreateStatic
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00371a g     F .text	00000054 gpioRead
1a00378c g     F .text	000000f4 boardInit
1a002364 g     F .text	00000044 vPortEnterCritical
10002b38 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002f68 g     F .text	00000058 Chip_Clock_SetBaseClock
1a003384 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0028a4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 c9 04 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a c6 73 ff 53     }............s.S
	...
1a00002c:	41 23 00 1a 85 01 00 1a 00 00 00 00 e1 23 00 1a     A#...........#..
1a00003c:	45 24 00 1a                                         E$..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	71 37 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     q7..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a004960 	.word	0x1a004960
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a4 	.word	0x000000a4
1a000120:	1a004960 	.word	0x1a004960
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004960 	.word	0x1a004960
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004960 	.word	0x1a004960
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004960 	.word	0x1a004960
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a8 	.word	0x100000a8
1a000154:	00002ae4 	.word	0x00002ae4
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <myTask_ReadWriteRegisterDriver>:
		}
		vTaskDelayUntil(&xLastWakeTime, xPeriodicity);
	}
}

void myTask_ReadWriteRegisterDriver(void* taskParmPtr) {
1a000300:	e7fe      	b.n	1a000300 <myTask_ReadWriteRegisterDriver>

1a000302 <myTask_ControlUart>:
	// ---------- REPETIR POR SIEMPRE --------------------------
	while (TRUE) {
	}
}

void myTask_ControlUart(void* taskParmPtr) {
1a000302:	e7fe      	b.n	1a000302 <myTask_ControlUart>

1a000304 <myTask_BotonEmergencia>:
void myTask_BotonEmergencia(void* taskParmPtr) {
1a000304:	b530      	push	{r4, r5, lr}
1a000306:	b083      	sub	sp, #12
	printf("Boton de emergencia\r\n");
1a000308:	482a      	ldr	r0, [pc, #168]	; (1a0003b4 <myTask_BotonEmergencia+0xb0>)
1a00030a:	f003 fce1 	bl	1a003cd0 <puts>
	portTickType xLastWakeTime = xTaskGetTickCount();
1a00030e:	f001 f99d 	bl	1a00164c <xTaskGetTickCount>
1a000312:	9001      	str	r0, [sp, #4]
	estadoBotonEmergencia_t estado = UP;
1a000314:	2400      	movs	r4, #0
1a000316:	e02b      	b.n	1a000370 <myTask_BotonEmergencia+0x6c>
			if (0 == gpioRead(TEC2)) {
1a000318:	2027      	movs	r0, #39	; 0x27
1a00031a:	f003 f9fe 	bl	1a00371a <gpioRead>
1a00031e:	bb18      	cbnz	r0, 1a000368 <myTask_BotonEmergencia+0x64>
				tiempoDesdeBotonAccionado = xTaskGetTickCount(); //Guardamos el tiempo representado x Ticks del Sistema
1a000320:	f001 f994 	bl	1a00164c <xTaskGetTickCount>
1a000324:	4605      	mov	r5, r0
				estado = FALLING;
1a000326:	2401      	movs	r4, #1
1a000328:	e01e      	b.n	1a000368 <myTask_BotonEmergencia+0x64>
			if (0 == gpioRead(TEC2)) {
1a00032a:	2027      	movs	r0, #39	; 0x27
1a00032c:	f003 f9f5 	bl	1a00371a <gpioRead>
1a000330:	b9d0      	cbnz	r0, 1a000368 <myTask_BotonEmergencia+0x64>
				if ((xTaskGetTickCount() - tiempoDesdeBotonAccionado)
1a000332:	f001 f98b 	bl	1a00164c <xTaskGetTickCount>
1a000336:	1b40      	subs	r0, r0, r5
1a000338:	2814      	cmp	r0, #20
1a00033a:	d801      	bhi.n	1a000340 <myTask_BotonEmergencia+0x3c>
					estado = UP;
1a00033c:	2400      	movs	r4, #0
1a00033e:	e013      	b.n	1a000368 <myTask_BotonEmergencia+0x64>
					printf("Ejecutar xSemaphoreGive\r\n");
1a000340:	481d      	ldr	r0, [pc, #116]	; (1a0003b8 <myTask_BotonEmergencia+0xb4>)
1a000342:	f003 fcc5 	bl	1a003cd0 <puts>
					xSemaphoreGive(eventoBotonEmergenciaPulsado);
1a000346:	2300      	movs	r3, #0
1a000348:	461a      	mov	r2, r3
1a00034a:	4619      	mov	r1, r3
1a00034c:	481b      	ldr	r0, [pc, #108]	; (1a0003bc <myTask_BotonEmergencia+0xb8>)
1a00034e:	6800      	ldr	r0, [r0, #0]
1a000350:	f000 fbf4 	bl	1a000b3c <xQueueGenericSend>
					printf("Ejecutado xSemaphoreGive\r\n");
1a000354:	481a      	ldr	r0, [pc, #104]	; (1a0003c0 <myTask_BotonEmergencia+0xbc>)
1a000356:	f003 fcbb 	bl	1a003cd0 <puts>
					estado = DOWN;					//Ver que pasa con el desborde del contador  , supuestamente x mas que desborde da bien la cuenta, VERIFICAR!!
1a00035a:	2402      	movs	r4, #2
1a00035c:	e004      	b.n	1a000368 <myTask_BotonEmergencia+0x64>
			if (1 == gpioRead(TEC2)) {
1a00035e:	2027      	movs	r0, #39	; 0x27
1a000360:	f003 f9db 	bl	1a00371a <gpioRead>
1a000364:	2801      	cmp	r0, #1
1a000366:	d011      	beq.n	1a00038c <myTask_BotonEmergencia+0x88>
		vTaskDelayUntil(&xLastWakeTime, xPeriodicity);
1a000368:	210a      	movs	r1, #10
1a00036a:	a801      	add	r0, sp, #4
1a00036c:	f001 fa7a 	bl	1a001864 <vTaskDelayUntil>
		switch (estado) {
1a000370:	2c03      	cmp	r4, #3
1a000372:	d8f9      	bhi.n	1a000368 <myTask_BotonEmergencia+0x64>
1a000374:	a301      	add	r3, pc, #4	; (adr r3, 1a00037c <myTask_BotonEmergencia+0x78>)
1a000376:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
1a00037a:	bf00      	nop
1a00037c:	1a000319 	.word	0x1a000319
1a000380:	1a00032b 	.word	0x1a00032b
1a000384:	1a00035f 	.word	0x1a00035f
1a000388:	1a000397 	.word	0x1a000397
				tiempoDesdeBotonAccionado = xTaskGetTickCount(); //Guardamos el tiempo representado x Ticks del Sistema
1a00038c:	f001 f95e 	bl	1a00164c <xTaskGetTickCount>
1a000390:	4605      	mov	r5, r0
				estado = RISING;
1a000392:	2403      	movs	r4, #3
1a000394:	e7e8      	b.n	1a000368 <myTask_BotonEmergencia+0x64>
			if (1 == gpioRead(TEC2)) {
1a000396:	2027      	movs	r0, #39	; 0x27
1a000398:	f003 f9bf 	bl	1a00371a <gpioRead>
1a00039c:	2801      	cmp	r0, #1
1a00039e:	d1e3      	bne.n	1a000368 <myTask_BotonEmergencia+0x64>
				if ((xTaskGetTickCount() - tiempoDesdeBotonAccionado)
1a0003a0:	f001 f954 	bl	1a00164c <xTaskGetTickCount>
1a0003a4:	1b40      	subs	r0, r0, r5
1a0003a6:	2813      	cmp	r0, #19
1a0003a8:	d901      	bls.n	1a0003ae <myTask_BotonEmergencia+0xaa>
					estado = UP;
1a0003aa:	2400      	movs	r4, #0
1a0003ac:	e7dc      	b.n	1a000368 <myTask_BotonEmergencia+0x64>
					estado = DOWN;
1a0003ae:	2402      	movs	r4, #2
1a0003b0:	e7da      	b.n	1a000368 <myTask_BotonEmergencia+0x64>
1a0003b2:	bf00      	nop
1a0003b4:	1a004524 	.word	0x1a004524
1a0003b8:	1a00453c 	.word	0x1a00453c
1a0003bc:	10002b40 	.word	0x10002b40
1a0003c0:	1a004558 	.word	0x1a004558

1a0003c4 <myTask_SenialesLed>:
}

//Tarea que trabaja por eventos, no es una tarea periodida, por eso no hay ningun delayuntil ,
//si la prioridad es muy alta, el evento se queda "PEGADO" y produce que no se ejecute la tarea BotonEmergencia

void myTask_SenialesLed(void* taskParmPtr) {
1a0003c4:	b508      	push	{r3, lr}
	// ---------- CONFIGURACIONES ------------------------------
	printf("Visualizacion a traves de los led del estado del sistema!\r\n");
1a0003c6:	4808      	ldr	r0, [pc, #32]	; (1a0003e8 <myTask_SenialesLed+0x24>)
1a0003c8:	f003 fc82 	bl	1a003cd0 <puts>
//	// ---------- REPETIR POR SIEMPRE --------------------------
	while (TRUE) {
		//Uso xSemaphoreTake para enterarme de que ocurrio el evento y actuar en consecuencia
		//Sincronizacion con el evento de pulsacion del boton de emergencia!
		//Hacer control de errores por si no se acciona Nunca el boton, deberiamo detectar el desborde , detectar  pdFalse si no puede tomar el semaforo
		xSemaphoreTake(eventoBotonEmergenciaPulsado, portMAX_DELAY);
1a0003cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0003d0:	4b06      	ldr	r3, [pc, #24]	; (1a0003ec <myTask_SenialesLed+0x28>)
1a0003d2:	6818      	ldr	r0, [r3, #0]
1a0003d4:	f000 fd82 	bl	1a000edc <xQueueSemaphoreTake>
		printf("Tomado xSemaphoreTake\r\n");
1a0003d8:	4805      	ldr	r0, [pc, #20]	; (1a0003f0 <myTask_SenialesLed+0x2c>)
1a0003da:	f003 fc79 	bl	1a003cd0 <puts>
		gpioWrite(LEDR,ON);
1a0003de:	2101      	movs	r1, #1
1a0003e0:	202a      	movs	r0, #42	; 0x2a
1a0003e2:	f003 f96f 	bl	1a0036c4 <gpioWrite>
1a0003e6:	e7f1      	b.n	1a0003cc <myTask_SenialesLed+0x8>
1a0003e8:	1a004574 	.word	0x1a004574
1a0003ec:	10002b40 	.word	0x10002b40
1a0003f0:	1a0045b0 	.word	0x1a0045b0

1a0003f4 <main>:
int main(void) {
1a0003f4:	b530      	push	{r4, r5, lr}
1a0003f6:	b083      	sub	sp, #12
	boardConfig();
1a0003f8:	f003 f9c8 	bl	1a00378c <boardInit>
	debugPrintConfigUart( UART_USB, 115200 );
1a0003fc:	4c24      	ldr	r4, [pc, #144]	; (1a000490 <main+0x9c>)
1a0003fe:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000402:	2103      	movs	r1, #3
1a000404:	4620      	mov	r0, r4
1a000406:	f003 fa3b 	bl	1a003880 <printInitUart>
	debugPrintlnString("Blinky con freeRTOS y sAPI.");
1a00040a:	4922      	ldr	r1, [pc, #136]	; (1a000494 <main+0xa0>)
1a00040c:	7820      	ldrb	r0, [r4, #0]
1a00040e:	f003 fa3f 	bl	1a003890 <printString>
1a000412:	7820      	ldrb	r0, [r4, #0]
1a000414:	f003 fa40 	bl	1a003898 <printEnter>
	if( NULL == (eventoBotonEmergenciaPulsado=xSemaphoreCreateBinary())){
1a000418:	2203      	movs	r2, #3
1a00041a:	2100      	movs	r1, #0
1a00041c:	2001      	movs	r0, #1
1a00041e:	f000 fb66 	bl	1a000aee <xQueueGenericCreate>
1a000422:	4b1d      	ldr	r3, [pc, #116]	; (1a000498 <main+0xa4>)
1a000424:	6018      	str	r0, [r3, #0]
1a000426:	b348      	cbz	r0, 1a00047c <main+0x88>
	estadoAsignacionMemoria_t estadoAsignacionMemoria=0;
1a000428:	2500      	movs	r5, #0
	xTaskCreate(myTask_BotonEmergencia,        			// Funcion de la tarea a ejecutar
1a00042a:	2400      	movs	r4, #0
1a00042c:	9401      	str	r4, [sp, #4]
1a00042e:	2303      	movs	r3, #3
1a000430:	9300      	str	r3, [sp, #0]
1a000432:	4623      	mov	r3, r4
1a000434:	22b4      	movs	r2, #180	; 0xb4
1a000436:	4919      	ldr	r1, [pc, #100]	; (1a00049c <main+0xa8>)
1a000438:	4819      	ldr	r0, [pc, #100]	; (1a0004a0 <main+0xac>)
1a00043a:	f001 f882 	bl	1a001542 <xTaskCreate>
	xTaskCreate(myTask_ReadWriteRegisterDriver, // Funcion de la tarea a ejecutar
1a00043e:	9401      	str	r4, [sp, #4]
1a000440:	2301      	movs	r3, #1
1a000442:	9300      	str	r3, [sp, #0]
1a000444:	4623      	mov	r3, r4
1a000446:	22b4      	movs	r2, #180	; 0xb4
1a000448:	4916      	ldr	r1, [pc, #88]	; (1a0004a4 <main+0xb0>)
1a00044a:	4817      	ldr	r0, [pc, #92]	; (1a0004a8 <main+0xb4>)
1a00044c:	f001 f879 	bl	1a001542 <xTaskCreate>
	xTaskCreate(myTask_ControlUart,            // Funcion de la tarea a ejecutar
1a000450:	9401      	str	r4, [sp, #4]
1a000452:	2302      	movs	r3, #2
1a000454:	9300      	str	r3, [sp, #0]
1a000456:	4623      	mov	r3, r4
1a000458:	22b4      	movs	r2, #180	; 0xb4
1a00045a:	4914      	ldr	r1, [pc, #80]	; (1a0004ac <main+0xb8>)
1a00045c:	4814      	ldr	r0, [pc, #80]	; (1a0004b0 <main+0xbc>)
1a00045e:	f001 f870 	bl	1a001542 <xTaskCreate>
	xTaskCreate(myTask_SenialesLed,            // Funcion de la tarea a ejecutar
1a000462:	9401      	str	r4, [sp, #4]
1a000464:	2304      	movs	r3, #4
1a000466:	9300      	str	r3, [sp, #0]
1a000468:	4623      	mov	r3, r4
1a00046a:	22b4      	movs	r2, #180	; 0xb4
1a00046c:	4911      	ldr	r1, [pc, #68]	; (1a0004b4 <main+0xc0>)
1a00046e:	4812      	ldr	r0, [pc, #72]	; (1a0004b8 <main+0xc4>)
1a000470:	f001 f867 	bl	1a001542 <xTaskCreate>
	if( 0 == estadoAsignacionMemoria){
1a000474:	b93d      	cbnz	r5, 1a000486 <main+0x92>
	vTaskStartScheduler();
1a000476:	f001 f897 	bl	1a0015a8 <vTaskStartScheduler>
1a00047a:	e7fe      	b.n	1a00047a <main+0x86>
		printf("Error en Asignacion de Semaforo 'eventoBotonEmergenciaPulsado' \r\n");
1a00047c:	480f      	ldr	r0, [pc, #60]	; (1a0004bc <main+0xc8>)
1a00047e:	f003 fc27 	bl	1a003cd0 <puts>
		estadoAsignacionMemoria=ERROR_ASIGNACION_MEMORIA;
1a000482:	2501      	movs	r5, #1
1a000484:	e7d1      	b.n	1a00042a <main+0x36>
		printf("VTaskStartScheduler no se ha podido ejecutar por problemas en asignacion de memoria dinamica a semaforos!\r\n");
1a000486:	480e      	ldr	r0, [pc, #56]	; (1a0004c0 <main+0xcc>)
1a000488:	f003 fc22 	bl	1a003cd0 <puts>
1a00048c:	e7f5      	b.n	1a00047a <main+0x86>
1a00048e:	bf00      	nop
1a000490:	100000a8 	.word	0x100000a8
1a000494:	1a0043f8 	.word	0x1a0043f8
1a000498:	10002b40 	.word	0x10002b40
1a00049c:	1a004458 	.word	0x1a004458
1a0004a0:	1a000305 	.word	0x1a000305
1a0004a4:	1a004470 	.word	0x1a004470
1a0004a8:	1a000301 	.word	0x1a000301
1a0004ac:	1a004490 	.word	0x1a004490
1a0004b0:	1a000303 	.word	0x1a000303
1a0004b4:	1a0044a4 	.word	0x1a0044a4
1a0004b8:	1a0003c5 	.word	0x1a0003c5
1a0004bc:	1a004414 	.word	0x1a004414
1a0004c0:	1a0044b8 	.word	0x1a0044b8

1a0004c4 <initialise_monitor_handles>:
}
1a0004c4:	4770      	bx	lr
1a0004c6:	Address 0x000000001a0004c6 is out of bounds.


1a0004c8 <Reset_Handler>:
void Reset_Handler(void) {
1a0004c8:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0004ca:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0004cc:	4b19      	ldr	r3, [pc, #100]	; (1a000534 <Reset_Handler+0x6c>)
1a0004ce:	4a1a      	ldr	r2, [pc, #104]	; (1a000538 <Reset_Handler+0x70>)
1a0004d0:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0004d2:	3304      	adds	r3, #4
1a0004d4:	4a19      	ldr	r2, [pc, #100]	; (1a00053c <Reset_Handler+0x74>)
1a0004d6:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0004d8:	2300      	movs	r3, #0
1a0004da:	e005      	b.n	1a0004e8 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0004dc:	4a18      	ldr	r2, [pc, #96]	; (1a000540 <Reset_Handler+0x78>)
1a0004de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0004e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0004e6:	3301      	adds	r3, #1
1a0004e8:	2b07      	cmp	r3, #7
1a0004ea:	d9f7      	bls.n	1a0004dc <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0004ec:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0004ee:	4b15      	ldr	r3, [pc, #84]	; (1a000544 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0004f0:	e007      	b.n	1a000502 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0004f2:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0004f6:	689a      	ldr	r2, [r3, #8]
1a0004f8:	6859      	ldr	r1, [r3, #4]
1a0004fa:	6818      	ldr	r0, [r3, #0]
1a0004fc:	f7ff fe45 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000500:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000502:	4a11      	ldr	r2, [pc, #68]	; (1a000548 <Reset_Handler+0x80>)
1a000504:	4293      	cmp	r3, r2
1a000506:	d3f4      	bcc.n	1a0004f2 <Reset_Handler+0x2a>
1a000508:	e006      	b.n	1a000518 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00050a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00050c:	6859      	ldr	r1, [r3, #4]
1a00050e:	f854 0b08 	ldr.w	r0, [r4], #8
1a000512:	f7ff fe49 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000516:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000518:	4a0c      	ldr	r2, [pc, #48]	; (1a00054c <Reset_Handler+0x84>)
1a00051a:	4293      	cmp	r3, r2
1a00051c:	d3f5      	bcc.n	1a00050a <Reset_Handler+0x42>
    SystemInit();
1a00051e:	f002 ff15 	bl	1a00334c <SystemInit>
    __libc_init_array();
1a000522:	f003 fb41 	bl	1a003ba8 <__libc_init_array>
    initialise_monitor_handles();
1a000526:	f7ff ffcd 	bl	1a0004c4 <initialise_monitor_handles>
    main();
1a00052a:	f7ff ff63 	bl	1a0003f4 <main>
        __asm__ volatile("wfi");
1a00052e:	bf30      	wfi
1a000530:	e7fd      	b.n	1a00052e <Reset_Handler+0x66>
1a000532:	bf00      	nop
1a000534:	40053100 	.word	0x40053100
1a000538:	10df1000 	.word	0x10df1000
1a00053c:	01dff7ff 	.word	0x01dff7ff
1a000540:	e000e280 	.word	0xe000e280
1a000544:	1a000114 	.word	0x1a000114
1a000548:	1a000150 	.word	0x1a000150
1a00054c:	1a000178 	.word	0x1a000178

1a000550 <_fini>:
void _fini(void) {}
1a000550:	4770      	bx	lr

1a000552 <_init>:
void _init(void) {}
1a000552:	4770      	bx	lr

1a000554 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000554:	2309      	movs	r3, #9
1a000556:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00055c:	4770      	bx	lr

1a00055e <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00055e:	2358      	movs	r3, #88	; 0x58
1a000560:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000566:	4770      	bx	lr

1a000568 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000568:	2902      	cmp	r1, #2
1a00056a:	d801      	bhi.n	1a000570 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a00056c:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a00056e:	4770      	bx	lr
       SET_ERR(EBADF);
1a000570:	2309      	movs	r3, #9
1a000572:	6003      	str	r3, [r0, #0]
       return -1;
1a000574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000578:	4770      	bx	lr

1a00057a <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00057a:	2358      	movs	r3, #88	; 0x58
1a00057c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00057e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000582:	4770      	bx	lr

1a000584 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000584:	2902      	cmp	r1, #2
1a000586:	d81f      	bhi.n	1a0005c8 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00058c:	461d      	mov	r5, r3
1a00058e:	4617      	mov	r7, r2
1a000590:	4606      	mov	r6, r0
  size_t i = 0;
1a000592:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000594:	42ac      	cmp	r4, r5
1a000596:	d211      	bcs.n	1a0005bc <_read_r+0x38>
         int c = __stdio_getchar();
1a000598:	f002 f929 	bl	1a0027ee <__stdio_getchar>
         if( c != -1 ){
1a00059c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0005a0:	d0f8      	beq.n	1a000594 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0005a2:	f104 0801 	add.w	r8, r4, #1
1a0005a6:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0005a8:	280d      	cmp	r0, #13
1a0005aa:	d003      	beq.n	1a0005b4 <_read_r+0x30>
1a0005ac:	280a      	cmp	r0, #10
1a0005ae:	d001      	beq.n	1a0005b4 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0005b0:	4644      	mov	r4, r8
1a0005b2:	e7ef      	b.n	1a000594 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0005b4:	f002 f91b 	bl	1a0027ee <__stdio_getchar>
               return i;
1a0005b8:	4640      	mov	r0, r8
1a0005ba:	e003      	b.n	1a0005c4 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0005bc:	2313      	movs	r3, #19
1a0005be:	6033      	str	r3, [r6, #0]
      return -1;
1a0005c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0005c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0005c8:	2313      	movs	r3, #19
1a0005ca:	6003      	str	r3, [r0, #0]
      return -1;
1a0005cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0005d0:	4770      	bx	lr

1a0005d2 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0005d2:	2902      	cmp	r1, #2
1a0005d4:	d80c      	bhi.n	1a0005f0 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0005d6:	b570      	push	{r4, r5, r6, lr}
1a0005d8:	461d      	mov	r5, r3
1a0005da:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0005dc:	2400      	movs	r4, #0
1a0005de:	e003      	b.n	1a0005e8 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a0005e0:	5d30      	ldrb	r0, [r6, r4]
1a0005e2:	f002 f8ff 	bl	1a0027e4 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0005e6:	3401      	adds	r4, #1
1a0005e8:	42ac      	cmp	r4, r5
1a0005ea:	d3f9      	bcc.n	1a0005e0 <_write_r+0xe>
       return n;
1a0005ec:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0005ee:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0005f0:	2313      	movs	r3, #19
1a0005f2:	6003      	str	r3, [r0, #0]
       return -1;
1a0005f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0005f8:	4770      	bx	lr
1a0005fa:	Address 0x000000001a0005fa is out of bounds.


1a0005fc <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0005fc:	4b05      	ldr	r3, [pc, #20]	; (1a000614 <_sbrk_r+0x18>)
1a0005fe:	681b      	ldr	r3, [r3, #0]
1a000600:	b123      	cbz	r3, 1a00060c <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000602:	4b04      	ldr	r3, [pc, #16]	; (1a000614 <_sbrk_r+0x18>)
1a000604:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000606:	4401      	add	r1, r0
1a000608:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00060a:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a00060c:	4b01      	ldr	r3, [pc, #4]	; (1a000614 <_sbrk_r+0x18>)
1a00060e:	4a02      	ldr	r2, [pc, #8]	; (1a000618 <_sbrk_r+0x1c>)
1a000610:	601a      	str	r2, [r3, #0]
1a000612:	e7f6      	b.n	1a000602 <_sbrk_r+0x6>
1a000614:	100000ac 	.word	0x100000ac
1a000618:	10002b8c 	.word	0x10002b8c

1a00061c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a00061c:	4a12      	ldr	r2, [pc, #72]	; (1a000668 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a00061e:	f012 0f07 	tst.w	r2, #7
1a000622:	d01e      	beq.n	1a000662 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a000624:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000626:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a00062a:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a00062e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000630:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a000632:	480e      	ldr	r0, [pc, #56]	; (1a00066c <prvHeapInit+0x50>)
1a000634:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a000636:	2100      	movs	r1, #0
1a000638:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a00063a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a00063c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00063e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a000642:	480b      	ldr	r0, [pc, #44]	; (1a000670 <prvHeapInit+0x54>)
1a000644:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a000646:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000648:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a00064a:	1a99      	subs	r1, r3, r2
1a00064c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a00064e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000650:	4b08      	ldr	r3, [pc, #32]	; (1a000674 <prvHeapInit+0x58>)
1a000652:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000654:	4b08      	ldr	r3, [pc, #32]	; (1a000678 <prvHeapInit+0x5c>)
1a000656:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a000658:	4b08      	ldr	r3, [pc, #32]	; (1a00067c <prvHeapInit+0x60>)
1a00065a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a00065e:	601a      	str	r2, [r3, #0]
}
1a000660:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a000662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a000666:	e7e4      	b.n	1a000632 <prvHeapInit+0x16>
1a000668:	100000b4 	.word	0x100000b4
1a00066c:	100020c0 	.word	0x100020c0
1a000670:	100000b0 	.word	0x100000b0
1a000674:	100020bc 	.word	0x100020bc
1a000678:	100020b8 	.word	0x100020b8
1a00067c:	100020b4 	.word	0x100020b4

1a000680 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000680:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000682:	4b13      	ldr	r3, [pc, #76]	; (1a0006d0 <prvInsertBlockIntoFreeList+0x50>)
1a000684:	681a      	ldr	r2, [r3, #0]
1a000686:	4282      	cmp	r2, r0
1a000688:	d31b      	bcc.n	1a0006c2 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a00068a:	6859      	ldr	r1, [r3, #4]
1a00068c:	185c      	adds	r4, r3, r1
1a00068e:	4284      	cmp	r4, r0
1a000690:	d103      	bne.n	1a00069a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a000692:	6840      	ldr	r0, [r0, #4]
1a000694:	4401      	add	r1, r0
1a000696:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a000698:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a00069a:	6841      	ldr	r1, [r0, #4]
1a00069c:	1844      	adds	r4, r0, r1
1a00069e:	42a2      	cmp	r2, r4
1a0006a0:	d113      	bne.n	1a0006ca <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a0006a2:	4c0c      	ldr	r4, [pc, #48]	; (1a0006d4 <prvInsertBlockIntoFreeList+0x54>)
1a0006a4:	6824      	ldr	r4, [r4, #0]
1a0006a6:	42a2      	cmp	r2, r4
1a0006a8:	d00d      	beq.n	1a0006c6 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a0006aa:	6852      	ldr	r2, [r2, #4]
1a0006ac:	4411      	add	r1, r2
1a0006ae:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a0006b0:	681a      	ldr	r2, [r3, #0]
1a0006b2:	6812      	ldr	r2, [r2, #0]
1a0006b4:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a0006b6:	4298      	cmp	r0, r3
1a0006b8:	d000      	beq.n	1a0006bc <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a0006ba:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a0006bc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0006c0:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0006c2:	4613      	mov	r3, r2
1a0006c4:	e7de      	b.n	1a000684 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a0006c6:	6004      	str	r4, [r0, #0]
1a0006c8:	e7f5      	b.n	1a0006b6 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a0006ca:	6002      	str	r2, [r0, #0]
1a0006cc:	e7f3      	b.n	1a0006b6 <prvInsertBlockIntoFreeList+0x36>
1a0006ce:	bf00      	nop
1a0006d0:	100020c0 	.word	0x100020c0
1a0006d4:	100000b0 	.word	0x100000b0

1a0006d8 <pvPortMalloc>:
{
1a0006d8:	b570      	push	{r4, r5, r6, lr}
1a0006da:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a0006dc:	f000 ffae 	bl	1a00163c <vTaskSuspendAll>
		if( pxEnd == NULL )
1a0006e0:	4b3f      	ldr	r3, [pc, #252]	; (1a0007e0 <pvPortMalloc+0x108>)
1a0006e2:	681b      	ldr	r3, [r3, #0]
1a0006e4:	b1a3      	cbz	r3, 1a000710 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a0006e6:	4b3f      	ldr	r3, [pc, #252]	; (1a0007e4 <pvPortMalloc+0x10c>)
1a0006e8:	681b      	ldr	r3, [r3, #0]
1a0006ea:	421c      	tst	r4, r3
1a0006ec:	d013      	beq.n	1a000716 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a0006ee:	f001 f83f 	bl	1a001770 <xTaskResumeAll>
void *pvReturn = NULL;
1a0006f2:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a0006f4:	f000 fd5f 	bl	1a0011b6 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a0006f8:	f016 0f07 	tst.w	r6, #7
1a0006fc:	d06e      	beq.n	1a0007dc <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0006fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000702:	f383 8811 	msr	BASEPRI, r3
1a000706:	f3bf 8f6f 	isb	sy
1a00070a:	f3bf 8f4f 	dsb	sy
1a00070e:	e7fe      	b.n	1a00070e <pvPortMalloc+0x36>
			prvHeapInit();
1a000710:	f7ff ff84 	bl	1a00061c <prvHeapInit>
1a000714:	e7e7      	b.n	1a0006e6 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a000716:	b194      	cbz	r4, 1a00073e <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a000718:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a00071a:	f014 0f07 	tst.w	r4, #7
1a00071e:	d00e      	beq.n	1a00073e <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000720:	f024 0407 	bic.w	r4, r4, #7
1a000724:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000726:	f004 0307 	and.w	r3, r4, #7
1a00072a:	b143      	cbz	r3, 1a00073e <pvPortMalloc+0x66>
1a00072c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000730:	f383 8811 	msr	BASEPRI, r3
1a000734:	f3bf 8f6f 	isb	sy
1a000738:	f3bf 8f4f 	dsb	sy
1a00073c:	e7fe      	b.n	1a00073c <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a00073e:	b134      	cbz	r4, 1a00074e <pvPortMalloc+0x76>
1a000740:	4b29      	ldr	r3, [pc, #164]	; (1a0007e8 <pvPortMalloc+0x110>)
1a000742:	681b      	ldr	r3, [r3, #0]
1a000744:	42a3      	cmp	r3, r4
1a000746:	d306      	bcc.n	1a000756 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a000748:	4b28      	ldr	r3, [pc, #160]	; (1a0007ec <pvPortMalloc+0x114>)
1a00074a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a00074c:	e009      	b.n	1a000762 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a00074e:	f001 f80f 	bl	1a001770 <xTaskResumeAll>
void *pvReturn = NULL;
1a000752:	2600      	movs	r6, #0
1a000754:	e7ce      	b.n	1a0006f4 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a000756:	f001 f80b 	bl	1a001770 <xTaskResumeAll>
void *pvReturn = NULL;
1a00075a:	2600      	movs	r6, #0
1a00075c:	e7ca      	b.n	1a0006f4 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a00075e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000760:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000762:	686a      	ldr	r2, [r5, #4]
1a000764:	42a2      	cmp	r2, r4
1a000766:	d202      	bcs.n	1a00076e <pvPortMalloc+0x96>
1a000768:	682a      	ldr	r2, [r5, #0]
1a00076a:	2a00      	cmp	r2, #0
1a00076c:	d1f7      	bne.n	1a00075e <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a00076e:	4a1c      	ldr	r2, [pc, #112]	; (1a0007e0 <pvPortMalloc+0x108>)
1a000770:	6812      	ldr	r2, [r2, #0]
1a000772:	42aa      	cmp	r2, r5
1a000774:	d014      	beq.n	1a0007a0 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a000776:	681e      	ldr	r6, [r3, #0]
1a000778:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a00077a:	682a      	ldr	r2, [r5, #0]
1a00077c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a00077e:	686b      	ldr	r3, [r5, #4]
1a000780:	1b1b      	subs	r3, r3, r4
1a000782:	2b10      	cmp	r3, #16
1a000784:	d914      	bls.n	1a0007b0 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000786:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000788:	f010 0f07 	tst.w	r0, #7
1a00078c:	d00c      	beq.n	1a0007a8 <pvPortMalloc+0xd0>
1a00078e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000792:	f383 8811 	msr	BASEPRI, r3
1a000796:	f3bf 8f6f 	isb	sy
1a00079a:	f3bf 8f4f 	dsb	sy
1a00079e:	e7fe      	b.n	1a00079e <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a0007a0:	f000 ffe6 	bl	1a001770 <xTaskResumeAll>
void *pvReturn = NULL;
1a0007a4:	2600      	movs	r6, #0
1a0007a6:	e7a5      	b.n	1a0006f4 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a0007a8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a0007aa:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a0007ac:	f7ff ff68 	bl	1a000680 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a0007b0:	686a      	ldr	r2, [r5, #4]
1a0007b2:	490d      	ldr	r1, [pc, #52]	; (1a0007e8 <pvPortMalloc+0x110>)
1a0007b4:	680b      	ldr	r3, [r1, #0]
1a0007b6:	1a9b      	subs	r3, r3, r2
1a0007b8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a0007ba:	490d      	ldr	r1, [pc, #52]	; (1a0007f0 <pvPortMalloc+0x118>)
1a0007bc:	6809      	ldr	r1, [r1, #0]
1a0007be:	428b      	cmp	r3, r1
1a0007c0:	d201      	bcs.n	1a0007c6 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a0007c2:	490b      	ldr	r1, [pc, #44]	; (1a0007f0 <pvPortMalloc+0x118>)
1a0007c4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a0007c6:	4b07      	ldr	r3, [pc, #28]	; (1a0007e4 <pvPortMalloc+0x10c>)
1a0007c8:	681b      	ldr	r3, [r3, #0]
1a0007ca:	4313      	orrs	r3, r2
1a0007cc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a0007ce:	2300      	movs	r3, #0
1a0007d0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a0007d2:	f000 ffcd 	bl	1a001770 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0007d6:	2e00      	cmp	r6, #0
1a0007d8:	d18e      	bne.n	1a0006f8 <pvPortMalloc+0x20>
1a0007da:	e78b      	b.n	1a0006f4 <pvPortMalloc+0x1c>
}
1a0007dc:	4630      	mov	r0, r6
1a0007de:	bd70      	pop	{r4, r5, r6, pc}
1a0007e0:	100000b0 	.word	0x100000b0
1a0007e4:	100020b4 	.word	0x100020b4
1a0007e8:	100020b8 	.word	0x100020b8
1a0007ec:	100020c0 	.word	0x100020c0
1a0007f0:	100020bc 	.word	0x100020bc

1a0007f4 <vPortFree>:
	if( pv != NULL )
1a0007f4:	b380      	cbz	r0, 1a000858 <vPortFree+0x64>
{
1a0007f6:	b538      	push	{r3, r4, r5, lr}
1a0007f8:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a0007fa:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a0007fe:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a000802:	4916      	ldr	r1, [pc, #88]	; (1a00085c <vPortFree+0x68>)
1a000804:	6809      	ldr	r1, [r1, #0]
1a000806:	420a      	tst	r2, r1
1a000808:	d108      	bne.n	1a00081c <vPortFree+0x28>
1a00080a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00080e:	f383 8811 	msr	BASEPRI, r3
1a000812:	f3bf 8f6f 	isb	sy
1a000816:	f3bf 8f4f 	dsb	sy
1a00081a:	e7fe      	b.n	1a00081a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a00081c:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a000820:	b140      	cbz	r0, 1a000834 <vPortFree+0x40>
1a000822:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000826:	f383 8811 	msr	BASEPRI, r3
1a00082a:	f3bf 8f6f 	isb	sy
1a00082e:	f3bf 8f4f 	dsb	sy
1a000832:	e7fe      	b.n	1a000832 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000834:	ea22 0201 	bic.w	r2, r2, r1
1a000838:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a00083c:	f000 fefe 	bl	1a00163c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000840:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000844:	4a06      	ldr	r2, [pc, #24]	; (1a000860 <vPortFree+0x6c>)
1a000846:	6813      	ldr	r3, [r2, #0]
1a000848:	440b      	add	r3, r1
1a00084a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a00084c:	4628      	mov	r0, r5
1a00084e:	f7ff ff17 	bl	1a000680 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a000852:	f000 ff8d 	bl	1a001770 <xTaskResumeAll>
}
1a000856:	bd38      	pop	{r3, r4, r5, pc}
1a000858:	4770      	bx	lr
1a00085a:	bf00      	nop
1a00085c:	100020b4 	.word	0x100020b4
1a000860:	100020b8 	.word	0x100020b8

1a000864 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000864:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000866:	b123      	cbz	r3, 1a000872 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000868:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00086a:	6818      	ldr	r0, [r3, #0]
1a00086c:	f1c0 0007 	rsb	r0, r0, #7
1a000870:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000872:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000874:	4770      	bx	lr

1a000876 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000876:	b510      	push	{r4, lr}
1a000878:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a00087a:	f001 fd73 	bl	1a002364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a00087e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000880:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000882:	429a      	cmp	r2, r3
1a000884:	d004      	beq.n	1a000890 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000886:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000888:	f001 fd8e 	bl	1a0023a8 <vPortExitCritical>

	return xReturn;
}
1a00088c:	4620      	mov	r0, r4
1a00088e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000890:	2401      	movs	r4, #1
1a000892:	e7f9      	b.n	1a000888 <prvIsQueueFull+0x12>

1a000894 <prvIsQueueEmpty>:
{
1a000894:	b510      	push	{r4, lr}
1a000896:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000898:	f001 fd64 	bl	1a002364 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a00089c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00089e:	b123      	cbz	r3, 1a0008aa <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a0008a0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0008a2:	f001 fd81 	bl	1a0023a8 <vPortExitCritical>
}
1a0008a6:	4620      	mov	r0, r4
1a0008a8:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0008aa:	2401      	movs	r4, #1
1a0008ac:	e7f9      	b.n	1a0008a2 <prvIsQueueEmpty+0xe>

1a0008ae <prvCopyDataToQueue>:
{
1a0008ae:	b570      	push	{r4, r5, r6, lr}
1a0008b0:	4604      	mov	r4, r0
1a0008b2:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0008b4:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0008b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0008b8:	b95a      	cbnz	r2, 1a0008d2 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0008ba:	6803      	ldr	r3, [r0, #0]
1a0008bc:	b11b      	cbz	r3, 1a0008c6 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0008be:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0008c0:	3501      	adds	r5, #1
1a0008c2:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0008c4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0008c6:	6840      	ldr	r0, [r0, #4]
1a0008c8:	f001 f9ba 	bl	1a001c40 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0008cc:	2300      	movs	r3, #0
1a0008ce:	6063      	str	r3, [r4, #4]
1a0008d0:	e7f6      	b.n	1a0008c0 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0008d2:	b96e      	cbnz	r6, 1a0008f0 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0008d4:	6880      	ldr	r0, [r0, #8]
1a0008d6:	f003 f98b 	bl	1a003bf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0008da:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0008dc:	68a3      	ldr	r3, [r4, #8]
1a0008de:	4413      	add	r3, r2
1a0008e0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0008e2:	6862      	ldr	r2, [r4, #4]
1a0008e4:	4293      	cmp	r3, r2
1a0008e6:	d319      	bcc.n	1a00091c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0008e8:	6823      	ldr	r3, [r4, #0]
1a0008ea:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0008ec:	2000      	movs	r0, #0
1a0008ee:	e7e7      	b.n	1a0008c0 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0008f0:	68c0      	ldr	r0, [r0, #12]
1a0008f2:	f003 f97d 	bl	1a003bf0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0008f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0008f8:	4252      	negs	r2, r2
1a0008fa:	68e3      	ldr	r3, [r4, #12]
1a0008fc:	4413      	add	r3, r2
1a0008fe:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000900:	6821      	ldr	r1, [r4, #0]
1a000902:	428b      	cmp	r3, r1
1a000904:	d202      	bcs.n	1a00090c <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000906:	6863      	ldr	r3, [r4, #4]
1a000908:	441a      	add	r2, r3
1a00090a:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a00090c:	2e02      	cmp	r6, #2
1a00090e:	d001      	beq.n	1a000914 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000910:	2000      	movs	r0, #0
1a000912:	e7d5      	b.n	1a0008c0 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000914:	b125      	cbz	r5, 1a000920 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000916:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000918:	2000      	movs	r0, #0
1a00091a:	e7d1      	b.n	1a0008c0 <prvCopyDataToQueue+0x12>
1a00091c:	2000      	movs	r0, #0
1a00091e:	e7cf      	b.n	1a0008c0 <prvCopyDataToQueue+0x12>
1a000920:	2000      	movs	r0, #0
1a000922:	e7cd      	b.n	1a0008c0 <prvCopyDataToQueue+0x12>

1a000924 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000924:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000926:	b172      	cbz	r2, 1a000946 <prvCopyDataFromQueue+0x22>
{
1a000928:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a00092a:	68c3      	ldr	r3, [r0, #12]
1a00092c:	4413      	add	r3, r2
1a00092e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000930:	6844      	ldr	r4, [r0, #4]
1a000932:	42a3      	cmp	r3, r4
1a000934:	d301      	bcc.n	1a00093a <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000936:	6803      	ldr	r3, [r0, #0]
1a000938:	60c3      	str	r3, [r0, #12]
1a00093a:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00093c:	68c1      	ldr	r1, [r0, #12]
1a00093e:	4620      	mov	r0, r4
1a000940:	f003 f956 	bl	1a003bf0 <memcpy>
}
1a000944:	bd10      	pop	{r4, pc}
1a000946:	4770      	bx	lr

1a000948 <prvUnlockQueue>:
{
1a000948:	b538      	push	{r3, r4, r5, lr}
1a00094a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a00094c:	f001 fd0a 	bl	1a002364 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000950:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000954:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000956:	e003      	b.n	1a000960 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000958:	f001 f900 	bl	1a001b5c <vTaskMissedYield>
			--cTxLock;
1a00095c:	3c01      	subs	r4, #1
1a00095e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000960:	2c00      	cmp	r4, #0
1a000962:	dd08      	ble.n	1a000976 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000964:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000966:	b133      	cbz	r3, 1a000976 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000968:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00096c:	f001 f864 	bl	1a001a38 <xTaskRemoveFromEventList>
1a000970:	2800      	cmp	r0, #0
1a000972:	d0f3      	beq.n	1a00095c <prvUnlockQueue+0x14>
1a000974:	e7f0      	b.n	1a000958 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000976:	23ff      	movs	r3, #255	; 0xff
1a000978:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a00097c:	f001 fd14 	bl	1a0023a8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000980:	f001 fcf0 	bl	1a002364 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000984:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000988:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00098a:	e003      	b.n	1a000994 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a00098c:	f001 f8e6 	bl	1a001b5c <vTaskMissedYield>
				--cRxLock;
1a000990:	3c01      	subs	r4, #1
1a000992:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000994:	2c00      	cmp	r4, #0
1a000996:	dd08      	ble.n	1a0009aa <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000998:	692b      	ldr	r3, [r5, #16]
1a00099a:	b133      	cbz	r3, 1a0009aa <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00099c:	f105 0010 	add.w	r0, r5, #16
1a0009a0:	f001 f84a 	bl	1a001a38 <xTaskRemoveFromEventList>
1a0009a4:	2800      	cmp	r0, #0
1a0009a6:	d0f3      	beq.n	1a000990 <prvUnlockQueue+0x48>
1a0009a8:	e7f0      	b.n	1a00098c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0009aa:	23ff      	movs	r3, #255	; 0xff
1a0009ac:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0009b0:	f001 fcfa 	bl	1a0023a8 <vPortExitCritical>
}
1a0009b4:	bd38      	pop	{r3, r4, r5, pc}
1a0009b6:	Address 0x000000001a0009b6 is out of bounds.


1a0009b8 <xQueueGenericReset>:
{
1a0009b8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0009ba:	b940      	cbnz	r0, 1a0009ce <xQueueGenericReset+0x16>
1a0009bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009c0:	f383 8811 	msr	BASEPRI, r3
1a0009c4:	f3bf 8f6f 	isb	sy
1a0009c8:	f3bf 8f4f 	dsb	sy
1a0009cc:	e7fe      	b.n	1a0009cc <xQueueGenericReset+0x14>
1a0009ce:	4604      	mov	r4, r0
1a0009d0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0009d2:	f001 fcc7 	bl	1a002364 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0009d6:	6821      	ldr	r1, [r4, #0]
1a0009d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0009da:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0009dc:	fb03 1002 	mla	r0, r3, r2, r1
1a0009e0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0009e2:	2000      	movs	r0, #0
1a0009e4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0009e6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0009e8:	3a01      	subs	r2, #1
1a0009ea:	fb02 1303 	mla	r3, r2, r3, r1
1a0009ee:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0009f0:	23ff      	movs	r3, #255	; 0xff
1a0009f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0009f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0009fa:	b9a5      	cbnz	r5, 1a000a26 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0009fc:	6923      	ldr	r3, [r4, #16]
1a0009fe:	b91b      	cbnz	r3, 1a000a08 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000a00:	f001 fcd2 	bl	1a0023a8 <vPortExitCritical>
}
1a000a04:	2001      	movs	r0, #1
1a000a06:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000a08:	f104 0010 	add.w	r0, r4, #16
1a000a0c:	f001 f814 	bl	1a001a38 <xTaskRemoveFromEventList>
1a000a10:	2800      	cmp	r0, #0
1a000a12:	d0f5      	beq.n	1a000a00 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a000a14:	4b08      	ldr	r3, [pc, #32]	; (1a000a38 <xQueueGenericReset+0x80>)
1a000a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a1a:	601a      	str	r2, [r3, #0]
1a000a1c:	f3bf 8f4f 	dsb	sy
1a000a20:	f3bf 8f6f 	isb	sy
1a000a24:	e7ec      	b.n	1a000a00 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000a26:	f104 0010 	add.w	r0, r4, #16
1a000a2a:	f000 fb62 	bl	1a0010f2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000a2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000a32:	f000 fb5e 	bl	1a0010f2 <vListInitialise>
1a000a36:	e7e3      	b.n	1a000a00 <xQueueGenericReset+0x48>
1a000a38:	e000ed04 	.word	0xe000ed04

1a000a3c <prvInitialiseNewQueue>:
{
1a000a3c:	b538      	push	{r3, r4, r5, lr}
1a000a3e:	461d      	mov	r5, r3
1a000a40:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000a42:	460b      	mov	r3, r1
1a000a44:	b149      	cbz	r1, 1a000a5a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000a46:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000a48:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000a4a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000a4c:	2101      	movs	r1, #1
1a000a4e:	4620      	mov	r0, r4
1a000a50:	f7ff ffb2 	bl	1a0009b8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000a54:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000a58:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000a5a:	6024      	str	r4, [r4, #0]
1a000a5c:	e7f4      	b.n	1a000a48 <prvInitialiseNewQueue+0xc>

1a000a5e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000a5e:	b940      	cbnz	r0, 1a000a72 <xQueueGenericCreateStatic+0x14>
1a000a60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a64:	f383 8811 	msr	BASEPRI, r3
1a000a68:	f3bf 8f6f 	isb	sy
1a000a6c:	f3bf 8f4f 	dsb	sy
1a000a70:	e7fe      	b.n	1a000a70 <xQueueGenericCreateStatic+0x12>
	{
1a000a72:	b510      	push	{r4, lr}
1a000a74:	b084      	sub	sp, #16
1a000a76:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000a78:	b153      	cbz	r3, 1a000a90 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000a7a:	b192      	cbz	r2, 1a000aa2 <xQueueGenericCreateStatic+0x44>
1a000a7c:	b989      	cbnz	r1, 1a000aa2 <xQueueGenericCreateStatic+0x44>
1a000a7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a82:	f383 8811 	msr	BASEPRI, r3
1a000a86:	f3bf 8f6f 	isb	sy
1a000a8a:	f3bf 8f4f 	dsb	sy
1a000a8e:	e7fe      	b.n	1a000a8e <xQueueGenericCreateStatic+0x30>
1a000a90:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a94:	f383 8811 	msr	BASEPRI, r3
1a000a98:	f3bf 8f6f 	isb	sy
1a000a9c:	f3bf 8f4f 	dsb	sy
1a000aa0:	e7fe      	b.n	1a000aa0 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000aa2:	b94a      	cbnz	r2, 1a000ab8 <xQueueGenericCreateStatic+0x5a>
1a000aa4:	b141      	cbz	r1, 1a000ab8 <xQueueGenericCreateStatic+0x5a>
1a000aa6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000aaa:	f383 8811 	msr	BASEPRI, r3
1a000aae:	f3bf 8f6f 	isb	sy
1a000ab2:	f3bf 8f4f 	dsb	sy
1a000ab6:	e7fe      	b.n	1a000ab6 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000ab8:	2050      	movs	r0, #80	; 0x50
1a000aba:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000abc:	9803      	ldr	r0, [sp, #12]
1a000abe:	2850      	cmp	r0, #80	; 0x50
1a000ac0:	d008      	beq.n	1a000ad4 <xQueueGenericCreateStatic+0x76>
1a000ac2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ac6:	f383 8811 	msr	BASEPRI, r3
1a000aca:	f3bf 8f6f 	isb	sy
1a000ace:	f3bf 8f4f 	dsb	sy
1a000ad2:	e7fe      	b.n	1a000ad2 <xQueueGenericCreateStatic+0x74>
1a000ad4:	4620      	mov	r0, r4
1a000ad6:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000ad8:	2301      	movs	r3, #1
1a000ada:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000ade:	9400      	str	r4, [sp, #0]
1a000ae0:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000ae4:	f7ff ffaa 	bl	1a000a3c <prvInitialiseNewQueue>
	}
1a000ae8:	4620      	mov	r0, r4
1a000aea:	b004      	add	sp, #16
1a000aec:	bd10      	pop	{r4, pc}

1a000aee <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000aee:	b940      	cbnz	r0, 1a000b02 <xQueueGenericCreate+0x14>
1a000af0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000af4:	f383 8811 	msr	BASEPRI, r3
1a000af8:	f3bf 8f6f 	isb	sy
1a000afc:	f3bf 8f4f 	dsb	sy
1a000b00:	e7fe      	b.n	1a000b00 <xQueueGenericCreate+0x12>
	{
1a000b02:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b04:	b083      	sub	sp, #12
1a000b06:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000b08:	b111      	cbz	r1, 1a000b10 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000b0a:	fb01 f000 	mul.w	r0, r1, r0
1a000b0e:	e000      	b.n	1a000b12 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a000b10:	2000      	movs	r0, #0
1a000b12:	4617      	mov	r7, r2
1a000b14:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000b16:	3050      	adds	r0, #80	; 0x50
1a000b18:	f7ff fdde 	bl	1a0006d8 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000b1c:	4605      	mov	r5, r0
1a000b1e:	b150      	cbz	r0, 1a000b36 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000b20:	2300      	movs	r3, #0
1a000b22:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000b26:	9000      	str	r0, [sp, #0]
1a000b28:	463b      	mov	r3, r7
1a000b2a:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000b2e:	4621      	mov	r1, r4
1a000b30:	4630      	mov	r0, r6
1a000b32:	f7ff ff83 	bl	1a000a3c <prvInitialiseNewQueue>
	}
1a000b36:	4628      	mov	r0, r5
1a000b38:	b003      	add	sp, #12
1a000b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000b3c <xQueueGenericSend>:
{
1a000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b3e:	b085      	sub	sp, #20
1a000b40:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000b42:	b160      	cbz	r0, 1a000b5e <xQueueGenericSend+0x22>
1a000b44:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000b46:	b999      	cbnz	r1, 1a000b70 <xQueueGenericSend+0x34>
1a000b48:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000b4a:	b18a      	cbz	r2, 1a000b70 <xQueueGenericSend+0x34>
1a000b4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b50:	f383 8811 	msr	BASEPRI, r3
1a000b54:	f3bf 8f6f 	isb	sy
1a000b58:	f3bf 8f4f 	dsb	sy
1a000b5c:	e7fe      	b.n	1a000b5c <xQueueGenericSend+0x20>
1a000b5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b62:	f383 8811 	msr	BASEPRI, r3
1a000b66:	f3bf 8f6f 	isb	sy
1a000b6a:	f3bf 8f4f 	dsb	sy
1a000b6e:	e7fe      	b.n	1a000b6e <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000b70:	2b02      	cmp	r3, #2
1a000b72:	d10b      	bne.n	1a000b8c <xQueueGenericSend+0x50>
1a000b74:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000b76:	2a01      	cmp	r2, #1
1a000b78:	d008      	beq.n	1a000b8c <xQueueGenericSend+0x50>
1a000b7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b7e:	f383 8811 	msr	BASEPRI, r3
1a000b82:	f3bf 8f6f 	isb	sy
1a000b86:	f3bf 8f4f 	dsb	sy
1a000b8a:	e7fe      	b.n	1a000b8a <xQueueGenericSend+0x4e>
1a000b8c:	461e      	mov	r6, r3
1a000b8e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000b90:	f000 ffea 	bl	1a001b68 <xTaskGetSchedulerState>
1a000b94:	b950      	cbnz	r0, 1a000bac <xQueueGenericSend+0x70>
1a000b96:	9b01      	ldr	r3, [sp, #4]
1a000b98:	b153      	cbz	r3, 1a000bb0 <xQueueGenericSend+0x74>
1a000b9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b9e:	f383 8811 	msr	BASEPRI, r3
1a000ba2:	f3bf 8f6f 	isb	sy
1a000ba6:	f3bf 8f4f 	dsb	sy
1a000baa:	e7fe      	b.n	1a000baa <xQueueGenericSend+0x6e>
1a000bac:	2500      	movs	r5, #0
1a000bae:	e03a      	b.n	1a000c26 <xQueueGenericSend+0xea>
1a000bb0:	2500      	movs	r5, #0
1a000bb2:	e038      	b.n	1a000c26 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000bb4:	4632      	mov	r2, r6
1a000bb6:	4639      	mov	r1, r7
1a000bb8:	4620      	mov	r0, r4
1a000bba:	f7ff fe78 	bl	1a0008ae <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000bc0:	b94b      	cbnz	r3, 1a000bd6 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a000bc2:	b1a8      	cbz	r0, 1a000bf0 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a000bc4:	4b3b      	ldr	r3, [pc, #236]	; (1a000cb4 <xQueueGenericSend+0x178>)
1a000bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000bca:	601a      	str	r2, [r3, #0]
1a000bcc:	f3bf 8f4f 	dsb	sy
1a000bd0:	f3bf 8f6f 	isb	sy
1a000bd4:	e00c      	b.n	1a000bf0 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000bd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000bda:	f000 ff2d 	bl	1a001a38 <xTaskRemoveFromEventList>
1a000bde:	b138      	cbz	r0, 1a000bf0 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a000be0:	4b34      	ldr	r3, [pc, #208]	; (1a000cb4 <xQueueGenericSend+0x178>)
1a000be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000be6:	601a      	str	r2, [r3, #0]
1a000be8:	f3bf 8f4f 	dsb	sy
1a000bec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000bf0:	f001 fbda 	bl	1a0023a8 <vPortExitCritical>
				return pdPASS;
1a000bf4:	2001      	movs	r0, #1
}
1a000bf6:	b005      	add	sp, #20
1a000bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000bfa:	f001 fbd5 	bl	1a0023a8 <vPortExitCritical>
					return errQUEUE_FULL;
1a000bfe:	2000      	movs	r0, #0
1a000c00:	e7f9      	b.n	1a000bf6 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000c02:	a802      	add	r0, sp, #8
1a000c04:	f000 ff5e 	bl	1a001ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000c08:	2501      	movs	r5, #1
1a000c0a:	e019      	b.n	1a000c40 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a000c0c:	2300      	movs	r3, #0
1a000c0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000c12:	e021      	b.n	1a000c58 <xQueueGenericSend+0x11c>
1a000c14:	2300      	movs	r3, #0
1a000c16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000c1a:	e023      	b.n	1a000c64 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a000c1c:	4620      	mov	r0, r4
1a000c1e:	f7ff fe93 	bl	1a000948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000c22:	f000 fda5 	bl	1a001770 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000c26:	f001 fb9d 	bl	1a002364 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000c2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000c2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000c2e:	429a      	cmp	r2, r3
1a000c30:	d3c0      	bcc.n	1a000bb4 <xQueueGenericSend+0x78>
1a000c32:	2e02      	cmp	r6, #2
1a000c34:	d0be      	beq.n	1a000bb4 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000c36:	9b01      	ldr	r3, [sp, #4]
1a000c38:	2b00      	cmp	r3, #0
1a000c3a:	d0de      	beq.n	1a000bfa <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a000c3c:	2d00      	cmp	r5, #0
1a000c3e:	d0e0      	beq.n	1a000c02 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a000c40:	f001 fbb2 	bl	1a0023a8 <vPortExitCritical>
		vTaskSuspendAll();
1a000c44:	f000 fcfa 	bl	1a00163c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000c48:	f001 fb8c 	bl	1a002364 <vPortEnterCritical>
1a000c4c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000c50:	b25b      	sxtb	r3, r3
1a000c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000c56:	d0d9      	beq.n	1a000c0c <xQueueGenericSend+0xd0>
1a000c58:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000c5c:	b25b      	sxtb	r3, r3
1a000c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000c62:	d0d7      	beq.n	1a000c14 <xQueueGenericSend+0xd8>
1a000c64:	f001 fba0 	bl	1a0023a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000c68:	a901      	add	r1, sp, #4
1a000c6a:	a802      	add	r0, sp, #8
1a000c6c:	f000 ff36 	bl	1a001adc <xTaskCheckForTimeOut>
1a000c70:	b9c8      	cbnz	r0, 1a000ca6 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000c72:	4620      	mov	r0, r4
1a000c74:	f7ff fdff 	bl	1a000876 <prvIsQueueFull>
1a000c78:	2800      	cmp	r0, #0
1a000c7a:	d0cf      	beq.n	1a000c1c <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000c7c:	9901      	ldr	r1, [sp, #4]
1a000c7e:	f104 0010 	add.w	r0, r4, #16
1a000c82:	f000 fea5 	bl	1a0019d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000c86:	4620      	mov	r0, r4
1a000c88:	f7ff fe5e 	bl	1a000948 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000c8c:	f000 fd70 	bl	1a001770 <xTaskResumeAll>
1a000c90:	2800      	cmp	r0, #0
1a000c92:	d1c8      	bne.n	1a000c26 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a000c94:	4b07      	ldr	r3, [pc, #28]	; (1a000cb4 <xQueueGenericSend+0x178>)
1a000c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c9a:	601a      	str	r2, [r3, #0]
1a000c9c:	f3bf 8f4f 	dsb	sy
1a000ca0:	f3bf 8f6f 	isb	sy
1a000ca4:	e7bf      	b.n	1a000c26 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a000ca6:	4620      	mov	r0, r4
1a000ca8:	f7ff fe4e 	bl	1a000948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000cac:	f000 fd60 	bl	1a001770 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000cb0:	2000      	movs	r0, #0
1a000cb2:	e7a0      	b.n	1a000bf6 <xQueueGenericSend+0xba>
1a000cb4:	e000ed04 	.word	0xe000ed04

1a000cb8 <xQueueGenericSendFromISR>:
{
1a000cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000cbc:	b160      	cbz	r0, 1a000cd8 <xQueueGenericSendFromISR+0x20>
1a000cbe:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000cc0:	b999      	cbnz	r1, 1a000cea <xQueueGenericSendFromISR+0x32>
1a000cc2:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000cc4:	b188      	cbz	r0, 1a000cea <xQueueGenericSendFromISR+0x32>
1a000cc6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cca:	f383 8811 	msr	BASEPRI, r3
1a000cce:	f3bf 8f6f 	isb	sy
1a000cd2:	f3bf 8f4f 	dsb	sy
1a000cd6:	e7fe      	b.n	1a000cd6 <xQueueGenericSendFromISR+0x1e>
1a000cd8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cdc:	f383 8811 	msr	BASEPRI, r3
1a000ce0:	f3bf 8f6f 	isb	sy
1a000ce4:	f3bf 8f4f 	dsb	sy
1a000ce8:	e7fe      	b.n	1a000ce8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000cea:	2b02      	cmp	r3, #2
1a000cec:	d10b      	bne.n	1a000d06 <xQueueGenericSendFromISR+0x4e>
1a000cee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000cf0:	2801      	cmp	r0, #1
1a000cf2:	d008      	beq.n	1a000d06 <xQueueGenericSendFromISR+0x4e>
1a000cf4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cf8:	f383 8811 	msr	BASEPRI, r3
1a000cfc:	f3bf 8f6f 	isb	sy
1a000d00:	f3bf 8f4f 	dsb	sy
1a000d04:	e7fe      	b.n	1a000d04 <xQueueGenericSendFromISR+0x4c>
1a000d06:	461f      	mov	r7, r3
1a000d08:	4690      	mov	r8, r2
1a000d0a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000d0c:	f001 fc54 	bl	1a0025b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000d10:	f3ef 8611 	mrs	r6, BASEPRI
1a000d14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d18:	f383 8811 	msr	BASEPRI, r3
1a000d1c:	f3bf 8f6f 	isb	sy
1a000d20:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000d24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000d26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000d28:	429a      	cmp	r2, r3
1a000d2a:	d303      	bcc.n	1a000d34 <xQueueGenericSendFromISR+0x7c>
1a000d2c:	2f02      	cmp	r7, #2
1a000d2e:	d001      	beq.n	1a000d34 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a000d30:	2000      	movs	r0, #0
1a000d32:	e00f      	b.n	1a000d54 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000d34:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000d38:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000d3a:	463a      	mov	r2, r7
1a000d3c:	4649      	mov	r1, r9
1a000d3e:	4620      	mov	r0, r4
1a000d40:	f7ff fdb5 	bl	1a0008ae <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000d44:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000d48:	d008      	beq.n	1a000d5c <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000d4a:	1c6b      	adds	r3, r5, #1
1a000d4c:	b25b      	sxtb	r3, r3
1a000d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000d52:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000d54:	f386 8811 	msr	BASEPRI, r6
}
1a000d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000d5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000d5e:	b15b      	cbz	r3, 1a000d78 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000d60:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000d64:	f000 fe68 	bl	1a001a38 <xTaskRemoveFromEventList>
1a000d68:	b140      	cbz	r0, 1a000d7c <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a000d6a:	f1b8 0f00 	cmp.w	r8, #0
1a000d6e:	d007      	beq.n	1a000d80 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000d70:	2001      	movs	r0, #1
1a000d72:	f8c8 0000 	str.w	r0, [r8]
1a000d76:	e7ed      	b.n	1a000d54 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a000d78:	2001      	movs	r0, #1
1a000d7a:	e7eb      	b.n	1a000d54 <xQueueGenericSendFromISR+0x9c>
1a000d7c:	2001      	movs	r0, #1
1a000d7e:	e7e9      	b.n	1a000d54 <xQueueGenericSendFromISR+0x9c>
1a000d80:	2001      	movs	r0, #1
1a000d82:	e7e7      	b.n	1a000d54 <xQueueGenericSendFromISR+0x9c>

1a000d84 <xQueueReceive>:
{
1a000d84:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000d86:	b085      	sub	sp, #20
1a000d88:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000d8a:	b160      	cbz	r0, 1a000da6 <xQueueReceive+0x22>
1a000d8c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000d8e:	b999      	cbnz	r1, 1a000db8 <xQueueReceive+0x34>
1a000d90:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000d92:	b18b      	cbz	r3, 1a000db8 <xQueueReceive+0x34>
	__asm volatile
1a000d94:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d98:	f383 8811 	msr	BASEPRI, r3
1a000d9c:	f3bf 8f6f 	isb	sy
1a000da0:	f3bf 8f4f 	dsb	sy
1a000da4:	e7fe      	b.n	1a000da4 <xQueueReceive+0x20>
1a000da6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000daa:	f383 8811 	msr	BASEPRI, r3
1a000dae:	f3bf 8f6f 	isb	sy
1a000db2:	f3bf 8f4f 	dsb	sy
1a000db6:	e7fe      	b.n	1a000db6 <xQueueReceive+0x32>
1a000db8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000dba:	f000 fed5 	bl	1a001b68 <xTaskGetSchedulerState>
1a000dbe:	b950      	cbnz	r0, 1a000dd6 <xQueueReceive+0x52>
1a000dc0:	9b01      	ldr	r3, [sp, #4]
1a000dc2:	b153      	cbz	r3, 1a000dda <xQueueReceive+0x56>
1a000dc4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dc8:	f383 8811 	msr	BASEPRI, r3
1a000dcc:	f3bf 8f6f 	isb	sy
1a000dd0:	f3bf 8f4f 	dsb	sy
1a000dd4:	e7fe      	b.n	1a000dd4 <xQueueReceive+0x50>
1a000dd6:	2600      	movs	r6, #0
1a000dd8:	e03e      	b.n	1a000e58 <xQueueReceive+0xd4>
1a000dda:	2600      	movs	r6, #0
1a000ddc:	e03c      	b.n	1a000e58 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000dde:	4639      	mov	r1, r7
1a000de0:	4620      	mov	r0, r4
1a000de2:	f7ff fd9f 	bl	1a000924 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000de6:	3d01      	subs	r5, #1
1a000de8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000dea:	6923      	ldr	r3, [r4, #16]
1a000dec:	b923      	cbnz	r3, 1a000df8 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a000dee:	f001 fadb 	bl	1a0023a8 <vPortExitCritical>
				return pdPASS;
1a000df2:	2001      	movs	r0, #1
}
1a000df4:	b005      	add	sp, #20
1a000df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000df8:	f104 0010 	add.w	r0, r4, #16
1a000dfc:	f000 fe1c 	bl	1a001a38 <xTaskRemoveFromEventList>
1a000e00:	2800      	cmp	r0, #0
1a000e02:	d0f4      	beq.n	1a000dee <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a000e04:	4b34      	ldr	r3, [pc, #208]	; (1a000ed8 <xQueueReceive+0x154>)
1a000e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e0a:	601a      	str	r2, [r3, #0]
1a000e0c:	f3bf 8f4f 	dsb	sy
1a000e10:	f3bf 8f6f 	isb	sy
1a000e14:	e7eb      	b.n	1a000dee <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a000e16:	f001 fac7 	bl	1a0023a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000e1a:	2000      	movs	r0, #0
1a000e1c:	e7ea      	b.n	1a000df4 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000e1e:	a802      	add	r0, sp, #8
1a000e20:	f000 fe50 	bl	1a001ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000e24:	2601      	movs	r6, #1
1a000e26:	e021      	b.n	1a000e6c <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a000e28:	2300      	movs	r3, #0
1a000e2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000e2e:	e029      	b.n	1a000e84 <xQueueReceive+0x100>
1a000e30:	2300      	movs	r3, #0
1a000e32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000e36:	e02b      	b.n	1a000e90 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a000e38:	4620      	mov	r0, r4
1a000e3a:	f7ff fd85 	bl	1a000948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000e3e:	f000 fc97 	bl	1a001770 <xTaskResumeAll>
1a000e42:	e009      	b.n	1a000e58 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a000e44:	4620      	mov	r0, r4
1a000e46:	f7ff fd7f 	bl	1a000948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000e4a:	f000 fc91 	bl	1a001770 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000e4e:	4620      	mov	r0, r4
1a000e50:	f7ff fd20 	bl	1a000894 <prvIsQueueEmpty>
1a000e54:	2800      	cmp	r0, #0
1a000e56:	d13d      	bne.n	1a000ed4 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a000e58:	f001 fa84 	bl	1a002364 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000e5c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000e5e:	2d00      	cmp	r5, #0
1a000e60:	d1bd      	bne.n	1a000dde <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000e62:	9b01      	ldr	r3, [sp, #4]
1a000e64:	2b00      	cmp	r3, #0
1a000e66:	d0d6      	beq.n	1a000e16 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a000e68:	2e00      	cmp	r6, #0
1a000e6a:	d0d8      	beq.n	1a000e1e <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a000e6c:	f001 fa9c 	bl	1a0023a8 <vPortExitCritical>
		vTaskSuspendAll();
1a000e70:	f000 fbe4 	bl	1a00163c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000e74:	f001 fa76 	bl	1a002364 <vPortEnterCritical>
1a000e78:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000e7c:	b25b      	sxtb	r3, r3
1a000e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e82:	d0d1      	beq.n	1a000e28 <xQueueReceive+0xa4>
1a000e84:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000e88:	b25b      	sxtb	r3, r3
1a000e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000e8e:	d0cf      	beq.n	1a000e30 <xQueueReceive+0xac>
1a000e90:	f001 fa8a 	bl	1a0023a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000e94:	a901      	add	r1, sp, #4
1a000e96:	a802      	add	r0, sp, #8
1a000e98:	f000 fe20 	bl	1a001adc <xTaskCheckForTimeOut>
1a000e9c:	2800      	cmp	r0, #0
1a000e9e:	d1d1      	bne.n	1a000e44 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000ea0:	4620      	mov	r0, r4
1a000ea2:	f7ff fcf7 	bl	1a000894 <prvIsQueueEmpty>
1a000ea6:	2800      	cmp	r0, #0
1a000ea8:	d0c6      	beq.n	1a000e38 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000eaa:	9901      	ldr	r1, [sp, #4]
1a000eac:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000eb0:	f000 fd8e 	bl	1a0019d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000eb4:	4620      	mov	r0, r4
1a000eb6:	f7ff fd47 	bl	1a000948 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000eba:	f000 fc59 	bl	1a001770 <xTaskResumeAll>
1a000ebe:	2800      	cmp	r0, #0
1a000ec0:	d1ca      	bne.n	1a000e58 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a000ec2:	4b05      	ldr	r3, [pc, #20]	; (1a000ed8 <xQueueReceive+0x154>)
1a000ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000ec8:	601a      	str	r2, [r3, #0]
1a000eca:	f3bf 8f4f 	dsb	sy
1a000ece:	f3bf 8f6f 	isb	sy
1a000ed2:	e7c1      	b.n	1a000e58 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a000ed4:	2000      	movs	r0, #0
1a000ed6:	e78d      	b.n	1a000df4 <xQueueReceive+0x70>
1a000ed8:	e000ed04 	.word	0xe000ed04

1a000edc <xQueueSemaphoreTake>:
{
1a000edc:	b570      	push	{r4, r5, r6, lr}
1a000ede:	b084      	sub	sp, #16
1a000ee0:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000ee2:	b940      	cbnz	r0, 1a000ef6 <xQueueSemaphoreTake+0x1a>
1a000ee4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ee8:	f383 8811 	msr	BASEPRI, r3
1a000eec:	f3bf 8f6f 	isb	sy
1a000ef0:	f3bf 8f4f 	dsb	sy
1a000ef4:	e7fe      	b.n	1a000ef4 <xQueueSemaphoreTake+0x18>
1a000ef6:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a000ef8:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000efa:	b143      	cbz	r3, 1a000f0e <xQueueSemaphoreTake+0x32>
1a000efc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f00:	f383 8811 	msr	BASEPRI, r3
1a000f04:	f3bf 8f6f 	isb	sy
1a000f08:	f3bf 8f4f 	dsb	sy
1a000f0c:	e7fe      	b.n	1a000f0c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000f0e:	f000 fe2b 	bl	1a001b68 <xTaskGetSchedulerState>
1a000f12:	b950      	cbnz	r0, 1a000f2a <xQueueSemaphoreTake+0x4e>
1a000f14:	9b01      	ldr	r3, [sp, #4]
1a000f16:	b15b      	cbz	r3, 1a000f30 <xQueueSemaphoreTake+0x54>
1a000f18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f1c:	f383 8811 	msr	BASEPRI, r3
1a000f20:	f3bf 8f6f 	isb	sy
1a000f24:	f3bf 8f4f 	dsb	sy
1a000f28:	e7fe      	b.n	1a000f28 <xQueueSemaphoreTake+0x4c>
1a000f2a:	2500      	movs	r5, #0
1a000f2c:	462e      	mov	r6, r5
1a000f2e:	e051      	b.n	1a000fd4 <xQueueSemaphoreTake+0xf8>
1a000f30:	2500      	movs	r5, #0
1a000f32:	462e      	mov	r6, r5
1a000f34:	e04e      	b.n	1a000fd4 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a000f36:	3b01      	subs	r3, #1
1a000f38:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000f3a:	6823      	ldr	r3, [r4, #0]
1a000f3c:	b913      	cbnz	r3, 1a000f44 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a000f3e:	f000 ff37 	bl	1a001db0 <pvTaskIncrementMutexHeldCount>
1a000f42:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000f44:	6923      	ldr	r3, [r4, #16]
1a000f46:	b163      	cbz	r3, 1a000f62 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000f48:	f104 0010 	add.w	r0, r4, #16
1a000f4c:	f000 fd74 	bl	1a001a38 <xTaskRemoveFromEventList>
1a000f50:	b138      	cbz	r0, 1a000f62 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a000f52:	4b48      	ldr	r3, [pc, #288]	; (1a001074 <xQueueSemaphoreTake+0x198>)
1a000f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f58:	601a      	str	r2, [r3, #0]
1a000f5a:	f3bf 8f4f 	dsb	sy
1a000f5e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000f62:	f001 fa21 	bl	1a0023a8 <vPortExitCritical>
				return pdPASS;
1a000f66:	2501      	movs	r5, #1
}
1a000f68:	4628      	mov	r0, r5
1a000f6a:	b004      	add	sp, #16
1a000f6c:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a000f6e:	b145      	cbz	r5, 1a000f82 <xQueueSemaphoreTake+0xa6>
1a000f70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f74:	f383 8811 	msr	BASEPRI, r3
1a000f78:	f3bf 8f6f 	isb	sy
1a000f7c:	f3bf 8f4f 	dsb	sy
1a000f80:	e7fe      	b.n	1a000f80 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a000f82:	f001 fa11 	bl	1a0023a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000f86:	e7ef      	b.n	1a000f68 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000f88:	a802      	add	r0, sp, #8
1a000f8a:	f000 fd9b 	bl	1a001ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000f8e:	2601      	movs	r6, #1
1a000f90:	e02a      	b.n	1a000fe8 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a000f92:	2300      	movs	r3, #0
1a000f94:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000f98:	e032      	b.n	1a001000 <xQueueSemaphoreTake+0x124>
1a000f9a:	2300      	movs	r3, #0
1a000f9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000fa0:	e034      	b.n	1a00100c <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a000fa2:	f001 f9df 	bl	1a002364 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a000fa6:	6860      	ldr	r0, [r4, #4]
1a000fa8:	f000 fdee 	bl	1a001b88 <xTaskPriorityInherit>
1a000fac:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a000fae:	f001 f9fb 	bl	1a0023a8 <vPortExitCritical>
1a000fb2:	e03b      	b.n	1a00102c <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a000fb4:	4620      	mov	r0, r4
1a000fb6:	f7ff fcc7 	bl	1a000948 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000fba:	f000 fbd9 	bl	1a001770 <xTaskResumeAll>
1a000fbe:	e009      	b.n	1a000fd4 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a000fc0:	4620      	mov	r0, r4
1a000fc2:	f7ff fcc1 	bl	1a000948 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000fc6:	f000 fbd3 	bl	1a001770 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000fca:	4620      	mov	r0, r4
1a000fcc:	f7ff fc62 	bl	1a000894 <prvIsQueueEmpty>
1a000fd0:	2800      	cmp	r0, #0
1a000fd2:	d140      	bne.n	1a001056 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a000fd4:	f001 f9c6 	bl	1a002364 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a000fd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a000fda:	2b00      	cmp	r3, #0
1a000fdc:	d1ab      	bne.n	1a000f36 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000fde:	9b01      	ldr	r3, [sp, #4]
1a000fe0:	2b00      	cmp	r3, #0
1a000fe2:	d0c4      	beq.n	1a000f6e <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a000fe4:	2e00      	cmp	r6, #0
1a000fe6:	d0cf      	beq.n	1a000f88 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a000fe8:	f001 f9de 	bl	1a0023a8 <vPortExitCritical>
		vTaskSuspendAll();
1a000fec:	f000 fb26 	bl	1a00163c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000ff0:	f001 f9b8 	bl	1a002364 <vPortEnterCritical>
1a000ff4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000ff8:	b25b      	sxtb	r3, r3
1a000ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000ffe:	d0c8      	beq.n	1a000f92 <xQueueSemaphoreTake+0xb6>
1a001000:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001004:	b25b      	sxtb	r3, r3
1a001006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00100a:	d0c6      	beq.n	1a000f9a <xQueueSemaphoreTake+0xbe>
1a00100c:	f001 f9cc 	bl	1a0023a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001010:	a901      	add	r1, sp, #4
1a001012:	a802      	add	r0, sp, #8
1a001014:	f000 fd62 	bl	1a001adc <xTaskCheckForTimeOut>
1a001018:	2800      	cmp	r0, #0
1a00101a:	d1d1      	bne.n	1a000fc0 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00101c:	4620      	mov	r0, r4
1a00101e:	f7ff fc39 	bl	1a000894 <prvIsQueueEmpty>
1a001022:	2800      	cmp	r0, #0
1a001024:	d0c6      	beq.n	1a000fb4 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001026:	6823      	ldr	r3, [r4, #0]
1a001028:	2b00      	cmp	r3, #0
1a00102a:	d0ba      	beq.n	1a000fa2 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a00102c:	9901      	ldr	r1, [sp, #4]
1a00102e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001032:	f000 fccd 	bl	1a0019d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001036:	4620      	mov	r0, r4
1a001038:	f7ff fc86 	bl	1a000948 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00103c:	f000 fb98 	bl	1a001770 <xTaskResumeAll>
1a001040:	2800      	cmp	r0, #0
1a001042:	d1c7      	bne.n	1a000fd4 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a001044:	4b0b      	ldr	r3, [pc, #44]	; (1a001074 <xQueueSemaphoreTake+0x198>)
1a001046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00104a:	601a      	str	r2, [r3, #0]
1a00104c:	f3bf 8f4f 	dsb	sy
1a001050:	f3bf 8f6f 	isb	sy
1a001054:	e7be      	b.n	1a000fd4 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a001056:	2d00      	cmp	r5, #0
1a001058:	d086      	beq.n	1a000f68 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a00105a:	f001 f983 	bl	1a002364 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a00105e:	4620      	mov	r0, r4
1a001060:	f7ff fc00 	bl	1a000864 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a001064:	4601      	mov	r1, r0
1a001066:	6860      	ldr	r0, [r4, #4]
1a001068:	f000 fe42 	bl	1a001cf0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a00106c:	f001 f99c 	bl	1a0023a8 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a001070:	2500      	movs	r5, #0
1a001072:	e779      	b.n	1a000f68 <xQueueSemaphoreTake+0x8c>
1a001074:	e000ed04 	.word	0xe000ed04

1a001078 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001078:	2300      	movs	r3, #0
1a00107a:	2b07      	cmp	r3, #7
1a00107c:	d80c      	bhi.n	1a001098 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a00107e:	4a07      	ldr	r2, [pc, #28]	; (1a00109c <vQueueAddToRegistry+0x24>)
1a001080:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001084:	b10a      	cbz	r2, 1a00108a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001086:	3301      	adds	r3, #1
1a001088:	e7f7      	b.n	1a00107a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a00108a:	4a04      	ldr	r2, [pc, #16]	; (1a00109c <vQueueAddToRegistry+0x24>)
1a00108c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001090:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001094:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a001096:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001098:	4770      	bx	lr
1a00109a:	bf00      	nop
1a00109c:	10002b44 	.word	0x10002b44

1a0010a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0010a0:	b570      	push	{r4, r5, r6, lr}
1a0010a2:	4604      	mov	r4, r0
1a0010a4:	460d      	mov	r5, r1
1a0010a6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0010a8:	f001 f95c 	bl	1a002364 <vPortEnterCritical>
1a0010ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0010b0:	b25b      	sxtb	r3, r3
1a0010b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010b6:	d00d      	beq.n	1a0010d4 <vQueueWaitForMessageRestricted+0x34>
1a0010b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0010bc:	b25b      	sxtb	r3, r3
1a0010be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010c2:	d00b      	beq.n	1a0010dc <vQueueWaitForMessageRestricted+0x3c>
1a0010c4:	f001 f970 	bl	1a0023a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a0010c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0010ca:	b15b      	cbz	r3, 1a0010e4 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a0010cc:	4620      	mov	r0, r4
1a0010ce:	f7ff fc3b 	bl	1a000948 <prvUnlockQueue>
	}
1a0010d2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a0010d4:	2300      	movs	r3, #0
1a0010d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0010da:	e7ed      	b.n	1a0010b8 <vQueueWaitForMessageRestricted+0x18>
1a0010dc:	2300      	movs	r3, #0
1a0010de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0010e2:	e7ef      	b.n	1a0010c4 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a0010e4:	4632      	mov	r2, r6
1a0010e6:	4629      	mov	r1, r5
1a0010e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0010ec:	f000 fc88 	bl	1a001a00 <vTaskPlaceOnEventListRestricted>
1a0010f0:	e7ec      	b.n	1a0010cc <vQueueWaitForMessageRestricted+0x2c>

1a0010f2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0010f2:	f100 0308 	add.w	r3, r0, #8
1a0010f6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0010f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0010fc:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0010fe:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001100:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001102:	2300      	movs	r3, #0
1a001104:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001106:	4770      	bx	lr

1a001108 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001108:	2300      	movs	r3, #0
1a00110a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a00110c:	4770      	bx	lr

1a00110e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a00110e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001110:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001112:	689a      	ldr	r2, [r3, #8]
1a001114:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001116:	689a      	ldr	r2, [r3, #8]
1a001118:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a00111a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00111c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a00111e:	6803      	ldr	r3, [r0, #0]
1a001120:	3301      	adds	r3, #1
1a001122:	6003      	str	r3, [r0, #0]
}
1a001124:	4770      	bx	lr

1a001126 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001126:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001128:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a00112a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a00112e:	d002      	beq.n	1a001136 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001130:	f100 0208 	add.w	r2, r0, #8
1a001134:	e002      	b.n	1a00113c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001136:	6902      	ldr	r2, [r0, #16]
1a001138:	e004      	b.n	1a001144 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00113a:	461a      	mov	r2, r3
1a00113c:	6853      	ldr	r3, [r2, #4]
1a00113e:	681c      	ldr	r4, [r3, #0]
1a001140:	42ac      	cmp	r4, r5
1a001142:	d9fa      	bls.n	1a00113a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001144:	6853      	ldr	r3, [r2, #4]
1a001146:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001148:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a00114a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a00114c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00114e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001150:	6803      	ldr	r3, [r0, #0]
1a001152:	3301      	adds	r3, #1
1a001154:	6003      	str	r3, [r0, #0]
}
1a001156:	bc30      	pop	{r4, r5}
1a001158:	4770      	bx	lr

1a00115a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a00115a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a00115c:	6842      	ldr	r2, [r0, #4]
1a00115e:	6881      	ldr	r1, [r0, #8]
1a001160:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001162:	6882      	ldr	r2, [r0, #8]
1a001164:	6841      	ldr	r1, [r0, #4]
1a001166:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001168:	685a      	ldr	r2, [r3, #4]
1a00116a:	4282      	cmp	r2, r0
1a00116c:	d006      	beq.n	1a00117c <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a00116e:	2200      	movs	r2, #0
1a001170:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001172:	681a      	ldr	r2, [r3, #0]
1a001174:	3a01      	subs	r2, #1
1a001176:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001178:	6818      	ldr	r0, [r3, #0]
}
1a00117a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a00117c:	6882      	ldr	r2, [r0, #8]
1a00117e:	605a      	str	r2, [r3, #4]
1a001180:	e7f5      	b.n	1a00116e <uxListRemove+0x14>
1a001182:	Address 0x000000001a001182 is out of bounds.


1a001184 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001184:	4b03      	ldr	r3, [pc, #12]	; (1a001194 <vApplicationGetIdleTaskMemory+0x10>)
1a001186:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001188:	4b03      	ldr	r3, [pc, #12]	; (1a001198 <vApplicationGetIdleTaskMemory+0x14>)
1a00118a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a00118c:	235a      	movs	r3, #90	; 0x5a
1a00118e:	6013      	str	r3, [r2, #0]
}
1a001190:	4770      	bx	lr
1a001192:	bf00      	nop
1a001194:	100027d0 	.word	0x100027d0
1a001198:	100020c8 	.word	0x100020c8

1a00119c <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a00119c:	4b03      	ldr	r3, [pc, #12]	; (1a0011ac <vApplicationGetTimerTaskMemory+0x10>)
1a00119e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0011a0:	4b03      	ldr	r3, [pc, #12]	; (1a0011b0 <vApplicationGetTimerTaskMemory+0x14>)
1a0011a2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0011a4:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0011a8:	6013      	str	r3, [r2, #0]
1a0011aa:	4770      	bx	lr
1a0011ac:	10002830 	.word	0x10002830
1a0011b0:	10002230 	.word	0x10002230

1a0011b4 <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a0011b4:	e7fe      	b.n	1a0011b4 <vApplicationStackOverflowHook>

1a0011b6 <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a0011b6:	e7fe      	b.n	1a0011b6 <vApplicationMallocFailedHook>

1a0011b8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0011b8:	4b08      	ldr	r3, [pc, #32]	; (1a0011dc <prvResetNextTaskUnblockTime+0x24>)
1a0011ba:	681b      	ldr	r3, [r3, #0]
1a0011bc:	681b      	ldr	r3, [r3, #0]
1a0011be:	b13b      	cbz	r3, 1a0011d0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0011c0:	4b06      	ldr	r3, [pc, #24]	; (1a0011dc <prvResetNextTaskUnblockTime+0x24>)
1a0011c2:	681b      	ldr	r3, [r3, #0]
1a0011c4:	68db      	ldr	r3, [r3, #12]
1a0011c6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0011c8:	685a      	ldr	r2, [r3, #4]
1a0011ca:	4b05      	ldr	r3, [pc, #20]	; (1a0011e0 <prvResetNextTaskUnblockTime+0x28>)
1a0011cc:	601a      	str	r2, [r3, #0]
	}
}
1a0011ce:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a0011d0:	4b03      	ldr	r3, [pc, #12]	; (1a0011e0 <prvResetNextTaskUnblockTime+0x28>)
1a0011d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0011d6:	601a      	str	r2, [r3, #0]
1a0011d8:	4770      	bx	lr
1a0011da:	bf00      	nop
1a0011dc:	10002894 	.word	0x10002894
1a0011e0:	10002968 	.word	0x10002968

1a0011e4 <prvInitialiseNewTask>:
{
1a0011e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0011e8:	4681      	mov	r9, r0
1a0011ea:	460d      	mov	r5, r1
1a0011ec:	4617      	mov	r7, r2
1a0011ee:	469a      	mov	sl, r3
1a0011f0:	9e08      	ldr	r6, [sp, #32]
1a0011f2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0011f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a0011f8:	0092      	lsls	r2, r2, #2
1a0011fa:	21a5      	movs	r1, #165	; 0xa5
1a0011fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a0011fe:	f002 fd02 	bl	1a003c06 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001202:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001204:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001208:	3a01      	subs	r2, #1
1a00120a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a00120e:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001212:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001214:	2300      	movs	r3, #0
1a001216:	2b0f      	cmp	r3, #15
1a001218:	d807      	bhi.n	1a00122a <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a00121a:	5ce9      	ldrb	r1, [r5, r3]
1a00121c:	18e2      	adds	r2, r4, r3
1a00121e:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001222:	5cea      	ldrb	r2, [r5, r3]
1a001224:	b10a      	cbz	r2, 1a00122a <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001226:	3301      	adds	r3, #1
1a001228:	e7f5      	b.n	1a001216 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a00122a:	2300      	movs	r3, #0
1a00122c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001230:	2e06      	cmp	r6, #6
1a001232:	d900      	bls.n	1a001236 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001234:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001236:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001238:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a00123a:	2500      	movs	r5, #0
1a00123c:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a00123e:	1d20      	adds	r0, r4, #4
1a001240:	f7ff ff62 	bl	1a001108 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001244:	f104 0018 	add.w	r0, r4, #24
1a001248:	f7ff ff5e 	bl	1a001108 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a00124c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00124e:	f1c6 0607 	rsb	r6, r6, #7
1a001252:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001254:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001256:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001258:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a00125c:	4652      	mov	r2, sl
1a00125e:	4649      	mov	r1, r9
1a001260:	4638      	mov	r0, r7
1a001262:	f001 f851 	bl	1a002308 <pxPortInitialiseStack>
1a001266:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001268:	f1b8 0f00 	cmp.w	r8, #0
1a00126c:	d001      	beq.n	1a001272 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00126e:	f8c8 4000 	str.w	r4, [r8]
}
1a001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001276:	Address 0x000000001a001276 is out of bounds.


1a001278 <prvInitialiseTaskLists>:
{
1a001278:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00127a:	2400      	movs	r4, #0
1a00127c:	e007      	b.n	1a00128e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a00127e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001282:	0093      	lsls	r3, r2, #2
1a001284:	480e      	ldr	r0, [pc, #56]	; (1a0012c0 <prvInitialiseTaskLists+0x48>)
1a001286:	4418      	add	r0, r3
1a001288:	f7ff ff33 	bl	1a0010f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00128c:	3401      	adds	r4, #1
1a00128e:	2c06      	cmp	r4, #6
1a001290:	d9f5      	bls.n	1a00127e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a001292:	4d0c      	ldr	r5, [pc, #48]	; (1a0012c4 <prvInitialiseTaskLists+0x4c>)
1a001294:	4628      	mov	r0, r5
1a001296:	f7ff ff2c 	bl	1a0010f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a00129a:	4c0b      	ldr	r4, [pc, #44]	; (1a0012c8 <prvInitialiseTaskLists+0x50>)
1a00129c:	4620      	mov	r0, r4
1a00129e:	f7ff ff28 	bl	1a0010f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0012a2:	480a      	ldr	r0, [pc, #40]	; (1a0012cc <prvInitialiseTaskLists+0x54>)
1a0012a4:	f7ff ff25 	bl	1a0010f2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0012a8:	4809      	ldr	r0, [pc, #36]	; (1a0012d0 <prvInitialiseTaskLists+0x58>)
1a0012aa:	f7ff ff22 	bl	1a0010f2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a0012ae:	4809      	ldr	r0, [pc, #36]	; (1a0012d4 <prvInitialiseTaskLists+0x5c>)
1a0012b0:	f7ff ff1f 	bl	1a0010f2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a0012b4:	4b08      	ldr	r3, [pc, #32]	; (1a0012d8 <prvInitialiseTaskLists+0x60>)
1a0012b6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0012b8:	4b08      	ldr	r3, [pc, #32]	; (1a0012dc <prvInitialiseTaskLists+0x64>)
1a0012ba:	601c      	str	r4, [r3, #0]
}
1a0012bc:	bd38      	pop	{r3, r4, r5, pc}
1a0012be:	bf00      	nop
1a0012c0:	1000289c 	.word	0x1000289c
1a0012c4:	10002940 	.word	0x10002940
1a0012c8:	10002954 	.word	0x10002954
1a0012cc:	10002970 	.word	0x10002970
1a0012d0:	1000299c 	.word	0x1000299c
1a0012d4:	10002988 	.word	0x10002988
1a0012d8:	10002894 	.word	0x10002894
1a0012dc:	10002898 	.word	0x10002898

1a0012e0 <prvAddNewTaskToReadyList>:
{
1a0012e0:	b510      	push	{r4, lr}
1a0012e2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0012e4:	f001 f83e 	bl	1a002364 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a0012e8:	4a21      	ldr	r2, [pc, #132]	; (1a001370 <prvAddNewTaskToReadyList+0x90>)
1a0012ea:	6813      	ldr	r3, [r2, #0]
1a0012ec:	3301      	adds	r3, #1
1a0012ee:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0012f0:	4b20      	ldr	r3, [pc, #128]	; (1a001374 <prvAddNewTaskToReadyList+0x94>)
1a0012f2:	681b      	ldr	r3, [r3, #0]
1a0012f4:	b15b      	cbz	r3, 1a00130e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a0012f6:	4b20      	ldr	r3, [pc, #128]	; (1a001378 <prvAddNewTaskToReadyList+0x98>)
1a0012f8:	681b      	ldr	r3, [r3, #0]
1a0012fa:	b96b      	cbnz	r3, 1a001318 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0012fc:	4b1d      	ldr	r3, [pc, #116]	; (1a001374 <prvAddNewTaskToReadyList+0x94>)
1a0012fe:	681b      	ldr	r3, [r3, #0]
1a001300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001302:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001304:	429a      	cmp	r2, r3
1a001306:	d807      	bhi.n	1a001318 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001308:	4b1a      	ldr	r3, [pc, #104]	; (1a001374 <prvAddNewTaskToReadyList+0x94>)
1a00130a:	601c      	str	r4, [r3, #0]
1a00130c:	e004      	b.n	1a001318 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a00130e:	4b19      	ldr	r3, [pc, #100]	; (1a001374 <prvAddNewTaskToReadyList+0x94>)
1a001310:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001312:	6813      	ldr	r3, [r2, #0]
1a001314:	2b01      	cmp	r3, #1
1a001316:	d027      	beq.n	1a001368 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001318:	4a18      	ldr	r2, [pc, #96]	; (1a00137c <prvAddNewTaskToReadyList+0x9c>)
1a00131a:	6813      	ldr	r3, [r2, #0]
1a00131c:	3301      	adds	r3, #1
1a00131e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001320:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001322:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001324:	2201      	movs	r2, #1
1a001326:	409a      	lsls	r2, r3
1a001328:	4915      	ldr	r1, [pc, #84]	; (1a001380 <prvAddNewTaskToReadyList+0xa0>)
1a00132a:	6808      	ldr	r0, [r1, #0]
1a00132c:	4302      	orrs	r2, r0
1a00132e:	600a      	str	r2, [r1, #0]
1a001330:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001334:	009a      	lsls	r2, r3, #2
1a001336:	1d21      	adds	r1, r4, #4
1a001338:	4812      	ldr	r0, [pc, #72]	; (1a001384 <prvAddNewTaskToReadyList+0xa4>)
1a00133a:	4410      	add	r0, r2
1a00133c:	f7ff fee7 	bl	1a00110e <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001340:	f001 f832 	bl	1a0023a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001344:	4b0c      	ldr	r3, [pc, #48]	; (1a001378 <prvAddNewTaskToReadyList+0x98>)
1a001346:	681b      	ldr	r3, [r3, #0]
1a001348:	b16b      	cbz	r3, 1a001366 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a00134a:	4b0a      	ldr	r3, [pc, #40]	; (1a001374 <prvAddNewTaskToReadyList+0x94>)
1a00134c:	681b      	ldr	r3, [r3, #0]
1a00134e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001350:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001352:	429a      	cmp	r2, r3
1a001354:	d207      	bcs.n	1a001366 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001356:	4b0c      	ldr	r3, [pc, #48]	; (1a001388 <prvAddNewTaskToReadyList+0xa8>)
1a001358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00135c:	601a      	str	r2, [r3, #0]
1a00135e:	f3bf 8f4f 	dsb	sy
1a001362:	f3bf 8f6f 	isb	sy
}
1a001366:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001368:	f7ff ff86 	bl	1a001278 <prvInitialiseTaskLists>
1a00136c:	e7d4      	b.n	1a001318 <prvAddNewTaskToReadyList+0x38>
1a00136e:	bf00      	nop
1a001370:	10002928 	.word	0x10002928
1a001374:	10002890 	.word	0x10002890
1a001378:	10002984 	.word	0x10002984
1a00137c:	10002938 	.word	0x10002938
1a001380:	1000293c 	.word	0x1000293c
1a001384:	1000289c 	.word	0x1000289c
1a001388:	e000ed04 	.word	0xe000ed04

1a00138c <prvDeleteTCB>:
	{
1a00138c:	b510      	push	{r4, lr}
1a00138e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001390:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001394:	b933      	cbnz	r3, 1a0013a4 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001396:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001398:	f7ff fa2c 	bl	1a0007f4 <vPortFree>
				vPortFree( pxTCB );
1a00139c:	4620      	mov	r0, r4
1a00139e:	f7ff fa29 	bl	1a0007f4 <vPortFree>
	}
1a0013a2:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0013a4:	2b01      	cmp	r3, #1
1a0013a6:	d00a      	beq.n	1a0013be <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a0013a8:	2b02      	cmp	r3, #2
1a0013aa:	d0fa      	beq.n	1a0013a2 <prvDeleteTCB+0x16>
1a0013ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013b0:	f383 8811 	msr	BASEPRI, r3
1a0013b4:	f3bf 8f6f 	isb	sy
1a0013b8:	f3bf 8f4f 	dsb	sy
1a0013bc:	e7fe      	b.n	1a0013bc <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a0013be:	f7ff fa19 	bl	1a0007f4 <vPortFree>
1a0013c2:	e7ee      	b.n	1a0013a2 <prvDeleteTCB+0x16>

1a0013c4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0013c4:	4b0f      	ldr	r3, [pc, #60]	; (1a001404 <prvCheckTasksWaitingTermination+0x40>)
1a0013c6:	681b      	ldr	r3, [r3, #0]
1a0013c8:	b1d3      	cbz	r3, 1a001400 <prvCheckTasksWaitingTermination+0x3c>
{
1a0013ca:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0013cc:	f000 ffca 	bl	1a002364 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0013d0:	4b0d      	ldr	r3, [pc, #52]	; (1a001408 <prvCheckTasksWaitingTermination+0x44>)
1a0013d2:	68db      	ldr	r3, [r3, #12]
1a0013d4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0013d6:	1d20      	adds	r0, r4, #4
1a0013d8:	f7ff febf 	bl	1a00115a <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0013dc:	4a0b      	ldr	r2, [pc, #44]	; (1a00140c <prvCheckTasksWaitingTermination+0x48>)
1a0013de:	6813      	ldr	r3, [r2, #0]
1a0013e0:	3b01      	subs	r3, #1
1a0013e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0013e4:	4a07      	ldr	r2, [pc, #28]	; (1a001404 <prvCheckTasksWaitingTermination+0x40>)
1a0013e6:	6813      	ldr	r3, [r2, #0]
1a0013e8:	3b01      	subs	r3, #1
1a0013ea:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0013ec:	f000 ffdc 	bl	1a0023a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0013f0:	4620      	mov	r0, r4
1a0013f2:	f7ff ffcb 	bl	1a00138c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0013f6:	4b03      	ldr	r3, [pc, #12]	; (1a001404 <prvCheckTasksWaitingTermination+0x40>)
1a0013f8:	681b      	ldr	r3, [r3, #0]
1a0013fa:	2b00      	cmp	r3, #0
1a0013fc:	d1e6      	bne.n	1a0013cc <prvCheckTasksWaitingTermination+0x8>
}
1a0013fe:	bd10      	pop	{r4, pc}
1a001400:	4770      	bx	lr
1a001402:	bf00      	nop
1a001404:	1000292c 	.word	0x1000292c
1a001408:	1000299c 	.word	0x1000299c
1a00140c:	10002928 	.word	0x10002928

1a001410 <prvIdleTask>:
{
1a001410:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001412:	f7ff ffd7 	bl	1a0013c4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001416:	4b06      	ldr	r3, [pc, #24]	; (1a001430 <prvIdleTask+0x20>)
1a001418:	681b      	ldr	r3, [r3, #0]
1a00141a:	2b01      	cmp	r3, #1
1a00141c:	d9f9      	bls.n	1a001412 <prvIdleTask+0x2>
				taskYIELD();
1a00141e:	4b05      	ldr	r3, [pc, #20]	; (1a001434 <prvIdleTask+0x24>)
1a001420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001424:	601a      	str	r2, [r3, #0]
1a001426:	f3bf 8f4f 	dsb	sy
1a00142a:	f3bf 8f6f 	isb	sy
1a00142e:	e7f0      	b.n	1a001412 <prvIdleTask+0x2>
1a001430:	1000289c 	.word	0x1000289c
1a001434:	e000ed04 	.word	0xe000ed04

1a001438 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001438:	b570      	push	{r4, r5, r6, lr}
1a00143a:	4604      	mov	r4, r0
1a00143c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00143e:	4b1d      	ldr	r3, [pc, #116]	; (1a0014b4 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001440:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001442:	4b1d      	ldr	r3, [pc, #116]	; (1a0014b8 <prvAddCurrentTaskToDelayedList+0x80>)
1a001444:	6818      	ldr	r0, [r3, #0]
1a001446:	3004      	adds	r0, #4
1a001448:	f7ff fe87 	bl	1a00115a <uxListRemove>
1a00144c:	b950      	cbnz	r0, 1a001464 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00144e:	4b1a      	ldr	r3, [pc, #104]	; (1a0014b8 <prvAddCurrentTaskToDelayedList+0x80>)
1a001450:	681b      	ldr	r3, [r3, #0]
1a001452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001454:	2301      	movs	r3, #1
1a001456:	fa03 f202 	lsl.w	r2, r3, r2
1a00145a:	4918      	ldr	r1, [pc, #96]	; (1a0014bc <prvAddCurrentTaskToDelayedList+0x84>)
1a00145c:	680b      	ldr	r3, [r1, #0]
1a00145e:	ea23 0302 	bic.w	r3, r3, r2
1a001462:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001464:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001468:	d013      	beq.n	1a001492 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a00146a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a00146c:	4b12      	ldr	r3, [pc, #72]	; (1a0014b8 <prvAddCurrentTaskToDelayedList+0x80>)
1a00146e:	681b      	ldr	r3, [r3, #0]
1a001470:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001472:	42a5      	cmp	r5, r4
1a001474:	d816      	bhi.n	1a0014a4 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001476:	4b12      	ldr	r3, [pc, #72]	; (1a0014c0 <prvAddCurrentTaskToDelayedList+0x88>)
1a001478:	6818      	ldr	r0, [r3, #0]
1a00147a:	4b0f      	ldr	r3, [pc, #60]	; (1a0014b8 <prvAddCurrentTaskToDelayedList+0x80>)
1a00147c:	6819      	ldr	r1, [r3, #0]
1a00147e:	3104      	adds	r1, #4
1a001480:	f7ff fe51 	bl	1a001126 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001484:	4b0f      	ldr	r3, [pc, #60]	; (1a0014c4 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001486:	681b      	ldr	r3, [r3, #0]
1a001488:	42a3      	cmp	r3, r4
1a00148a:	d912      	bls.n	1a0014b2 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a00148c:	4b0d      	ldr	r3, [pc, #52]	; (1a0014c4 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00148e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001490:	e00f      	b.n	1a0014b2 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001492:	2e00      	cmp	r6, #0
1a001494:	d0e9      	beq.n	1a00146a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001496:	4b08      	ldr	r3, [pc, #32]	; (1a0014b8 <prvAddCurrentTaskToDelayedList+0x80>)
1a001498:	6819      	ldr	r1, [r3, #0]
1a00149a:	3104      	adds	r1, #4
1a00149c:	480a      	ldr	r0, [pc, #40]	; (1a0014c8 <prvAddCurrentTaskToDelayedList+0x90>)
1a00149e:	f7ff fe36 	bl	1a00110e <vListInsertEnd>
1a0014a2:	e006      	b.n	1a0014b2 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0014a4:	4b09      	ldr	r3, [pc, #36]	; (1a0014cc <prvAddCurrentTaskToDelayedList+0x94>)
1a0014a6:	6818      	ldr	r0, [r3, #0]
1a0014a8:	4b03      	ldr	r3, [pc, #12]	; (1a0014b8 <prvAddCurrentTaskToDelayedList+0x80>)
1a0014aa:	6819      	ldr	r1, [r3, #0]
1a0014ac:	3104      	adds	r1, #4
1a0014ae:	f7ff fe3a 	bl	1a001126 <vListInsert>
}
1a0014b2:	bd70      	pop	{r4, r5, r6, pc}
1a0014b4:	100029b0 	.word	0x100029b0
1a0014b8:	10002890 	.word	0x10002890
1a0014bc:	1000293c 	.word	0x1000293c
1a0014c0:	10002894 	.word	0x10002894
1a0014c4:	10002968 	.word	0x10002968
1a0014c8:	10002988 	.word	0x10002988
1a0014cc:	10002898 	.word	0x10002898

1a0014d0 <xTaskCreateStatic>:
	{
1a0014d0:	b570      	push	{r4, r5, r6, lr}
1a0014d2:	b086      	sub	sp, #24
1a0014d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0014d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a0014d8:	b945      	cbnz	r5, 1a0014ec <xTaskCreateStatic+0x1c>
1a0014da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014de:	f383 8811 	msr	BASEPRI, r3
1a0014e2:	f3bf 8f6f 	isb	sy
1a0014e6:	f3bf 8f4f 	dsb	sy
1a0014ea:	e7fe      	b.n	1a0014ea <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a0014ec:	b944      	cbnz	r4, 1a001500 <xTaskCreateStatic+0x30>
1a0014ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014f2:	f383 8811 	msr	BASEPRI, r3
1a0014f6:	f3bf 8f6f 	isb	sy
1a0014fa:	f3bf 8f4f 	dsb	sy
1a0014fe:	e7fe      	b.n	1a0014fe <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001500:	2660      	movs	r6, #96	; 0x60
1a001502:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001504:	9e04      	ldr	r6, [sp, #16]
1a001506:	2e60      	cmp	r6, #96	; 0x60
1a001508:	d008      	beq.n	1a00151c <xTaskCreateStatic+0x4c>
1a00150a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00150e:	f383 8811 	msr	BASEPRI, r3
1a001512:	f3bf 8f6f 	isb	sy
1a001516:	f3bf 8f4f 	dsb	sy
1a00151a:	e7fe      	b.n	1a00151a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a00151c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a00151e:	2502      	movs	r5, #2
1a001520:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001524:	2500      	movs	r5, #0
1a001526:	9503      	str	r5, [sp, #12]
1a001528:	9402      	str	r4, [sp, #8]
1a00152a:	ad05      	add	r5, sp, #20
1a00152c:	9501      	str	r5, [sp, #4]
1a00152e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001530:	9500      	str	r5, [sp, #0]
1a001532:	f7ff fe57 	bl	1a0011e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001536:	4620      	mov	r0, r4
1a001538:	f7ff fed2 	bl	1a0012e0 <prvAddNewTaskToReadyList>
	}
1a00153c:	9805      	ldr	r0, [sp, #20]
1a00153e:	b006      	add	sp, #24
1a001540:	bd70      	pop	{r4, r5, r6, pc}

1a001542 <xTaskCreate>:
	{
1a001542:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001546:	b085      	sub	sp, #20
1a001548:	4607      	mov	r7, r0
1a00154a:	4688      	mov	r8, r1
1a00154c:	4615      	mov	r5, r2
1a00154e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001550:	0090      	lsls	r0, r2, #2
1a001552:	f7ff f8c1 	bl	1a0006d8 <pvPortMalloc>
			if( pxStack != NULL )
1a001556:	b308      	cbz	r0, 1a00159c <xTaskCreate+0x5a>
1a001558:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a00155a:	2060      	movs	r0, #96	; 0x60
1a00155c:	f7ff f8bc 	bl	1a0006d8 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001560:	4604      	mov	r4, r0
1a001562:	b1b8      	cbz	r0, 1a001594 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001564:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001566:	b1e4      	cbz	r4, 1a0015a2 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001568:	2300      	movs	r3, #0
1a00156a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00156e:	9303      	str	r3, [sp, #12]
1a001570:	9402      	str	r4, [sp, #8]
1a001572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001574:	9301      	str	r3, [sp, #4]
1a001576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001578:	9300      	str	r3, [sp, #0]
1a00157a:	464b      	mov	r3, r9
1a00157c:	462a      	mov	r2, r5
1a00157e:	4641      	mov	r1, r8
1a001580:	4638      	mov	r0, r7
1a001582:	f7ff fe2f 	bl	1a0011e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001586:	4620      	mov	r0, r4
1a001588:	f7ff feaa 	bl	1a0012e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a00158c:	2001      	movs	r0, #1
	}
1a00158e:	b005      	add	sp, #20
1a001590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001594:	4630      	mov	r0, r6
1a001596:	f7ff f92d 	bl	1a0007f4 <vPortFree>
1a00159a:	e7e4      	b.n	1a001566 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a00159c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0015a0:	e7f5      	b.n	1a00158e <xTaskCreate+0x4c>
1a0015a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0015a6:	e7f2      	b.n	1a00158e <xTaskCreate+0x4c>

1a0015a8 <vTaskStartScheduler>:
{
1a0015a8:	b510      	push	{r4, lr}
1a0015aa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0015ac:	2400      	movs	r4, #0
1a0015ae:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0015b0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0015b2:	aa07      	add	r2, sp, #28
1a0015b4:	a906      	add	r1, sp, #24
1a0015b6:	a805      	add	r0, sp, #20
1a0015b8:	f7ff fde4 	bl	1a001184 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a0015bc:	9b05      	ldr	r3, [sp, #20]
1a0015be:	9302      	str	r3, [sp, #8]
1a0015c0:	9b06      	ldr	r3, [sp, #24]
1a0015c2:	9301      	str	r3, [sp, #4]
1a0015c4:	9400      	str	r4, [sp, #0]
1a0015c6:	4623      	mov	r3, r4
1a0015c8:	9a07      	ldr	r2, [sp, #28]
1a0015ca:	4917      	ldr	r1, [pc, #92]	; (1a001628 <vTaskStartScheduler+0x80>)
1a0015cc:	4817      	ldr	r0, [pc, #92]	; (1a00162c <vTaskStartScheduler+0x84>)
1a0015ce:	f7ff ff7f 	bl	1a0014d0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0015d2:	b140      	cbz	r0, 1a0015e6 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0015d4:	f000 fc86 	bl	1a001ee4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a0015d8:	2801      	cmp	r0, #1
1a0015da:	d006      	beq.n	1a0015ea <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0015dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0015e0:	d018      	beq.n	1a001614 <vTaskStartScheduler+0x6c>
}
1a0015e2:	b008      	add	sp, #32
1a0015e4:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a0015e6:	2000      	movs	r0, #0
1a0015e8:	e7f6      	b.n	1a0015d8 <vTaskStartScheduler+0x30>
1a0015ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015ee:	f383 8811 	msr	BASEPRI, r3
1a0015f2:	f3bf 8f6f 	isb	sy
1a0015f6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0015fa:	4b0d      	ldr	r3, [pc, #52]	; (1a001630 <vTaskStartScheduler+0x88>)
1a0015fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001600:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001602:	4b0c      	ldr	r3, [pc, #48]	; (1a001634 <vTaskStartScheduler+0x8c>)
1a001604:	2201      	movs	r2, #1
1a001606:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001608:	4b0b      	ldr	r3, [pc, #44]	; (1a001638 <vTaskStartScheduler+0x90>)
1a00160a:	2200      	movs	r2, #0
1a00160c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a00160e:	f000 ff4b 	bl	1a0024a8 <xPortStartScheduler>
1a001612:	e7e6      	b.n	1a0015e2 <vTaskStartScheduler+0x3a>
1a001614:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001618:	f383 8811 	msr	BASEPRI, r3
1a00161c:	f3bf 8f6f 	isb	sy
1a001620:	f3bf 8f4f 	dsb	sy
1a001624:	e7fe      	b.n	1a001624 <vTaskStartScheduler+0x7c>
1a001626:	bf00      	nop
1a001628:	1a0045c8 	.word	0x1a0045c8
1a00162c:	1a001411 	.word	0x1a001411
1a001630:	10002968 	.word	0x10002968
1a001634:	10002984 	.word	0x10002984
1a001638:	100029b0 	.word	0x100029b0

1a00163c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a00163c:	4a02      	ldr	r2, [pc, #8]	; (1a001648 <vTaskSuspendAll+0xc>)
1a00163e:	6813      	ldr	r3, [r2, #0]
1a001640:	3301      	adds	r3, #1
1a001642:	6013      	str	r3, [r2, #0]
}
1a001644:	4770      	bx	lr
1a001646:	bf00      	nop
1a001648:	10002934 	.word	0x10002934

1a00164c <xTaskGetTickCount>:
		xTicks = xTickCount;
1a00164c:	4b01      	ldr	r3, [pc, #4]	; (1a001654 <xTaskGetTickCount+0x8>)
1a00164e:	6818      	ldr	r0, [r3, #0]
}
1a001650:	4770      	bx	lr
1a001652:	bf00      	nop
1a001654:	100029b0 	.word	0x100029b0

1a001658 <xTaskIncrementTick>:
{
1a001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00165a:	4b3a      	ldr	r3, [pc, #232]	; (1a001744 <xTaskIncrementTick+0xec>)
1a00165c:	681b      	ldr	r3, [r3, #0]
1a00165e:	2b00      	cmp	r3, #0
1a001660:	d164      	bne.n	1a00172c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001662:	4b39      	ldr	r3, [pc, #228]	; (1a001748 <xTaskIncrementTick+0xf0>)
1a001664:	681d      	ldr	r5, [r3, #0]
1a001666:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001668:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a00166a:	b9c5      	cbnz	r5, 1a00169e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a00166c:	4b37      	ldr	r3, [pc, #220]	; (1a00174c <xTaskIncrementTick+0xf4>)
1a00166e:	681b      	ldr	r3, [r3, #0]
1a001670:	681b      	ldr	r3, [r3, #0]
1a001672:	b143      	cbz	r3, 1a001686 <xTaskIncrementTick+0x2e>
1a001674:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001678:	f383 8811 	msr	BASEPRI, r3
1a00167c:	f3bf 8f6f 	isb	sy
1a001680:	f3bf 8f4f 	dsb	sy
1a001684:	e7fe      	b.n	1a001684 <xTaskIncrementTick+0x2c>
1a001686:	4a31      	ldr	r2, [pc, #196]	; (1a00174c <xTaskIncrementTick+0xf4>)
1a001688:	6811      	ldr	r1, [r2, #0]
1a00168a:	4b31      	ldr	r3, [pc, #196]	; (1a001750 <xTaskIncrementTick+0xf8>)
1a00168c:	6818      	ldr	r0, [r3, #0]
1a00168e:	6010      	str	r0, [r2, #0]
1a001690:	6019      	str	r1, [r3, #0]
1a001692:	4a30      	ldr	r2, [pc, #192]	; (1a001754 <xTaskIncrementTick+0xfc>)
1a001694:	6813      	ldr	r3, [r2, #0]
1a001696:	3301      	adds	r3, #1
1a001698:	6013      	str	r3, [r2, #0]
1a00169a:	f7ff fd8d 	bl	1a0011b8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00169e:	4b2e      	ldr	r3, [pc, #184]	; (1a001758 <xTaskIncrementTick+0x100>)
1a0016a0:	681b      	ldr	r3, [r3, #0]
1a0016a2:	42ab      	cmp	r3, r5
1a0016a4:	d938      	bls.n	1a001718 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0016a6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0016a8:	4b2c      	ldr	r3, [pc, #176]	; (1a00175c <xTaskIncrementTick+0x104>)
1a0016aa:	681b      	ldr	r3, [r3, #0]
1a0016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0016ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0016b2:	009a      	lsls	r2, r3, #2
1a0016b4:	4b2a      	ldr	r3, [pc, #168]	; (1a001760 <xTaskIncrementTick+0x108>)
1a0016b6:	589b      	ldr	r3, [r3, r2]
1a0016b8:	2b01      	cmp	r3, #1
1a0016ba:	d93c      	bls.n	1a001736 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a0016bc:	2401      	movs	r4, #1
1a0016be:	e03a      	b.n	1a001736 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a0016c0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0016c2:	4b22      	ldr	r3, [pc, #136]	; (1a00174c <xTaskIncrementTick+0xf4>)
1a0016c4:	681b      	ldr	r3, [r3, #0]
1a0016c6:	681b      	ldr	r3, [r3, #0]
1a0016c8:	b343      	cbz	r3, 1a00171c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0016ca:	4b20      	ldr	r3, [pc, #128]	; (1a00174c <xTaskIncrementTick+0xf4>)
1a0016cc:	681b      	ldr	r3, [r3, #0]
1a0016ce:	68db      	ldr	r3, [r3, #12]
1a0016d0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0016d2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0016d4:	429d      	cmp	r5, r3
1a0016d6:	d326      	bcc.n	1a001726 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0016d8:	1d37      	adds	r7, r6, #4
1a0016da:	4638      	mov	r0, r7
1a0016dc:	f7ff fd3d 	bl	1a00115a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0016e0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0016e2:	b11b      	cbz	r3, 1a0016ec <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0016e4:	f106 0018 	add.w	r0, r6, #24
1a0016e8:	f7ff fd37 	bl	1a00115a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0016ec:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0016ee:	2201      	movs	r2, #1
1a0016f0:	409a      	lsls	r2, r3
1a0016f2:	491c      	ldr	r1, [pc, #112]	; (1a001764 <xTaskIncrementTick+0x10c>)
1a0016f4:	6808      	ldr	r0, [r1, #0]
1a0016f6:	4302      	orrs	r2, r0
1a0016f8:	600a      	str	r2, [r1, #0]
1a0016fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0016fe:	009a      	lsls	r2, r3, #2
1a001700:	4639      	mov	r1, r7
1a001702:	4817      	ldr	r0, [pc, #92]	; (1a001760 <xTaskIncrementTick+0x108>)
1a001704:	4410      	add	r0, r2
1a001706:	f7ff fd02 	bl	1a00110e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00170a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a00170c:	4b13      	ldr	r3, [pc, #76]	; (1a00175c <xTaskIncrementTick+0x104>)
1a00170e:	681b      	ldr	r3, [r3, #0]
1a001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001712:	429a      	cmp	r2, r3
1a001714:	d2d4      	bcs.n	1a0016c0 <xTaskIncrementTick+0x68>
1a001716:	e7d4      	b.n	1a0016c2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001718:	2400      	movs	r4, #0
1a00171a:	e7d2      	b.n	1a0016c2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00171c:	4b0e      	ldr	r3, [pc, #56]	; (1a001758 <xTaskIncrementTick+0x100>)
1a00171e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001722:	601a      	str	r2, [r3, #0]
					break;
1a001724:	e7c0      	b.n	1a0016a8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001726:	4a0c      	ldr	r2, [pc, #48]	; (1a001758 <xTaskIncrementTick+0x100>)
1a001728:	6013      	str	r3, [r2, #0]
						break;
1a00172a:	e7bd      	b.n	1a0016a8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a00172c:	4a0e      	ldr	r2, [pc, #56]	; (1a001768 <xTaskIncrementTick+0x110>)
1a00172e:	6813      	ldr	r3, [r2, #0]
1a001730:	3301      	adds	r3, #1
1a001732:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001734:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001736:	4b0d      	ldr	r3, [pc, #52]	; (1a00176c <xTaskIncrementTick+0x114>)
1a001738:	681b      	ldr	r3, [r3, #0]
1a00173a:	b103      	cbz	r3, 1a00173e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a00173c:	2401      	movs	r4, #1
}
1a00173e:	4620      	mov	r0, r4
1a001740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001742:	bf00      	nop
1a001744:	10002934 	.word	0x10002934
1a001748:	100029b0 	.word	0x100029b0
1a00174c:	10002894 	.word	0x10002894
1a001750:	10002898 	.word	0x10002898
1a001754:	1000296c 	.word	0x1000296c
1a001758:	10002968 	.word	0x10002968
1a00175c:	10002890 	.word	0x10002890
1a001760:	1000289c 	.word	0x1000289c
1a001764:	1000293c 	.word	0x1000293c
1a001768:	10002930 	.word	0x10002930
1a00176c:	100029b4 	.word	0x100029b4

1a001770 <xTaskResumeAll>:
{
1a001770:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001772:	4b33      	ldr	r3, [pc, #204]	; (1a001840 <xTaskResumeAll+0xd0>)
1a001774:	681b      	ldr	r3, [r3, #0]
1a001776:	b943      	cbnz	r3, 1a00178a <xTaskResumeAll+0x1a>
1a001778:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00177c:	f383 8811 	msr	BASEPRI, r3
1a001780:	f3bf 8f6f 	isb	sy
1a001784:	f3bf 8f4f 	dsb	sy
1a001788:	e7fe      	b.n	1a001788 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a00178a:	f000 fdeb 	bl	1a002364 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00178e:	4b2c      	ldr	r3, [pc, #176]	; (1a001840 <xTaskResumeAll+0xd0>)
1a001790:	681a      	ldr	r2, [r3, #0]
1a001792:	3a01      	subs	r2, #1
1a001794:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001796:	681b      	ldr	r3, [r3, #0]
1a001798:	2b00      	cmp	r3, #0
1a00179a:	d14d      	bne.n	1a001838 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a00179c:	4b29      	ldr	r3, [pc, #164]	; (1a001844 <xTaskResumeAll+0xd4>)
1a00179e:	681b      	ldr	r3, [r3, #0]
1a0017a0:	b923      	cbnz	r3, 1a0017ac <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a0017a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0017a4:	f000 fe00 	bl	1a0023a8 <vPortExitCritical>
}
1a0017a8:	4620      	mov	r0, r4
1a0017aa:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a0017ac:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0017ae:	4b26      	ldr	r3, [pc, #152]	; (1a001848 <xTaskResumeAll+0xd8>)
1a0017b0:	681b      	ldr	r3, [r3, #0]
1a0017b2:	b31b      	cbz	r3, 1a0017fc <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0017b4:	4b24      	ldr	r3, [pc, #144]	; (1a001848 <xTaskResumeAll+0xd8>)
1a0017b6:	68db      	ldr	r3, [r3, #12]
1a0017b8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0017ba:	f104 0018 	add.w	r0, r4, #24
1a0017be:	f7ff fccc 	bl	1a00115a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0017c2:	1d25      	adds	r5, r4, #4
1a0017c4:	4628      	mov	r0, r5
1a0017c6:	f7ff fcc8 	bl	1a00115a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0017ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0017cc:	2201      	movs	r2, #1
1a0017ce:	409a      	lsls	r2, r3
1a0017d0:	491e      	ldr	r1, [pc, #120]	; (1a00184c <xTaskResumeAll+0xdc>)
1a0017d2:	6808      	ldr	r0, [r1, #0]
1a0017d4:	4302      	orrs	r2, r0
1a0017d6:	600a      	str	r2, [r1, #0]
1a0017d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0017dc:	009a      	lsls	r2, r3, #2
1a0017de:	4629      	mov	r1, r5
1a0017e0:	481b      	ldr	r0, [pc, #108]	; (1a001850 <xTaskResumeAll+0xe0>)
1a0017e2:	4410      	add	r0, r2
1a0017e4:	f7ff fc93 	bl	1a00110e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0017e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0017ea:	4b1a      	ldr	r3, [pc, #104]	; (1a001854 <xTaskResumeAll+0xe4>)
1a0017ec:	681b      	ldr	r3, [r3, #0]
1a0017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0017f0:	429a      	cmp	r2, r3
1a0017f2:	d3dc      	bcc.n	1a0017ae <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a0017f4:	4b18      	ldr	r3, [pc, #96]	; (1a001858 <xTaskResumeAll+0xe8>)
1a0017f6:	2201      	movs	r2, #1
1a0017f8:	601a      	str	r2, [r3, #0]
1a0017fa:	e7d8      	b.n	1a0017ae <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a0017fc:	b10c      	cbz	r4, 1a001802 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a0017fe:	f7ff fcdb 	bl	1a0011b8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001802:	4b16      	ldr	r3, [pc, #88]	; (1a00185c <xTaskResumeAll+0xec>)
1a001804:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001806:	b154      	cbz	r4, 1a00181e <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001808:	f7ff ff26 	bl	1a001658 <xTaskIncrementTick>
1a00180c:	b110      	cbz	r0, 1a001814 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a00180e:	4b12      	ldr	r3, [pc, #72]	; (1a001858 <xTaskResumeAll+0xe8>)
1a001810:	2201      	movs	r2, #1
1a001812:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001814:	3c01      	subs	r4, #1
1a001816:	d1f7      	bne.n	1a001808 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001818:	4b10      	ldr	r3, [pc, #64]	; (1a00185c <xTaskResumeAll+0xec>)
1a00181a:	2200      	movs	r2, #0
1a00181c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a00181e:	4b0e      	ldr	r3, [pc, #56]	; (1a001858 <xTaskResumeAll+0xe8>)
1a001820:	681b      	ldr	r3, [r3, #0]
1a001822:	b15b      	cbz	r3, 1a00183c <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a001824:	4b0e      	ldr	r3, [pc, #56]	; (1a001860 <xTaskResumeAll+0xf0>)
1a001826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00182a:	601a      	str	r2, [r3, #0]
1a00182c:	f3bf 8f4f 	dsb	sy
1a001830:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001834:	2401      	movs	r4, #1
1a001836:	e7b5      	b.n	1a0017a4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001838:	2400      	movs	r4, #0
1a00183a:	e7b3      	b.n	1a0017a4 <xTaskResumeAll+0x34>
1a00183c:	2400      	movs	r4, #0
1a00183e:	e7b1      	b.n	1a0017a4 <xTaskResumeAll+0x34>
1a001840:	10002934 	.word	0x10002934
1a001844:	10002928 	.word	0x10002928
1a001848:	10002970 	.word	0x10002970
1a00184c:	1000293c 	.word	0x1000293c
1a001850:	1000289c 	.word	0x1000289c
1a001854:	10002890 	.word	0x10002890
1a001858:	100029b4 	.word	0x100029b4
1a00185c:	10002930 	.word	0x10002930
1a001860:	e000ed04 	.word	0xe000ed04

1a001864 <vTaskDelayUntil>:
	{
1a001864:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a001866:	b150      	cbz	r0, 1a00187e <vTaskDelayUntil+0x1a>
1a001868:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a00186a:	b989      	cbnz	r1, 1a001890 <vTaskDelayUntil+0x2c>
1a00186c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001870:	f383 8811 	msr	BASEPRI, r3
1a001874:	f3bf 8f6f 	isb	sy
1a001878:	f3bf 8f4f 	dsb	sy
1a00187c:	e7fe      	b.n	1a00187c <vTaskDelayUntil+0x18>
1a00187e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001882:	f383 8811 	msr	BASEPRI, r3
1a001886:	f3bf 8f6f 	isb	sy
1a00188a:	f3bf 8f4f 	dsb	sy
1a00188e:	e7fe      	b.n	1a00188e <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001890:	4b1a      	ldr	r3, [pc, #104]	; (1a0018fc <vTaskDelayUntil+0x98>)
1a001892:	681b      	ldr	r3, [r3, #0]
1a001894:	b143      	cbz	r3, 1a0018a8 <vTaskDelayUntil+0x44>
1a001896:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00189a:	f383 8811 	msr	BASEPRI, r3
1a00189e:	f3bf 8f6f 	isb	sy
1a0018a2:	f3bf 8f4f 	dsb	sy
1a0018a6:	e7fe      	b.n	1a0018a6 <vTaskDelayUntil+0x42>
1a0018a8:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a0018aa:	f7ff fec7 	bl	1a00163c <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a0018ae:	4b14      	ldr	r3, [pc, #80]	; (1a001900 <vTaskDelayUntil+0x9c>)
1a0018b0:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a0018b2:	682a      	ldr	r2, [r5, #0]
1a0018b4:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a0018b6:	4282      	cmp	r2, r0
1a0018b8:	d918      	bls.n	1a0018ec <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a0018ba:	42a2      	cmp	r2, r4
1a0018bc:	d80c      	bhi.n	1a0018d8 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a0018be:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a0018c0:	f7ff ff56 	bl	1a001770 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0018c4:	b938      	cbnz	r0, 1a0018d6 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a0018c6:	4b0f      	ldr	r3, [pc, #60]	; (1a001904 <vTaskDelayUntil+0xa0>)
1a0018c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0018cc:	601a      	str	r2, [r3, #0]
1a0018ce:	f3bf 8f4f 	dsb	sy
1a0018d2:	f3bf 8f6f 	isb	sy
	}
1a0018d6:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a0018d8:	42a0      	cmp	r0, r4
1a0018da:	d301      	bcc.n	1a0018e0 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a0018dc:	602c      	str	r4, [r5, #0]
1a0018de:	e7ef      	b.n	1a0018c0 <vTaskDelayUntil+0x5c>
1a0018e0:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a0018e2:	2100      	movs	r1, #0
1a0018e4:	1a20      	subs	r0, r4, r0
1a0018e6:	f7ff fda7 	bl	1a001438 <prvAddCurrentTaskToDelayedList>
1a0018ea:	e7e9      	b.n	1a0018c0 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a0018ec:	42a2      	cmp	r2, r4
1a0018ee:	d801      	bhi.n	1a0018f4 <vTaskDelayUntil+0x90>
1a0018f0:	42a0      	cmp	r0, r4
1a0018f2:	d201      	bcs.n	1a0018f8 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a0018f4:	602c      	str	r4, [r5, #0]
1a0018f6:	e7f4      	b.n	1a0018e2 <vTaskDelayUntil+0x7e>
1a0018f8:	602c      	str	r4, [r5, #0]
1a0018fa:	e7e1      	b.n	1a0018c0 <vTaskDelayUntil+0x5c>
1a0018fc:	10002934 	.word	0x10002934
1a001900:	100029b0 	.word	0x100029b0
1a001904:	e000ed04 	.word	0xe000ed04

1a001908 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001908:	4b2c      	ldr	r3, [pc, #176]	; (1a0019bc <vTaskSwitchContext+0xb4>)
1a00190a:	681b      	ldr	r3, [r3, #0]
1a00190c:	b11b      	cbz	r3, 1a001916 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a00190e:	4b2c      	ldr	r3, [pc, #176]	; (1a0019c0 <vTaskSwitchContext+0xb8>)
1a001910:	2201      	movs	r2, #1
1a001912:	601a      	str	r2, [r3, #0]
1a001914:	4770      	bx	lr
{
1a001916:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001918:	4b29      	ldr	r3, [pc, #164]	; (1a0019c0 <vTaskSwitchContext+0xb8>)
1a00191a:	2200      	movs	r2, #0
1a00191c:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a00191e:	4b29      	ldr	r3, [pc, #164]	; (1a0019c4 <vTaskSwitchContext+0xbc>)
1a001920:	681b      	ldr	r3, [r3, #0]
1a001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001924:	681a      	ldr	r2, [r3, #0]
1a001926:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00192a:	d103      	bne.n	1a001934 <vTaskSwitchContext+0x2c>
1a00192c:	685a      	ldr	r2, [r3, #4]
1a00192e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001932:	d01b      	beq.n	1a00196c <vTaskSwitchContext+0x64>
1a001934:	4b23      	ldr	r3, [pc, #140]	; (1a0019c4 <vTaskSwitchContext+0xbc>)
1a001936:	6818      	ldr	r0, [r3, #0]
1a001938:	6819      	ldr	r1, [r3, #0]
1a00193a:	3134      	adds	r1, #52	; 0x34
1a00193c:	f7ff fc3a 	bl	1a0011b4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001940:	4b21      	ldr	r3, [pc, #132]	; (1a0019c8 <vTaskSwitchContext+0xc0>)
1a001942:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001944:	fab3 f383 	clz	r3, r3
1a001948:	b2db      	uxtb	r3, r3
1a00194a:	f1c3 031f 	rsb	r3, r3, #31
1a00194e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001952:	008a      	lsls	r2, r1, #2
1a001954:	491d      	ldr	r1, [pc, #116]	; (1a0019cc <vTaskSwitchContext+0xc4>)
1a001956:	588a      	ldr	r2, [r1, r2]
1a001958:	b98a      	cbnz	r2, 1a00197e <vTaskSwitchContext+0x76>
	__asm volatile
1a00195a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00195e:	f383 8811 	msr	BASEPRI, r3
1a001962:	f3bf 8f6f 	isb	sy
1a001966:	f3bf 8f4f 	dsb	sy
1a00196a:	e7fe      	b.n	1a00196a <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a00196c:	689a      	ldr	r2, [r3, #8]
1a00196e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001972:	d1df      	bne.n	1a001934 <vTaskSwitchContext+0x2c>
1a001974:	68db      	ldr	r3, [r3, #12]
1a001976:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00197a:	d1db      	bne.n	1a001934 <vTaskSwitchContext+0x2c>
1a00197c:	e7e0      	b.n	1a001940 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00197e:	4813      	ldr	r0, [pc, #76]	; (1a0019cc <vTaskSwitchContext+0xc4>)
1a001980:	009a      	lsls	r2, r3, #2
1a001982:	18d4      	adds	r4, r2, r3
1a001984:	00a1      	lsls	r1, r4, #2
1a001986:	4401      	add	r1, r0
1a001988:	684c      	ldr	r4, [r1, #4]
1a00198a:	6864      	ldr	r4, [r4, #4]
1a00198c:	604c      	str	r4, [r1, #4]
1a00198e:	441a      	add	r2, r3
1a001990:	0091      	lsls	r1, r2, #2
1a001992:	3108      	adds	r1, #8
1a001994:	4408      	add	r0, r1
1a001996:	4284      	cmp	r4, r0
1a001998:	d009      	beq.n	1a0019ae <vTaskSwitchContext+0xa6>
1a00199a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00199e:	009a      	lsls	r2, r3, #2
1a0019a0:	4b0a      	ldr	r3, [pc, #40]	; (1a0019cc <vTaskSwitchContext+0xc4>)
1a0019a2:	4413      	add	r3, r2
1a0019a4:	685b      	ldr	r3, [r3, #4]
1a0019a6:	68da      	ldr	r2, [r3, #12]
1a0019a8:	4b06      	ldr	r3, [pc, #24]	; (1a0019c4 <vTaskSwitchContext+0xbc>)
1a0019aa:	601a      	str	r2, [r3, #0]
}
1a0019ac:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0019ae:	6861      	ldr	r1, [r4, #4]
1a0019b0:	4806      	ldr	r0, [pc, #24]	; (1a0019cc <vTaskSwitchContext+0xc4>)
1a0019b2:	2214      	movs	r2, #20
1a0019b4:	fb02 0203 	mla	r2, r2, r3, r0
1a0019b8:	6051      	str	r1, [r2, #4]
1a0019ba:	e7ee      	b.n	1a00199a <vTaskSwitchContext+0x92>
1a0019bc:	10002934 	.word	0x10002934
1a0019c0:	100029b4 	.word	0x100029b4
1a0019c4:	10002890 	.word	0x10002890
1a0019c8:	1000293c 	.word	0x1000293c
1a0019cc:	1000289c 	.word	0x1000289c

1a0019d0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0019d0:	b940      	cbnz	r0, 1a0019e4 <vTaskPlaceOnEventList+0x14>
1a0019d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019d6:	f383 8811 	msr	BASEPRI, r3
1a0019da:	f3bf 8f6f 	isb	sy
1a0019de:	f3bf 8f4f 	dsb	sy
1a0019e2:	e7fe      	b.n	1a0019e2 <vTaskPlaceOnEventList+0x12>
{
1a0019e4:	b510      	push	{r4, lr}
1a0019e6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0019e8:	4b04      	ldr	r3, [pc, #16]	; (1a0019fc <vTaskPlaceOnEventList+0x2c>)
1a0019ea:	6819      	ldr	r1, [r3, #0]
1a0019ec:	3118      	adds	r1, #24
1a0019ee:	f7ff fb9a 	bl	1a001126 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0019f2:	2101      	movs	r1, #1
1a0019f4:	4620      	mov	r0, r4
1a0019f6:	f7ff fd1f 	bl	1a001438 <prvAddCurrentTaskToDelayedList>
}
1a0019fa:	bd10      	pop	{r4, pc}
1a0019fc:	10002890 	.word	0x10002890

1a001a00 <vTaskPlaceOnEventListRestricted>:
	{
1a001a00:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001a02:	b940      	cbnz	r0, 1a001a16 <vTaskPlaceOnEventListRestricted+0x16>
1a001a04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a08:	f383 8811 	msr	BASEPRI, r3
1a001a0c:	f3bf 8f6f 	isb	sy
1a001a10:	f3bf 8f4f 	dsb	sy
1a001a14:	e7fe      	b.n	1a001a14 <vTaskPlaceOnEventListRestricted+0x14>
1a001a16:	460c      	mov	r4, r1
1a001a18:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001a1a:	4a06      	ldr	r2, [pc, #24]	; (1a001a34 <vTaskPlaceOnEventListRestricted+0x34>)
1a001a1c:	6811      	ldr	r1, [r2, #0]
1a001a1e:	3118      	adds	r1, #24
1a001a20:	f7ff fb75 	bl	1a00110e <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001a24:	b10d      	cbz	r5, 1a001a2a <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a001a26:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001a2a:	4629      	mov	r1, r5
1a001a2c:	4620      	mov	r0, r4
1a001a2e:	f7ff fd03 	bl	1a001438 <prvAddCurrentTaskToDelayedList>
	}
1a001a32:	bd38      	pop	{r3, r4, r5, pc}
1a001a34:	10002890 	.word	0x10002890

1a001a38 <xTaskRemoveFromEventList>:
{
1a001a38:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001a3a:	68c3      	ldr	r3, [r0, #12]
1a001a3c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001a3e:	b944      	cbnz	r4, 1a001a52 <xTaskRemoveFromEventList+0x1a>
1a001a40:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a44:	f383 8811 	msr	BASEPRI, r3
1a001a48:	f3bf 8f6f 	isb	sy
1a001a4c:	f3bf 8f4f 	dsb	sy
1a001a50:	e7fe      	b.n	1a001a50 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001a52:	f104 0518 	add.w	r5, r4, #24
1a001a56:	4628      	mov	r0, r5
1a001a58:	f7ff fb7f 	bl	1a00115a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001a5c:	4b13      	ldr	r3, [pc, #76]	; (1a001aac <xTaskRemoveFromEventList+0x74>)
1a001a5e:	681b      	ldr	r3, [r3, #0]
1a001a60:	b9e3      	cbnz	r3, 1a001a9c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001a62:	1d25      	adds	r5, r4, #4
1a001a64:	4628      	mov	r0, r5
1a001a66:	f7ff fb78 	bl	1a00115a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001a6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001a6c:	2201      	movs	r2, #1
1a001a6e:	409a      	lsls	r2, r3
1a001a70:	490f      	ldr	r1, [pc, #60]	; (1a001ab0 <xTaskRemoveFromEventList+0x78>)
1a001a72:	6808      	ldr	r0, [r1, #0]
1a001a74:	4302      	orrs	r2, r0
1a001a76:	600a      	str	r2, [r1, #0]
1a001a78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a7c:	009a      	lsls	r2, r3, #2
1a001a7e:	4629      	mov	r1, r5
1a001a80:	480c      	ldr	r0, [pc, #48]	; (1a001ab4 <xTaskRemoveFromEventList+0x7c>)
1a001a82:	4410      	add	r0, r2
1a001a84:	f7ff fb43 	bl	1a00110e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001a88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001a8a:	4b0b      	ldr	r3, [pc, #44]	; (1a001ab8 <xTaskRemoveFromEventList+0x80>)
1a001a8c:	681b      	ldr	r3, [r3, #0]
1a001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001a90:	429a      	cmp	r2, r3
1a001a92:	d908      	bls.n	1a001aa6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001a94:	2001      	movs	r0, #1
1a001a96:	4b09      	ldr	r3, [pc, #36]	; (1a001abc <xTaskRemoveFromEventList+0x84>)
1a001a98:	6018      	str	r0, [r3, #0]
}
1a001a9a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001a9c:	4629      	mov	r1, r5
1a001a9e:	4808      	ldr	r0, [pc, #32]	; (1a001ac0 <xTaskRemoveFromEventList+0x88>)
1a001aa0:	f7ff fb35 	bl	1a00110e <vListInsertEnd>
1a001aa4:	e7f0      	b.n	1a001a88 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a001aa6:	2000      	movs	r0, #0
	return xReturn;
1a001aa8:	e7f7      	b.n	1a001a9a <xTaskRemoveFromEventList+0x62>
1a001aaa:	bf00      	nop
1a001aac:	10002934 	.word	0x10002934
1a001ab0:	1000293c 	.word	0x1000293c
1a001ab4:	1000289c 	.word	0x1000289c
1a001ab8:	10002890 	.word	0x10002890
1a001abc:	100029b4 	.word	0x100029b4
1a001ac0:	10002970 	.word	0x10002970

1a001ac4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001ac4:	4b03      	ldr	r3, [pc, #12]	; (1a001ad4 <vTaskInternalSetTimeOutState+0x10>)
1a001ac6:	681b      	ldr	r3, [r3, #0]
1a001ac8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001aca:	4b03      	ldr	r3, [pc, #12]	; (1a001ad8 <vTaskInternalSetTimeOutState+0x14>)
1a001acc:	681b      	ldr	r3, [r3, #0]
1a001ace:	6043      	str	r3, [r0, #4]
}
1a001ad0:	4770      	bx	lr
1a001ad2:	bf00      	nop
1a001ad4:	1000296c 	.word	0x1000296c
1a001ad8:	100029b0 	.word	0x100029b0

1a001adc <xTaskCheckForTimeOut>:
{
1a001adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001ade:	b150      	cbz	r0, 1a001af6 <xTaskCheckForTimeOut+0x1a>
1a001ae0:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001ae2:	b989      	cbnz	r1, 1a001b08 <xTaskCheckForTimeOut+0x2c>
1a001ae4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ae8:	f383 8811 	msr	BASEPRI, r3
1a001aec:	f3bf 8f6f 	isb	sy
1a001af0:	f3bf 8f4f 	dsb	sy
1a001af4:	e7fe      	b.n	1a001af4 <xTaskCheckForTimeOut+0x18>
1a001af6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001afa:	f383 8811 	msr	BASEPRI, r3
1a001afe:	f3bf 8f6f 	isb	sy
1a001b02:	f3bf 8f4f 	dsb	sy
1a001b06:	e7fe      	b.n	1a001b06 <xTaskCheckForTimeOut+0x2a>
1a001b08:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001b0a:	f000 fc2b 	bl	1a002364 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001b0e:	4b11      	ldr	r3, [pc, #68]	; (1a001b54 <xTaskCheckForTimeOut+0x78>)
1a001b10:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001b12:	6868      	ldr	r0, [r5, #4]
1a001b14:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a001b16:	6823      	ldr	r3, [r4, #0]
1a001b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001b1c:	d016      	beq.n	1a001b4c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001b1e:	682f      	ldr	r7, [r5, #0]
1a001b20:	4e0d      	ldr	r6, [pc, #52]	; (1a001b58 <xTaskCheckForTimeOut+0x7c>)
1a001b22:	6836      	ldr	r6, [r6, #0]
1a001b24:	42b7      	cmp	r7, r6
1a001b26:	d001      	beq.n	1a001b2c <xTaskCheckForTimeOut+0x50>
1a001b28:	4288      	cmp	r0, r1
1a001b2a:	d911      	bls.n	1a001b50 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001b2c:	4293      	cmp	r3, r2
1a001b2e:	d803      	bhi.n	1a001b38 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001b30:	2300      	movs	r3, #0
1a001b32:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001b34:	2401      	movs	r4, #1
1a001b36:	e005      	b.n	1a001b44 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a001b38:	1a9b      	subs	r3, r3, r2
1a001b3a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001b3c:	4628      	mov	r0, r5
1a001b3e:	f7ff ffc1 	bl	1a001ac4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001b42:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001b44:	f000 fc30 	bl	1a0023a8 <vPortExitCritical>
}
1a001b48:	4620      	mov	r0, r4
1a001b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a001b4c:	2400      	movs	r4, #0
1a001b4e:	e7f9      	b.n	1a001b44 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a001b50:	2401      	movs	r4, #1
1a001b52:	e7f7      	b.n	1a001b44 <xTaskCheckForTimeOut+0x68>
1a001b54:	100029b0 	.word	0x100029b0
1a001b58:	1000296c 	.word	0x1000296c

1a001b5c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001b5c:	4b01      	ldr	r3, [pc, #4]	; (1a001b64 <vTaskMissedYield+0x8>)
1a001b5e:	2201      	movs	r2, #1
1a001b60:	601a      	str	r2, [r3, #0]
}
1a001b62:	4770      	bx	lr
1a001b64:	100029b4 	.word	0x100029b4

1a001b68 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001b68:	4b05      	ldr	r3, [pc, #20]	; (1a001b80 <xTaskGetSchedulerState+0x18>)
1a001b6a:	681b      	ldr	r3, [r3, #0]
1a001b6c:	b133      	cbz	r3, 1a001b7c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001b6e:	4b05      	ldr	r3, [pc, #20]	; (1a001b84 <xTaskGetSchedulerState+0x1c>)
1a001b70:	681b      	ldr	r3, [r3, #0]
1a001b72:	b10b      	cbz	r3, 1a001b78 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001b74:	2000      	movs	r0, #0
	}
1a001b76:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001b78:	2002      	movs	r0, #2
1a001b7a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001b7c:	2001      	movs	r0, #1
1a001b7e:	4770      	bx	lr
1a001b80:	10002984 	.word	0x10002984
1a001b84:	10002934 	.word	0x10002934

1a001b88 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a001b88:	2800      	cmp	r0, #0
1a001b8a:	d050      	beq.n	1a001c2e <xTaskPriorityInherit+0xa6>
	{
1a001b8c:	b538      	push	{r3, r4, r5, lr}
1a001b8e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a001b90:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a001b92:	4928      	ldr	r1, [pc, #160]	; (1a001c34 <xTaskPriorityInherit+0xac>)
1a001b94:	6809      	ldr	r1, [r1, #0]
1a001b96:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001b98:	428a      	cmp	r2, r1
1a001b9a:	d23e      	bcs.n	1a001c1a <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001b9c:	6981      	ldr	r1, [r0, #24]
1a001b9e:	2900      	cmp	r1, #0
1a001ba0:	db05      	blt.n	1a001bae <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001ba2:	4924      	ldr	r1, [pc, #144]	; (1a001c34 <xTaskPriorityInherit+0xac>)
1a001ba4:	6809      	ldr	r1, [r1, #0]
1a001ba6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001ba8:	f1c1 0107 	rsb	r1, r1, #7
1a001bac:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a001bae:	6960      	ldr	r0, [r4, #20]
1a001bb0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a001bb4:	0091      	lsls	r1, r2, #2
1a001bb6:	4a20      	ldr	r2, [pc, #128]	; (1a001c38 <xTaskPriorityInherit+0xb0>)
1a001bb8:	440a      	add	r2, r1
1a001bba:	4290      	cmp	r0, r2
1a001bbc:	d005      	beq.n	1a001bca <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001bbe:	4a1d      	ldr	r2, [pc, #116]	; (1a001c34 <xTaskPriorityInherit+0xac>)
1a001bc0:	6812      	ldr	r2, [r2, #0]
1a001bc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001bc4:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a001bc6:	2001      	movs	r0, #1
	}
1a001bc8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001bca:	1d25      	adds	r5, r4, #4
1a001bcc:	4628      	mov	r0, r5
1a001bce:	f7ff fac4 	bl	1a00115a <uxListRemove>
1a001bd2:	b968      	cbnz	r0, 1a001bf0 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a001bd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001bd6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001bda:	008a      	lsls	r2, r1, #2
1a001bdc:	4916      	ldr	r1, [pc, #88]	; (1a001c38 <xTaskPriorityInherit+0xb0>)
1a001bde:	588a      	ldr	r2, [r1, r2]
1a001be0:	b932      	cbnz	r2, 1a001bf0 <xTaskPriorityInherit+0x68>
1a001be2:	2201      	movs	r2, #1
1a001be4:	409a      	lsls	r2, r3
1a001be6:	4915      	ldr	r1, [pc, #84]	; (1a001c3c <xTaskPriorityInherit+0xb4>)
1a001be8:	680b      	ldr	r3, [r1, #0]
1a001bea:	ea23 0302 	bic.w	r3, r3, r2
1a001bee:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001bf0:	4b10      	ldr	r3, [pc, #64]	; (1a001c34 <xTaskPriorityInherit+0xac>)
1a001bf2:	681b      	ldr	r3, [r3, #0]
1a001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001bf6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a001bf8:	2401      	movs	r4, #1
1a001bfa:	fa04 f203 	lsl.w	r2, r4, r3
1a001bfe:	490f      	ldr	r1, [pc, #60]	; (1a001c3c <xTaskPriorityInherit+0xb4>)
1a001c00:	6808      	ldr	r0, [r1, #0]
1a001c02:	4302      	orrs	r2, r0
1a001c04:	600a      	str	r2, [r1, #0]
1a001c06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001c0a:	009a      	lsls	r2, r3, #2
1a001c0c:	4629      	mov	r1, r5
1a001c0e:	480a      	ldr	r0, [pc, #40]	; (1a001c38 <xTaskPriorityInherit+0xb0>)
1a001c10:	4410      	add	r0, r2
1a001c12:	f7ff fa7c 	bl	1a00110e <vListInsertEnd>
				xReturn = pdTRUE;
1a001c16:	4620      	mov	r0, r4
1a001c18:	e7d6      	b.n	1a001bc8 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a001c1a:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001c1c:	4b05      	ldr	r3, [pc, #20]	; (1a001c34 <xTaskPriorityInherit+0xac>)
1a001c1e:	681b      	ldr	r3, [r3, #0]
1a001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001c22:	429a      	cmp	r2, r3
1a001c24:	d201      	bcs.n	1a001c2a <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a001c26:	2001      	movs	r0, #1
		return xReturn;
1a001c28:	e7ce      	b.n	1a001bc8 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a001c2a:	2000      	movs	r0, #0
1a001c2c:	e7cc      	b.n	1a001bc8 <xTaskPriorityInherit+0x40>
1a001c2e:	2000      	movs	r0, #0
	}
1a001c30:	4770      	bx	lr
1a001c32:	bf00      	nop
1a001c34:	10002890 	.word	0x10002890
1a001c38:	1000289c 	.word	0x1000289c
1a001c3c:	1000293c 	.word	0x1000293c

1a001c40 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001c40:	2800      	cmp	r0, #0
1a001c42:	d049      	beq.n	1a001cd8 <xTaskPriorityDisinherit+0x98>
	{
1a001c44:	b538      	push	{r3, r4, r5, lr}
1a001c46:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001c48:	4a26      	ldr	r2, [pc, #152]	; (1a001ce4 <xTaskPriorityDisinherit+0xa4>)
1a001c4a:	6812      	ldr	r2, [r2, #0]
1a001c4c:	4282      	cmp	r2, r0
1a001c4e:	d008      	beq.n	1a001c62 <xTaskPriorityDisinherit+0x22>
1a001c50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c54:	f383 8811 	msr	BASEPRI, r3
1a001c58:	f3bf 8f6f 	isb	sy
1a001c5c:	f3bf 8f4f 	dsb	sy
1a001c60:	e7fe      	b.n	1a001c60 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001c62:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001c64:	b942      	cbnz	r2, 1a001c78 <xTaskPriorityDisinherit+0x38>
1a001c66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c6a:	f383 8811 	msr	BASEPRI, r3
1a001c6e:	f3bf 8f6f 	isb	sy
1a001c72:	f3bf 8f4f 	dsb	sy
1a001c76:	e7fe      	b.n	1a001c76 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001c78:	3a01      	subs	r2, #1
1a001c7a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001c7c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001c7e:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001c80:	4288      	cmp	r0, r1
1a001c82:	d02b      	beq.n	1a001cdc <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001c84:	bb62      	cbnz	r2, 1a001ce0 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001c86:	1d25      	adds	r5, r4, #4
1a001c88:	4628      	mov	r0, r5
1a001c8a:	f7ff fa66 	bl	1a00115a <uxListRemove>
1a001c8e:	b970      	cbnz	r0, 1a001cae <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001c90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001c92:	2314      	movs	r3, #20
1a001c94:	fb03 f302 	mul.w	r3, r3, r2
1a001c98:	4913      	ldr	r1, [pc, #76]	; (1a001ce8 <xTaskPriorityDisinherit+0xa8>)
1a001c9a:	58cb      	ldr	r3, [r1, r3]
1a001c9c:	b93b      	cbnz	r3, 1a001cae <xTaskPriorityDisinherit+0x6e>
1a001c9e:	2301      	movs	r3, #1
1a001ca0:	fa03 f202 	lsl.w	r2, r3, r2
1a001ca4:	4911      	ldr	r1, [pc, #68]	; (1a001cec <xTaskPriorityDisinherit+0xac>)
1a001ca6:	680b      	ldr	r3, [r1, #0]
1a001ca8:	ea23 0302 	bic.w	r3, r3, r2
1a001cac:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001cae:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001cb2:	f1c3 0207 	rsb	r2, r3, #7
1a001cb6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001cb8:	2401      	movs	r4, #1
1a001cba:	fa04 f203 	lsl.w	r2, r4, r3
1a001cbe:	490b      	ldr	r1, [pc, #44]	; (1a001cec <xTaskPriorityDisinherit+0xac>)
1a001cc0:	6808      	ldr	r0, [r1, #0]
1a001cc2:	4302      	orrs	r2, r0
1a001cc4:	600a      	str	r2, [r1, #0]
1a001cc6:	4629      	mov	r1, r5
1a001cc8:	4a07      	ldr	r2, [pc, #28]	; (1a001ce8 <xTaskPriorityDisinherit+0xa8>)
1a001cca:	2014      	movs	r0, #20
1a001ccc:	fb00 2003 	mla	r0, r0, r3, r2
1a001cd0:	f7ff fa1d 	bl	1a00110e <vListInsertEnd>
					xReturn = pdTRUE;
1a001cd4:	4620      	mov	r0, r4
	}
1a001cd6:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001cd8:	2000      	movs	r0, #0
	}
1a001cda:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001cdc:	2000      	movs	r0, #0
1a001cde:	e7fa      	b.n	1a001cd6 <xTaskPriorityDisinherit+0x96>
1a001ce0:	2000      	movs	r0, #0
		return xReturn;
1a001ce2:	e7f8      	b.n	1a001cd6 <xTaskPriorityDisinherit+0x96>
1a001ce4:	10002890 	.word	0x10002890
1a001ce8:	1000289c 	.word	0x1000289c
1a001cec:	1000293c 	.word	0x1000293c

1a001cf0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a001cf0:	2800      	cmp	r0, #0
1a001cf2:	d055      	beq.n	1a001da0 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a001cf4:	b538      	push	{r3, r4, r5, lr}
1a001cf6:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a001cf8:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a001cfa:	b940      	cbnz	r0, 1a001d0e <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a001cfc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d00:	f383 8811 	msr	BASEPRI, r3
1a001d04:	f3bf 8f6f 	isb	sy
1a001d08:	f3bf 8f4f 	dsb	sy
1a001d0c:	e7fe      	b.n	1a001d0c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a001d0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a001d10:	428a      	cmp	r2, r1
1a001d12:	d200      	bcs.n	1a001d16 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a001d14:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a001d16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a001d18:	4291      	cmp	r1, r2
1a001d1a:	d001      	beq.n	1a001d20 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a001d1c:	2801      	cmp	r0, #1
1a001d1e:	d000      	beq.n	1a001d22 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a001d20:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a001d22:	4820      	ldr	r0, [pc, #128]	; (1a001da4 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a001d24:	6800      	ldr	r0, [r0, #0]
1a001d26:	4298      	cmp	r0, r3
1a001d28:	d108      	bne.n	1a001d3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a001d2a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d2e:	f383 8811 	msr	BASEPRI, r3
1a001d32:	f3bf 8f6f 	isb	sy
1a001d36:	f3bf 8f4f 	dsb	sy
1a001d3a:	e7fe      	b.n	1a001d3a <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a001d3c:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001d3e:	6998      	ldr	r0, [r3, #24]
1a001d40:	2800      	cmp	r0, #0
1a001d42:	db02      	blt.n	1a001d4a <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001d44:	f1c2 0207 	rsb	r2, r2, #7
1a001d48:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a001d4a:	695a      	ldr	r2, [r3, #20]
1a001d4c:	4816      	ldr	r0, [pc, #88]	; (1a001da8 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001d4e:	2414      	movs	r4, #20
1a001d50:	fb04 0101 	mla	r1, r4, r1, r0
1a001d54:	428a      	cmp	r2, r1
1a001d56:	d1e3      	bne.n	1a001d20 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001d58:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001d5a:	1d1d      	adds	r5, r3, #4
1a001d5c:	4628      	mov	r0, r5
1a001d5e:	f7ff f9fc 	bl	1a00115a <uxListRemove>
1a001d62:	b970      	cbnz	r0, 1a001d82 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001d64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001d66:	2314      	movs	r3, #20
1a001d68:	fb03 f302 	mul.w	r3, r3, r2
1a001d6c:	490e      	ldr	r1, [pc, #56]	; (1a001da8 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001d6e:	58cb      	ldr	r3, [r1, r3]
1a001d70:	b93b      	cbnz	r3, 1a001d82 <vTaskPriorityDisinheritAfterTimeout+0x92>
1a001d72:	2301      	movs	r3, #1
1a001d74:	fa03 f202 	lsl.w	r2, r3, r2
1a001d78:	490c      	ldr	r1, [pc, #48]	; (1a001dac <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001d7a:	680b      	ldr	r3, [r1, #0]
1a001d7c:	ea23 0302 	bic.w	r3, r3, r2
1a001d80:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a001d82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001d84:	2301      	movs	r3, #1
1a001d86:	4093      	lsls	r3, r2
1a001d88:	4908      	ldr	r1, [pc, #32]	; (1a001dac <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001d8a:	6808      	ldr	r0, [r1, #0]
1a001d8c:	4303      	orrs	r3, r0
1a001d8e:	600b      	str	r3, [r1, #0]
1a001d90:	4629      	mov	r1, r5
1a001d92:	4b05      	ldr	r3, [pc, #20]	; (1a001da8 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001d94:	2014      	movs	r0, #20
1a001d96:	fb00 3002 	mla	r0, r0, r2, r3
1a001d9a:	f7ff f9b8 	bl	1a00110e <vListInsertEnd>
	}
1a001d9e:	e7bf      	b.n	1a001d20 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a001da0:	4770      	bx	lr
1a001da2:	bf00      	nop
1a001da4:	10002890 	.word	0x10002890
1a001da8:	1000289c 	.word	0x1000289c
1a001dac:	1000293c 	.word	0x1000293c

1a001db0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a001db0:	4b05      	ldr	r3, [pc, #20]	; (1a001dc8 <pvTaskIncrementMutexHeldCount+0x18>)
1a001db2:	681b      	ldr	r3, [r3, #0]
1a001db4:	b123      	cbz	r3, 1a001dc0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a001db6:	4b04      	ldr	r3, [pc, #16]	; (1a001dc8 <pvTaskIncrementMutexHeldCount+0x18>)
1a001db8:	681a      	ldr	r2, [r3, #0]
1a001dba:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a001dbc:	3301      	adds	r3, #1
1a001dbe:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a001dc0:	4b01      	ldr	r3, [pc, #4]	; (1a001dc8 <pvTaskIncrementMutexHeldCount+0x18>)
1a001dc2:	6818      	ldr	r0, [r3, #0]
	}
1a001dc4:	4770      	bx	lr
1a001dc6:	bf00      	nop
1a001dc8:	10002890 	.word	0x10002890

1a001dcc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001dcc:	4b06      	ldr	r3, [pc, #24]	; (1a001de8 <prvGetNextExpireTime+0x1c>)
1a001dce:	681a      	ldr	r2, [r3, #0]
1a001dd0:	6813      	ldr	r3, [r2, #0]
1a001dd2:	fab3 f383 	clz	r3, r3
1a001dd6:	095b      	lsrs	r3, r3, #5
1a001dd8:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001dda:	b913      	cbnz	r3, 1a001de2 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001ddc:	68d3      	ldr	r3, [r2, #12]
1a001dde:	6818      	ldr	r0, [r3, #0]
1a001de0:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001de2:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001de4:	4770      	bx	lr
1a001de6:	bf00      	nop
1a001de8:	100029b8 	.word	0x100029b8

1a001dec <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001dec:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001dee:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001df0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001df2:	4291      	cmp	r1, r2
1a001df4:	d80c      	bhi.n	1a001e10 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001df6:	1ad2      	subs	r2, r2, r3
1a001df8:	6983      	ldr	r3, [r0, #24]
1a001dfa:	429a      	cmp	r2, r3
1a001dfc:	d301      	bcc.n	1a001e02 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001dfe:	2001      	movs	r0, #1
1a001e00:	e010      	b.n	1a001e24 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001e02:	1d01      	adds	r1, r0, #4
1a001e04:	4b09      	ldr	r3, [pc, #36]	; (1a001e2c <prvInsertTimerInActiveList+0x40>)
1a001e06:	6818      	ldr	r0, [r3, #0]
1a001e08:	f7ff f98d 	bl	1a001126 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001e0c:	2000      	movs	r0, #0
1a001e0e:	e009      	b.n	1a001e24 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001e10:	429a      	cmp	r2, r3
1a001e12:	d201      	bcs.n	1a001e18 <prvInsertTimerInActiveList+0x2c>
1a001e14:	4299      	cmp	r1, r3
1a001e16:	d206      	bcs.n	1a001e26 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001e18:	1d01      	adds	r1, r0, #4
1a001e1a:	4b05      	ldr	r3, [pc, #20]	; (1a001e30 <prvInsertTimerInActiveList+0x44>)
1a001e1c:	6818      	ldr	r0, [r3, #0]
1a001e1e:	f7ff f982 	bl	1a001126 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001e22:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a001e24:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001e26:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001e28:	e7fc      	b.n	1a001e24 <prvInsertTimerInActiveList+0x38>
1a001e2a:	bf00      	nop
1a001e2c:	100029bc 	.word	0x100029bc
1a001e30:	100029b8 	.word	0x100029b8

1a001e34 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001e34:	b530      	push	{r4, r5, lr}
1a001e36:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001e38:	f000 fa94 	bl	1a002364 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001e3c:	4b11      	ldr	r3, [pc, #68]	; (1a001e84 <prvCheckForValidListAndQueue+0x50>)
1a001e3e:	681b      	ldr	r3, [r3, #0]
1a001e40:	b11b      	cbz	r3, 1a001e4a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001e42:	f000 fab1 	bl	1a0023a8 <vPortExitCritical>
}
1a001e46:	b003      	add	sp, #12
1a001e48:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001e4a:	4d0f      	ldr	r5, [pc, #60]	; (1a001e88 <prvCheckForValidListAndQueue+0x54>)
1a001e4c:	4628      	mov	r0, r5
1a001e4e:	f7ff f950 	bl	1a0010f2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001e52:	4c0e      	ldr	r4, [pc, #56]	; (1a001e8c <prvCheckForValidListAndQueue+0x58>)
1a001e54:	4620      	mov	r0, r4
1a001e56:	f7ff f94c 	bl	1a0010f2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001e5a:	4b0d      	ldr	r3, [pc, #52]	; (1a001e90 <prvCheckForValidListAndQueue+0x5c>)
1a001e5c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001e5e:	4b0d      	ldr	r3, [pc, #52]	; (1a001e94 <prvCheckForValidListAndQueue+0x60>)
1a001e60:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001e62:	2300      	movs	r3, #0
1a001e64:	9300      	str	r3, [sp, #0]
1a001e66:	4b0c      	ldr	r3, [pc, #48]	; (1a001e98 <prvCheckForValidListAndQueue+0x64>)
1a001e68:	4a0c      	ldr	r2, [pc, #48]	; (1a001e9c <prvCheckForValidListAndQueue+0x68>)
1a001e6a:	2110      	movs	r1, #16
1a001e6c:	200a      	movs	r0, #10
1a001e6e:	f7fe fdf6 	bl	1a000a5e <xQueueGenericCreateStatic>
1a001e72:	4b04      	ldr	r3, [pc, #16]	; (1a001e84 <prvCheckForValidListAndQueue+0x50>)
1a001e74:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001e76:	2800      	cmp	r0, #0
1a001e78:	d0e3      	beq.n	1a001e42 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001e7a:	4909      	ldr	r1, [pc, #36]	; (1a001ea0 <prvCheckForValidListAndQueue+0x6c>)
1a001e7c:	f7ff f8fc 	bl	1a001078 <vQueueAddToRegistry>
1a001e80:	e7df      	b.n	1a001e42 <prvCheckForValidListAndQueue+0xe>
1a001e82:	bf00      	nop
1a001e84:	10002adc 	.word	0x10002adc
1a001e88:	10002a60 	.word	0x10002a60
1a001e8c:	10002a74 	.word	0x10002a74
1a001e90:	100029b8 	.word	0x100029b8
1a001e94:	100029bc 	.word	0x100029bc
1a001e98:	10002a8c 	.word	0x10002a8c
1a001e9c:	100029c0 	.word	0x100029c0
1a001ea0:	1a0045d0 	.word	0x1a0045d0

1a001ea4 <prvInitialiseNewTimer>:
{
1a001ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001ea8:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a001eaa:	b941      	cbnz	r1, 1a001ebe <prvInitialiseNewTimer+0x1a>
1a001eac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001eb0:	f383 8811 	msr	BASEPRI, r3
1a001eb4:	f3bf 8f6f 	isb	sy
1a001eb8:	f3bf 8f4f 	dsb	sy
1a001ebc:	e7fe      	b.n	1a001ebc <prvInitialiseNewTimer+0x18>
1a001ebe:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a001ec0:	b174      	cbz	r4, 1a001ee0 <prvInitialiseNewTimer+0x3c>
1a001ec2:	461d      	mov	r5, r3
1a001ec4:	4616      	mov	r6, r2
1a001ec6:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a001ec8:	f7ff ffb4 	bl	1a001e34 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a001ecc:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a001ed0:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a001ed2:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a001ed4:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a001ed6:	9b06      	ldr	r3, [sp, #24]
1a001ed8:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a001eda:	1d20      	adds	r0, r4, #4
1a001edc:	f7ff f914 	bl	1a001108 <vListInitialiseItem>
}
1a001ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001ee4 <xTimerCreateTimerTask>:
{
1a001ee4:	b510      	push	{r4, lr}
1a001ee6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001ee8:	f7ff ffa4 	bl	1a001e34 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001eec:	4b12      	ldr	r3, [pc, #72]	; (1a001f38 <xTimerCreateTimerTask+0x54>)
1a001eee:	681b      	ldr	r3, [r3, #0]
1a001ef0:	b1cb      	cbz	r3, 1a001f26 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001ef2:	2400      	movs	r4, #0
1a001ef4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001ef6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001ef8:	aa07      	add	r2, sp, #28
1a001efa:	a906      	add	r1, sp, #24
1a001efc:	a805      	add	r0, sp, #20
1a001efe:	f7ff f94d 	bl	1a00119c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001f02:	9b05      	ldr	r3, [sp, #20]
1a001f04:	9302      	str	r3, [sp, #8]
1a001f06:	9b06      	ldr	r3, [sp, #24]
1a001f08:	9301      	str	r3, [sp, #4]
1a001f0a:	2304      	movs	r3, #4
1a001f0c:	9300      	str	r3, [sp, #0]
1a001f0e:	4623      	mov	r3, r4
1a001f10:	9a07      	ldr	r2, [sp, #28]
1a001f12:	490a      	ldr	r1, [pc, #40]	; (1a001f3c <xTimerCreateTimerTask+0x58>)
1a001f14:	480a      	ldr	r0, [pc, #40]	; (1a001f40 <xTimerCreateTimerTask+0x5c>)
1a001f16:	f7ff fadb 	bl	1a0014d0 <xTaskCreateStatic>
1a001f1a:	4b0a      	ldr	r3, [pc, #40]	; (1a001f44 <xTimerCreateTimerTask+0x60>)
1a001f1c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001f1e:	b110      	cbz	r0, 1a001f26 <xTimerCreateTimerTask+0x42>
}
1a001f20:	2001      	movs	r0, #1
1a001f22:	b008      	add	sp, #32
1a001f24:	bd10      	pop	{r4, pc}
1a001f26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f2a:	f383 8811 	msr	BASEPRI, r3
1a001f2e:	f3bf 8f6f 	isb	sy
1a001f32:	f3bf 8f4f 	dsb	sy
1a001f36:	e7fe      	b.n	1a001f36 <xTimerCreateTimerTask+0x52>
1a001f38:	10002adc 	.word	0x10002adc
1a001f3c:	1a0045d8 	.word	0x1a0045d8
1a001f40:	1a002275 	.word	0x1a002275
1a001f44:	10002ae0 	.word	0x10002ae0

1a001f48 <xTimerCreateStatic>:
	{
1a001f48:	b530      	push	{r4, r5, lr}
1a001f4a:	b085      	sub	sp, #20
1a001f4c:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a001f4e:	2530      	movs	r5, #48	; 0x30
1a001f50:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a001f52:	9d03      	ldr	r5, [sp, #12]
1a001f54:	2d30      	cmp	r5, #48	; 0x30
1a001f56:	d008      	beq.n	1a001f6a <xTimerCreateStatic+0x22>
1a001f58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f5c:	f383 8811 	msr	BASEPRI, r3
1a001f60:	f3bf 8f6f 	isb	sy
1a001f64:	f3bf 8f4f 	dsb	sy
1a001f68:	e7fe      	b.n	1a001f68 <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a001f6a:	b944      	cbnz	r4, 1a001f7e <xTimerCreateStatic+0x36>
1a001f6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f70:	f383 8811 	msr	BASEPRI, r3
1a001f74:	f3bf 8f6f 	isb	sy
1a001f78:	f3bf 8f4f 	dsb	sy
1a001f7c:	e7fe      	b.n	1a001f7c <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a001f7e:	9401      	str	r4, [sp, #4]
1a001f80:	9d08      	ldr	r5, [sp, #32]
1a001f82:	9500      	str	r5, [sp, #0]
1a001f84:	f7ff ff8e 	bl	1a001ea4 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a001f88:	2301      	movs	r3, #1
1a001f8a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a001f8e:	4620      	mov	r0, r4
1a001f90:	b005      	add	sp, #20
1a001f92:	bd30      	pop	{r4, r5, pc}

1a001f94 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001f94:	b1c8      	cbz	r0, 1a001fca <xTimerGenericCommand+0x36>
{
1a001f96:	b530      	push	{r4, r5, lr}
1a001f98:	b085      	sub	sp, #20
1a001f9a:	4615      	mov	r5, r2
1a001f9c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001f9e:	4a17      	ldr	r2, [pc, #92]	; (1a001ffc <xTimerGenericCommand+0x68>)
1a001fa0:	6810      	ldr	r0, [r2, #0]
1a001fa2:	b340      	cbz	r0, 1a001ff6 <xTimerGenericCommand+0x62>
1a001fa4:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001fa6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001fa8:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001faa:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001fac:	2905      	cmp	r1, #5
1a001fae:	dc1d      	bgt.n	1a001fec <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001fb0:	f7ff fdda 	bl	1a001b68 <xTaskGetSchedulerState>
1a001fb4:	2802      	cmp	r0, #2
1a001fb6:	d011      	beq.n	1a001fdc <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001fb8:	2300      	movs	r3, #0
1a001fba:	461a      	mov	r2, r3
1a001fbc:	4669      	mov	r1, sp
1a001fbe:	480f      	ldr	r0, [pc, #60]	; (1a001ffc <xTimerGenericCommand+0x68>)
1a001fc0:	6800      	ldr	r0, [r0, #0]
1a001fc2:	f7fe fdbb 	bl	1a000b3c <xQueueGenericSend>
}
1a001fc6:	b005      	add	sp, #20
1a001fc8:	bd30      	pop	{r4, r5, pc}
1a001fca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fce:	f383 8811 	msr	BASEPRI, r3
1a001fd2:	f3bf 8f6f 	isb	sy
1a001fd6:	f3bf 8f4f 	dsb	sy
1a001fda:	e7fe      	b.n	1a001fda <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001fdc:	2300      	movs	r3, #0
1a001fde:	9a08      	ldr	r2, [sp, #32]
1a001fe0:	4669      	mov	r1, sp
1a001fe2:	4806      	ldr	r0, [pc, #24]	; (1a001ffc <xTimerGenericCommand+0x68>)
1a001fe4:	6800      	ldr	r0, [r0, #0]
1a001fe6:	f7fe fda9 	bl	1a000b3c <xQueueGenericSend>
1a001fea:	e7ec      	b.n	1a001fc6 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001fec:	2300      	movs	r3, #0
1a001fee:	4669      	mov	r1, sp
1a001ff0:	f7fe fe62 	bl	1a000cb8 <xQueueGenericSendFromISR>
1a001ff4:	e7e7      	b.n	1a001fc6 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a001ff6:	2000      	movs	r0, #0
	return xReturn;
1a001ff8:	e7e5      	b.n	1a001fc6 <xTimerGenericCommand+0x32>
1a001ffa:	bf00      	nop
1a001ffc:	10002adc 	.word	0x10002adc

1a002000 <prvSwitchTimerLists>:
{
1a002000:	b570      	push	{r4, r5, r6, lr}
1a002002:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002004:	4b1a      	ldr	r3, [pc, #104]	; (1a002070 <prvSwitchTimerLists+0x70>)
1a002006:	681b      	ldr	r3, [r3, #0]
1a002008:	681a      	ldr	r2, [r3, #0]
1a00200a:	b352      	cbz	r2, 1a002062 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00200c:	68db      	ldr	r3, [r3, #12]
1a00200e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002010:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002012:	1d25      	adds	r5, r4, #4
1a002014:	4628      	mov	r0, r5
1a002016:	f7ff f8a0 	bl	1a00115a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00201a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00201c:	4620      	mov	r0, r4
1a00201e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002020:	69e3      	ldr	r3, [r4, #28]
1a002022:	2b01      	cmp	r3, #1
1a002024:	d1ee      	bne.n	1a002004 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002026:	69a3      	ldr	r3, [r4, #24]
1a002028:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00202a:	429e      	cmp	r6, r3
1a00202c:	d207      	bcs.n	1a00203e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a00202e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002030:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002032:	4629      	mov	r1, r5
1a002034:	4b0e      	ldr	r3, [pc, #56]	; (1a002070 <prvSwitchTimerLists+0x70>)
1a002036:	6818      	ldr	r0, [r3, #0]
1a002038:	f7ff f875 	bl	1a001126 <vListInsert>
1a00203c:	e7e2      	b.n	1a002004 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00203e:	2100      	movs	r1, #0
1a002040:	9100      	str	r1, [sp, #0]
1a002042:	460b      	mov	r3, r1
1a002044:	4632      	mov	r2, r6
1a002046:	4620      	mov	r0, r4
1a002048:	f7ff ffa4 	bl	1a001f94 <xTimerGenericCommand>
				configASSERT( xResult );
1a00204c:	2800      	cmp	r0, #0
1a00204e:	d1d9      	bne.n	1a002004 <prvSwitchTimerLists+0x4>
1a002050:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002054:	f383 8811 	msr	BASEPRI, r3
1a002058:	f3bf 8f6f 	isb	sy
1a00205c:	f3bf 8f4f 	dsb	sy
1a002060:	e7fe      	b.n	1a002060 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002062:	4a04      	ldr	r2, [pc, #16]	; (1a002074 <prvSwitchTimerLists+0x74>)
1a002064:	6810      	ldr	r0, [r2, #0]
1a002066:	4902      	ldr	r1, [pc, #8]	; (1a002070 <prvSwitchTimerLists+0x70>)
1a002068:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00206a:	6013      	str	r3, [r2, #0]
}
1a00206c:	b002      	add	sp, #8
1a00206e:	bd70      	pop	{r4, r5, r6, pc}
1a002070:	100029b8 	.word	0x100029b8
1a002074:	100029bc 	.word	0x100029bc

1a002078 <prvSampleTimeNow>:
{
1a002078:	b538      	push	{r3, r4, r5, lr}
1a00207a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a00207c:	f7ff fae6 	bl	1a00164c <xTaskGetTickCount>
1a002080:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002082:	4b07      	ldr	r3, [pc, #28]	; (1a0020a0 <prvSampleTimeNow+0x28>)
1a002084:	681b      	ldr	r3, [r3, #0]
1a002086:	4283      	cmp	r3, r0
1a002088:	d805      	bhi.n	1a002096 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00208a:	2300      	movs	r3, #0
1a00208c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a00208e:	4b04      	ldr	r3, [pc, #16]	; (1a0020a0 <prvSampleTimeNow+0x28>)
1a002090:	601c      	str	r4, [r3, #0]
}
1a002092:	4620      	mov	r0, r4
1a002094:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002096:	f7ff ffb3 	bl	1a002000 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00209a:	2301      	movs	r3, #1
1a00209c:	602b      	str	r3, [r5, #0]
1a00209e:	e7f6      	b.n	1a00208e <prvSampleTimeNow+0x16>
1a0020a0:	10002a88 	.word	0x10002a88

1a0020a4 <prvProcessExpiredTimer>:
{
1a0020a4:	b570      	push	{r4, r5, r6, lr}
1a0020a6:	b082      	sub	sp, #8
1a0020a8:	4605      	mov	r5, r0
1a0020aa:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0020ac:	4b14      	ldr	r3, [pc, #80]	; (1a002100 <prvProcessExpiredTimer+0x5c>)
1a0020ae:	681b      	ldr	r3, [r3, #0]
1a0020b0:	68db      	ldr	r3, [r3, #12]
1a0020b2:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0020b4:	1d20      	adds	r0, r4, #4
1a0020b6:	f7ff f850 	bl	1a00115a <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0020ba:	69e3      	ldr	r3, [r4, #28]
1a0020bc:	2b01      	cmp	r3, #1
1a0020be:	d004      	beq.n	1a0020ca <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0020c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0020c2:	4620      	mov	r0, r4
1a0020c4:	4798      	blx	r3
}
1a0020c6:	b002      	add	sp, #8
1a0020c8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0020ca:	69a1      	ldr	r1, [r4, #24]
1a0020cc:	462b      	mov	r3, r5
1a0020ce:	4632      	mov	r2, r6
1a0020d0:	4429      	add	r1, r5
1a0020d2:	4620      	mov	r0, r4
1a0020d4:	f7ff fe8a 	bl	1a001dec <prvInsertTimerInActiveList>
1a0020d8:	2800      	cmp	r0, #0
1a0020da:	d0f1      	beq.n	1a0020c0 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0020dc:	2100      	movs	r1, #0
1a0020de:	9100      	str	r1, [sp, #0]
1a0020e0:	460b      	mov	r3, r1
1a0020e2:	462a      	mov	r2, r5
1a0020e4:	4620      	mov	r0, r4
1a0020e6:	f7ff ff55 	bl	1a001f94 <xTimerGenericCommand>
			configASSERT( xResult );
1a0020ea:	2800      	cmp	r0, #0
1a0020ec:	d1e8      	bne.n	1a0020c0 <prvProcessExpiredTimer+0x1c>
1a0020ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020f2:	f383 8811 	msr	BASEPRI, r3
1a0020f6:	f3bf 8f6f 	isb	sy
1a0020fa:	f3bf 8f4f 	dsb	sy
1a0020fe:	e7fe      	b.n	1a0020fe <prvProcessExpiredTimer+0x5a>
1a002100:	100029b8 	.word	0x100029b8

1a002104 <prvProcessTimerOrBlockTask>:
{
1a002104:	b570      	push	{r4, r5, r6, lr}
1a002106:	b082      	sub	sp, #8
1a002108:	4606      	mov	r6, r0
1a00210a:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a00210c:	f7ff fa96 	bl	1a00163c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002110:	a801      	add	r0, sp, #4
1a002112:	f7ff ffb1 	bl	1a002078 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002116:	9b01      	ldr	r3, [sp, #4]
1a002118:	bb1b      	cbnz	r3, 1a002162 <prvProcessTimerOrBlockTask+0x5e>
1a00211a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a00211c:	b90c      	cbnz	r4, 1a002122 <prvProcessTimerOrBlockTask+0x1e>
1a00211e:	42b0      	cmp	r0, r6
1a002120:	d218      	bcs.n	1a002154 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002122:	b12c      	cbz	r4, 1a002130 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002124:	4b11      	ldr	r3, [pc, #68]	; (1a00216c <prvProcessTimerOrBlockTask+0x68>)
1a002126:	681b      	ldr	r3, [r3, #0]
1a002128:	681c      	ldr	r4, [r3, #0]
1a00212a:	fab4 f484 	clz	r4, r4
1a00212e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002130:	4622      	mov	r2, r4
1a002132:	1b71      	subs	r1, r6, r5
1a002134:	4b0e      	ldr	r3, [pc, #56]	; (1a002170 <prvProcessTimerOrBlockTask+0x6c>)
1a002136:	6818      	ldr	r0, [r3, #0]
1a002138:	f7fe ffb2 	bl	1a0010a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a00213c:	f7ff fb18 	bl	1a001770 <xTaskResumeAll>
1a002140:	b988      	cbnz	r0, 1a002166 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002142:	4b0c      	ldr	r3, [pc, #48]	; (1a002174 <prvProcessTimerOrBlockTask+0x70>)
1a002144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002148:	601a      	str	r2, [r3, #0]
1a00214a:	f3bf 8f4f 	dsb	sy
1a00214e:	f3bf 8f6f 	isb	sy
1a002152:	e008      	b.n	1a002166 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002154:	f7ff fb0c 	bl	1a001770 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002158:	4629      	mov	r1, r5
1a00215a:	4630      	mov	r0, r6
1a00215c:	f7ff ffa2 	bl	1a0020a4 <prvProcessExpiredTimer>
1a002160:	e001      	b.n	1a002166 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002162:	f7ff fb05 	bl	1a001770 <xTaskResumeAll>
}
1a002166:	b002      	add	sp, #8
1a002168:	bd70      	pop	{r4, r5, r6, pc}
1a00216a:	bf00      	nop
1a00216c:	100029bc 	.word	0x100029bc
1a002170:	10002adc 	.word	0x10002adc
1a002174:	e000ed04 	.word	0xe000ed04

1a002178 <prvProcessReceivedCommands>:
{
1a002178:	b530      	push	{r4, r5, lr}
1a00217a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00217c:	e002      	b.n	1a002184 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a00217e:	9b04      	ldr	r3, [sp, #16]
1a002180:	2b00      	cmp	r3, #0
1a002182:	da0f      	bge.n	1a0021a4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002184:	2200      	movs	r2, #0
1a002186:	a904      	add	r1, sp, #16
1a002188:	4b39      	ldr	r3, [pc, #228]	; (1a002270 <prvProcessReceivedCommands+0xf8>)
1a00218a:	6818      	ldr	r0, [r3, #0]
1a00218c:	f7fe fdfa 	bl	1a000d84 <xQueueReceive>
1a002190:	2800      	cmp	r0, #0
1a002192:	d06a      	beq.n	1a00226a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002194:	9b04      	ldr	r3, [sp, #16]
1a002196:	2b00      	cmp	r3, #0
1a002198:	daf1      	bge.n	1a00217e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00219a:	9907      	ldr	r1, [sp, #28]
1a00219c:	9806      	ldr	r0, [sp, #24]
1a00219e:	9b05      	ldr	r3, [sp, #20]
1a0021a0:	4798      	blx	r3
1a0021a2:	e7ec      	b.n	1a00217e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0021a4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0021a6:	6963      	ldr	r3, [r4, #20]
1a0021a8:	b113      	cbz	r3, 1a0021b0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0021aa:	1d20      	adds	r0, r4, #4
1a0021ac:	f7fe ffd5 	bl	1a00115a <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0021b0:	a803      	add	r0, sp, #12
1a0021b2:	f7ff ff61 	bl	1a002078 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0021b6:	9b04      	ldr	r3, [sp, #16]
1a0021b8:	2b09      	cmp	r3, #9
1a0021ba:	d8e3      	bhi.n	1a002184 <prvProcessReceivedCommands+0xc>
1a0021bc:	a201      	add	r2, pc, #4	; (adr r2, 1a0021c4 <prvProcessReceivedCommands+0x4c>)
1a0021be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0021c2:	bf00      	nop
1a0021c4:	1a0021ed 	.word	0x1a0021ed
1a0021c8:	1a0021ed 	.word	0x1a0021ed
1a0021cc:	1a0021ed 	.word	0x1a0021ed
1a0021d0:	1a002185 	.word	0x1a002185
1a0021d4:	1a002235 	.word	0x1a002235
1a0021d8:	1a00225b 	.word	0x1a00225b
1a0021dc:	1a0021ed 	.word	0x1a0021ed
1a0021e0:	1a0021ed 	.word	0x1a0021ed
1a0021e4:	1a002185 	.word	0x1a002185
1a0021e8:	1a002235 	.word	0x1a002235
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0021ec:	9905      	ldr	r1, [sp, #20]
1a0021ee:	69a5      	ldr	r5, [r4, #24]
1a0021f0:	460b      	mov	r3, r1
1a0021f2:	4602      	mov	r2, r0
1a0021f4:	4429      	add	r1, r5
1a0021f6:	4620      	mov	r0, r4
1a0021f8:	f7ff fdf8 	bl	1a001dec <prvInsertTimerInActiveList>
1a0021fc:	2800      	cmp	r0, #0
1a0021fe:	d0c1      	beq.n	1a002184 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002200:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002202:	4620      	mov	r0, r4
1a002204:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002206:	69e3      	ldr	r3, [r4, #28]
1a002208:	2b01      	cmp	r3, #1
1a00220a:	d1bb      	bne.n	1a002184 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a00220c:	69a2      	ldr	r2, [r4, #24]
1a00220e:	2100      	movs	r1, #0
1a002210:	9100      	str	r1, [sp, #0]
1a002212:	460b      	mov	r3, r1
1a002214:	9805      	ldr	r0, [sp, #20]
1a002216:	4402      	add	r2, r0
1a002218:	4620      	mov	r0, r4
1a00221a:	f7ff febb 	bl	1a001f94 <xTimerGenericCommand>
							configASSERT( xResult );
1a00221e:	2800      	cmp	r0, #0
1a002220:	d1b0      	bne.n	1a002184 <prvProcessReceivedCommands+0xc>
1a002222:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002226:	f383 8811 	msr	BASEPRI, r3
1a00222a:	f3bf 8f6f 	isb	sy
1a00222e:	f3bf 8f4f 	dsb	sy
1a002232:	e7fe      	b.n	1a002232 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002234:	9905      	ldr	r1, [sp, #20]
1a002236:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002238:	b131      	cbz	r1, 1a002248 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00223a:	4603      	mov	r3, r0
1a00223c:	4602      	mov	r2, r0
1a00223e:	4401      	add	r1, r0
1a002240:	4620      	mov	r0, r4
1a002242:	f7ff fdd3 	bl	1a001dec <prvInsertTimerInActiveList>
					break;
1a002246:	e79d      	b.n	1a002184 <prvProcessReceivedCommands+0xc>
1a002248:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00224c:	f383 8811 	msr	BASEPRI, r3
1a002250:	f3bf 8f6f 	isb	sy
1a002254:	f3bf 8f4f 	dsb	sy
1a002258:	e7fe      	b.n	1a002258 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a00225a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a00225e:	2b00      	cmp	r3, #0
1a002260:	d190      	bne.n	1a002184 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002262:	4620      	mov	r0, r4
1a002264:	f7fe fac6 	bl	1a0007f4 <vPortFree>
1a002268:	e78c      	b.n	1a002184 <prvProcessReceivedCommands+0xc>
}
1a00226a:	b009      	add	sp, #36	; 0x24
1a00226c:	bd30      	pop	{r4, r5, pc}
1a00226e:	bf00      	nop
1a002270:	10002adc 	.word	0x10002adc

1a002274 <prvTimerTask>:
{
1a002274:	b500      	push	{lr}
1a002276:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002278:	a801      	add	r0, sp, #4
1a00227a:	f7ff fda7 	bl	1a001dcc <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00227e:	9901      	ldr	r1, [sp, #4]
1a002280:	f7ff ff40 	bl	1a002104 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002284:	f7ff ff78 	bl	1a002178 <prvProcessReceivedCommands>
1a002288:	e7f6      	b.n	1a002278 <prvTimerTask+0x4>
1a00228a:	Address 0x000000001a00228a is out of bounds.


1a00228c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a00228c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a00228e:	2300      	movs	r3, #0
1a002290:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002292:	4b0d      	ldr	r3, [pc, #52]	; (1a0022c8 <prvTaskExitError+0x3c>)
1a002294:	681b      	ldr	r3, [r3, #0]
1a002296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00229a:	d008      	beq.n	1a0022ae <prvTaskExitError+0x22>
1a00229c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022a0:	f383 8811 	msr	BASEPRI, r3
1a0022a4:	f3bf 8f6f 	isb	sy
1a0022a8:	f3bf 8f4f 	dsb	sy
1a0022ac:	e7fe      	b.n	1a0022ac <prvTaskExitError+0x20>
1a0022ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022b2:	f383 8811 	msr	BASEPRI, r3
1a0022b6:	f3bf 8f6f 	isb	sy
1a0022ba:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0022be:	9b01      	ldr	r3, [sp, #4]
1a0022c0:	2b00      	cmp	r3, #0
1a0022c2:	d0fc      	beq.n	1a0022be <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0022c4:	b002      	add	sp, #8
1a0022c6:	4770      	bx	lr
1a0022c8:	10000000 	.word	0x10000000

1a0022cc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0022cc:	4808      	ldr	r0, [pc, #32]	; (1a0022f0 <prvPortStartFirstTask+0x24>)
1a0022ce:	6800      	ldr	r0, [r0, #0]
1a0022d0:	6800      	ldr	r0, [r0, #0]
1a0022d2:	f380 8808 	msr	MSP, r0
1a0022d6:	f04f 0000 	mov.w	r0, #0
1a0022da:	f380 8814 	msr	CONTROL, r0
1a0022de:	b662      	cpsie	i
1a0022e0:	b661      	cpsie	f
1a0022e2:	f3bf 8f4f 	dsb	sy
1a0022e6:	f3bf 8f6f 	isb	sy
1a0022ea:	df00      	svc	0
1a0022ec:	bf00      	nop
1a0022ee:	0000      	.short	0x0000
1a0022f0:	e000ed08 	.word	0xe000ed08

1a0022f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0022f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002304 <vPortEnableVFP+0x10>
1a0022f8:	6801      	ldr	r1, [r0, #0]
1a0022fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0022fe:	6001      	str	r1, [r0, #0]
1a002300:	4770      	bx	lr
1a002302:	0000      	.short	0x0000
1a002304:	e000ed88 	.word	0xe000ed88

1a002308 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a00230c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002310:	f021 0101 	bic.w	r1, r1, #1
1a002314:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002318:	4b05      	ldr	r3, [pc, #20]	; (1a002330 <pxPortInitialiseStack+0x28>)
1a00231a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a00231e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002322:	f06f 0302 	mvn.w	r3, #2
1a002326:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00232a:	3844      	subs	r0, #68	; 0x44
1a00232c:	4770      	bx	lr
1a00232e:	bf00      	nop
1a002330:	1a00228d 	.word	0x1a00228d
1a002334:	ffffffff 	.word	0xffffffff
1a002338:	ffffffff 	.word	0xffffffff
1a00233c:	ffffffff 	.word	0xffffffff

1a002340 <SVC_Handler>:
	__asm volatile (
1a002340:	4b07      	ldr	r3, [pc, #28]	; (1a002360 <pxCurrentTCBConst2>)
1a002342:	6819      	ldr	r1, [r3, #0]
1a002344:	6808      	ldr	r0, [r1, #0]
1a002346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00234a:	f380 8809 	msr	PSP, r0
1a00234e:	f3bf 8f6f 	isb	sy
1a002352:	f04f 0000 	mov.w	r0, #0
1a002356:	f380 8811 	msr	BASEPRI, r0
1a00235a:	4770      	bx	lr
1a00235c:	f3af 8000 	nop.w

1a002360 <pxCurrentTCBConst2>:
1a002360:	10002890 	.word	0x10002890

1a002364 <vPortEnterCritical>:
1a002364:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002368:	f383 8811 	msr	BASEPRI, r3
1a00236c:	f3bf 8f6f 	isb	sy
1a002370:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002374:	4a0a      	ldr	r2, [pc, #40]	; (1a0023a0 <vPortEnterCritical+0x3c>)
1a002376:	6813      	ldr	r3, [r2, #0]
1a002378:	3301      	adds	r3, #1
1a00237a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00237c:	2b01      	cmp	r3, #1
1a00237e:	d000      	beq.n	1a002382 <vPortEnterCritical+0x1e>
}
1a002380:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002382:	4b08      	ldr	r3, [pc, #32]	; (1a0023a4 <vPortEnterCritical+0x40>)
1a002384:	681b      	ldr	r3, [r3, #0]
1a002386:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00238a:	d0f9      	beq.n	1a002380 <vPortEnterCritical+0x1c>
1a00238c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002390:	f383 8811 	msr	BASEPRI, r3
1a002394:	f3bf 8f6f 	isb	sy
1a002398:	f3bf 8f4f 	dsb	sy
1a00239c:	e7fe      	b.n	1a00239c <vPortEnterCritical+0x38>
1a00239e:	bf00      	nop
1a0023a0:	10000000 	.word	0x10000000
1a0023a4:	e000ed04 	.word	0xe000ed04

1a0023a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a0023a8:	4b09      	ldr	r3, [pc, #36]	; (1a0023d0 <vPortExitCritical+0x28>)
1a0023aa:	681b      	ldr	r3, [r3, #0]
1a0023ac:	b943      	cbnz	r3, 1a0023c0 <vPortExitCritical+0x18>
1a0023ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023b2:	f383 8811 	msr	BASEPRI, r3
1a0023b6:	f3bf 8f6f 	isb	sy
1a0023ba:	f3bf 8f4f 	dsb	sy
1a0023be:	e7fe      	b.n	1a0023be <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0023c0:	3b01      	subs	r3, #1
1a0023c2:	4a03      	ldr	r2, [pc, #12]	; (1a0023d0 <vPortExitCritical+0x28>)
1a0023c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0023c6:	b90b      	cbnz	r3, 1a0023cc <vPortExitCritical+0x24>
	__asm volatile
1a0023c8:	f383 8811 	msr	BASEPRI, r3
}
1a0023cc:	4770      	bx	lr
1a0023ce:	bf00      	nop
1a0023d0:	10000000 	.word	0x10000000
1a0023d4:	ffffffff 	.word	0xffffffff
1a0023d8:	ffffffff 	.word	0xffffffff
1a0023dc:	ffffffff 	.word	0xffffffff

1a0023e0 <PendSV_Handler>:
	__asm volatile
1a0023e0:	f3ef 8009 	mrs	r0, PSP
1a0023e4:	f3bf 8f6f 	isb	sy
1a0023e8:	4b15      	ldr	r3, [pc, #84]	; (1a002440 <pxCurrentTCBConst>)
1a0023ea:	681a      	ldr	r2, [r3, #0]
1a0023ec:	f01e 0f10 	tst.w	lr, #16
1a0023f0:	bf08      	it	eq
1a0023f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0023f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0023fa:	6010      	str	r0, [r2, #0]
1a0023fc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002400:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002404:	f380 8811 	msr	BASEPRI, r0
1a002408:	f3bf 8f4f 	dsb	sy
1a00240c:	f3bf 8f6f 	isb	sy
1a002410:	f7ff fa7a 	bl	1a001908 <vTaskSwitchContext>
1a002414:	f04f 0000 	mov.w	r0, #0
1a002418:	f380 8811 	msr	BASEPRI, r0
1a00241c:	bc09      	pop	{r0, r3}
1a00241e:	6819      	ldr	r1, [r3, #0]
1a002420:	6808      	ldr	r0, [r1, #0]
1a002422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002426:	f01e 0f10 	tst.w	lr, #16
1a00242a:	bf08      	it	eq
1a00242c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002430:	f380 8809 	msr	PSP, r0
1a002434:	f3bf 8f6f 	isb	sy
1a002438:	4770      	bx	lr
1a00243a:	bf00      	nop
1a00243c:	f3af 8000 	nop.w

1a002440 <pxCurrentTCBConst>:
1a002440:	10002890 	.word	0x10002890

1a002444 <SysTick_Handler>:
{
1a002444:	b508      	push	{r3, lr}
	__asm volatile
1a002446:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00244a:	f383 8811 	msr	BASEPRI, r3
1a00244e:	f3bf 8f6f 	isb	sy
1a002452:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002456:	f7ff f8ff 	bl	1a001658 <xTaskIncrementTick>
1a00245a:	b118      	cbz	r0, 1a002464 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00245c:	4b03      	ldr	r3, [pc, #12]	; (1a00246c <SysTick_Handler+0x28>)
1a00245e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002462:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002464:	2300      	movs	r3, #0
1a002466:	f383 8811 	msr	BASEPRI, r3
}
1a00246a:	bd08      	pop	{r3, pc}
1a00246c:	e000ed04 	.word	0xe000ed04

1a002470 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002470:	4a08      	ldr	r2, [pc, #32]	; (1a002494 <vPortSetupTimerInterrupt+0x24>)
1a002472:	2300      	movs	r3, #0
1a002474:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002476:	4908      	ldr	r1, [pc, #32]	; (1a002498 <vPortSetupTimerInterrupt+0x28>)
1a002478:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00247a:	4b08      	ldr	r3, [pc, #32]	; (1a00249c <vPortSetupTimerInterrupt+0x2c>)
1a00247c:	681b      	ldr	r3, [r3, #0]
1a00247e:	4908      	ldr	r1, [pc, #32]	; (1a0024a0 <vPortSetupTimerInterrupt+0x30>)
1a002480:	fba1 1303 	umull	r1, r3, r1, r3
1a002484:	099b      	lsrs	r3, r3, #6
1a002486:	3b01      	subs	r3, #1
1a002488:	4906      	ldr	r1, [pc, #24]	; (1a0024a4 <vPortSetupTimerInterrupt+0x34>)
1a00248a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00248c:	2307      	movs	r3, #7
1a00248e:	6013      	str	r3, [r2, #0]
}
1a002490:	4770      	bx	lr
1a002492:	bf00      	nop
1a002494:	e000e010 	.word	0xe000e010
1a002498:	e000e018 	.word	0xe000e018
1a00249c:	10002b84 	.word	0x10002b84
1a0024a0:	10624dd3 	.word	0x10624dd3
1a0024a4:	e000e014 	.word	0xe000e014

1a0024a8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0024a8:	4b3a      	ldr	r3, [pc, #232]	; (1a002594 <xPortStartScheduler+0xec>)
1a0024aa:	681a      	ldr	r2, [r3, #0]
1a0024ac:	4b3a      	ldr	r3, [pc, #232]	; (1a002598 <xPortStartScheduler+0xf0>)
1a0024ae:	429a      	cmp	r2, r3
1a0024b0:	d00d      	beq.n	1a0024ce <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0024b2:	4b38      	ldr	r3, [pc, #224]	; (1a002594 <xPortStartScheduler+0xec>)
1a0024b4:	681a      	ldr	r2, [r3, #0]
1a0024b6:	4b39      	ldr	r3, [pc, #228]	; (1a00259c <xPortStartScheduler+0xf4>)
1a0024b8:	429a      	cmp	r2, r3
1a0024ba:	d111      	bne.n	1a0024e0 <xPortStartScheduler+0x38>
	__asm volatile
1a0024bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024c0:	f383 8811 	msr	BASEPRI, r3
1a0024c4:	f3bf 8f6f 	isb	sy
1a0024c8:	f3bf 8f4f 	dsb	sy
1a0024cc:	e7fe      	b.n	1a0024cc <xPortStartScheduler+0x24>
1a0024ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024d2:	f383 8811 	msr	BASEPRI, r3
1a0024d6:	f3bf 8f6f 	isb	sy
1a0024da:	f3bf 8f4f 	dsb	sy
1a0024de:	e7fe      	b.n	1a0024de <xPortStartScheduler+0x36>
{
1a0024e0:	b510      	push	{r4, lr}
1a0024e2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0024e4:	4b2e      	ldr	r3, [pc, #184]	; (1a0025a0 <xPortStartScheduler+0xf8>)
1a0024e6:	781a      	ldrb	r2, [r3, #0]
1a0024e8:	b2d2      	uxtb	r2, r2
1a0024ea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0024ec:	22ff      	movs	r2, #255	; 0xff
1a0024ee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0024f0:	781b      	ldrb	r3, [r3, #0]
1a0024f2:	b2db      	uxtb	r3, r3
1a0024f4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0024f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0024fc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002500:	4a28      	ldr	r2, [pc, #160]	; (1a0025a4 <xPortStartScheduler+0xfc>)
1a002502:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002504:	4b28      	ldr	r3, [pc, #160]	; (1a0025a8 <xPortStartScheduler+0x100>)
1a002506:	2207      	movs	r2, #7
1a002508:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00250a:	e009      	b.n	1a002520 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00250c:	4a26      	ldr	r2, [pc, #152]	; (1a0025a8 <xPortStartScheduler+0x100>)
1a00250e:	6813      	ldr	r3, [r2, #0]
1a002510:	3b01      	subs	r3, #1
1a002512:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002514:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002518:	005b      	lsls	r3, r3, #1
1a00251a:	b2db      	uxtb	r3, r3
1a00251c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002520:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002524:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002528:	d1f0      	bne.n	1a00250c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00252a:	4b1f      	ldr	r3, [pc, #124]	; (1a0025a8 <xPortStartScheduler+0x100>)
1a00252c:	681b      	ldr	r3, [r3, #0]
1a00252e:	2b04      	cmp	r3, #4
1a002530:	d008      	beq.n	1a002544 <xPortStartScheduler+0x9c>
1a002532:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002536:	f383 8811 	msr	BASEPRI, r3
1a00253a:	f3bf 8f6f 	isb	sy
1a00253e:	f3bf 8f4f 	dsb	sy
1a002542:	e7fe      	b.n	1a002542 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002544:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00254a:	4a17      	ldr	r2, [pc, #92]	; (1a0025a8 <xPortStartScheduler+0x100>)
1a00254c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00254e:	9b01      	ldr	r3, [sp, #4]
1a002550:	b2db      	uxtb	r3, r3
1a002552:	4a13      	ldr	r2, [pc, #76]	; (1a0025a0 <xPortStartScheduler+0xf8>)
1a002554:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002556:	4b15      	ldr	r3, [pc, #84]	; (1a0025ac <xPortStartScheduler+0x104>)
1a002558:	681a      	ldr	r2, [r3, #0]
1a00255a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00255e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002560:	681a      	ldr	r2, [r3, #0]
1a002562:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002566:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002568:	f7ff ff82 	bl	1a002470 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00256c:	2400      	movs	r4, #0
1a00256e:	4b10      	ldr	r3, [pc, #64]	; (1a0025b0 <xPortStartScheduler+0x108>)
1a002570:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002572:	f7ff febf 	bl	1a0022f4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002576:	4a0f      	ldr	r2, [pc, #60]	; (1a0025b4 <xPortStartScheduler+0x10c>)
1a002578:	6813      	ldr	r3, [r2, #0]
1a00257a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00257e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002580:	f7ff fea4 	bl	1a0022cc <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002584:	f7ff f9c0 	bl	1a001908 <vTaskSwitchContext>
	prvTaskExitError();
1a002588:	f7ff fe80 	bl	1a00228c <prvTaskExitError>
}
1a00258c:	4620      	mov	r0, r4
1a00258e:	b002      	add	sp, #8
1a002590:	bd10      	pop	{r4, pc}
1a002592:	bf00      	nop
1a002594:	e000ed00 	.word	0xe000ed00
1a002598:	410fc271 	.word	0x410fc271
1a00259c:	410fc270 	.word	0x410fc270
1a0025a0:	e000e400 	.word	0xe000e400
1a0025a4:	10002ae4 	.word	0x10002ae4
1a0025a8:	10002ae8 	.word	0x10002ae8
1a0025ac:	e000ed20 	.word	0xe000ed20
1a0025b0:	10000000 	.word	0x10000000
1a0025b4:	e000ef34 	.word	0xe000ef34

1a0025b8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0025b8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0025bc:	2b0f      	cmp	r3, #15
1a0025be:	d90f      	bls.n	1a0025e0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a0025c0:	4a10      	ldr	r2, [pc, #64]	; (1a002604 <vPortValidateInterruptPriority+0x4c>)
1a0025c2:	5c9b      	ldrb	r3, [r3, r2]
1a0025c4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a0025c6:	4a10      	ldr	r2, [pc, #64]	; (1a002608 <vPortValidateInterruptPriority+0x50>)
1a0025c8:	7812      	ldrb	r2, [r2, #0]
1a0025ca:	429a      	cmp	r2, r3
1a0025cc:	d908      	bls.n	1a0025e0 <vPortValidateInterruptPriority+0x28>
1a0025ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025d2:	f383 8811 	msr	BASEPRI, r3
1a0025d6:	f3bf 8f6f 	isb	sy
1a0025da:	f3bf 8f4f 	dsb	sy
1a0025de:	e7fe      	b.n	1a0025de <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0025e0:	4b0a      	ldr	r3, [pc, #40]	; (1a00260c <vPortValidateInterruptPriority+0x54>)
1a0025e2:	681b      	ldr	r3, [r3, #0]
1a0025e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0025e8:	4a09      	ldr	r2, [pc, #36]	; (1a002610 <vPortValidateInterruptPriority+0x58>)
1a0025ea:	6812      	ldr	r2, [r2, #0]
1a0025ec:	4293      	cmp	r3, r2
1a0025ee:	d908      	bls.n	1a002602 <vPortValidateInterruptPriority+0x4a>
1a0025f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025f4:	f383 8811 	msr	BASEPRI, r3
1a0025f8:	f3bf 8f6f 	isb	sy
1a0025fc:	f3bf 8f4f 	dsb	sy
1a002600:	e7fe      	b.n	1a002600 <vPortValidateInterruptPriority+0x48>
	}
1a002602:	4770      	bx	lr
1a002604:	e000e3f0 	.word	0xe000e3f0
1a002608:	10002ae4 	.word	0x10002ae4
1a00260c:	e000ed0c 	.word	0xe000ed0c
1a002610:	10002ae8 	.word	0x10002ae8

1a002614 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002614:	2200      	movs	r2, #0
1a002616:	2a05      	cmp	r2, #5
1a002618:	d819      	bhi.n	1a00264e <Board_LED_Init+0x3a>
{
1a00261a:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00261c:	490c      	ldr	r1, [pc, #48]	; (1a002650 <Board_LED_Init+0x3c>)
1a00261e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002622:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002626:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002628:	4b0a      	ldr	r3, [pc, #40]	; (1a002654 <Board_LED_Init+0x40>)
1a00262a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00262e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002632:	2001      	movs	r0, #1
1a002634:	40a0      	lsls	r0, r4
1a002636:	4301      	orrs	r1, r0
1a002638:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00263c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002640:	2100      	movs	r1, #0
1a002642:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002644:	3201      	adds	r2, #1
1a002646:	2a05      	cmp	r2, #5
1a002648:	d9e8      	bls.n	1a00261c <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a00264a:	bc70      	pop	{r4, r5, r6}
1a00264c:	4770      	bx	lr
1a00264e:	4770      	bx	lr
1a002650:	1a0045ec 	.word	0x1a0045ec
1a002654:	400f4000 	.word	0x400f4000

1a002658 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002658:	2300      	movs	r3, #0
1a00265a:	2b03      	cmp	r3, #3
1a00265c:	d816      	bhi.n	1a00268c <Board_TEC_Init+0x34>
{
1a00265e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002660:	490b      	ldr	r1, [pc, #44]	; (1a002690 <Board_TEC_Init+0x38>)
1a002662:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002666:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00266a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00266c:	4c09      	ldr	r4, [pc, #36]	; (1a002694 <Board_TEC_Init+0x3c>)
1a00266e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002672:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002676:	2001      	movs	r0, #1
1a002678:	40a8      	lsls	r0, r5
1a00267a:	ea21 0100 	bic.w	r1, r1, r0
1a00267e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002682:	3301      	adds	r3, #1
1a002684:	2b03      	cmp	r3, #3
1a002686:	d9eb      	bls.n	1a002660 <Board_TEC_Init+0x8>
    }
}
1a002688:	bc30      	pop	{r4, r5}
1a00268a:	4770      	bx	lr
1a00268c:	4770      	bx	lr
1a00268e:	bf00      	nop
1a002690:	1a0045e4 	.word	0x1a0045e4
1a002694:	400f4000 	.word	0x400f4000

1a002698 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002698:	2300      	movs	r3, #0
1a00269a:	2b08      	cmp	r3, #8
1a00269c:	d816      	bhi.n	1a0026cc <Board_GPIO_Init+0x34>
{
1a00269e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0026a0:	490b      	ldr	r1, [pc, #44]	; (1a0026d0 <Board_GPIO_Init+0x38>)
1a0026a2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0026a6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0026aa:	784d      	ldrb	r5, [r1, #1]
1a0026ac:	4c09      	ldr	r4, [pc, #36]	; (1a0026d4 <Board_GPIO_Init+0x3c>)
1a0026ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0026b2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0026b6:	2001      	movs	r0, #1
1a0026b8:	40a8      	lsls	r0, r5
1a0026ba:	ea21 0100 	bic.w	r1, r1, r0
1a0026be:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0026c2:	3301      	adds	r3, #1
1a0026c4:	2b08      	cmp	r3, #8
1a0026c6:	d9eb      	bls.n	1a0026a0 <Board_GPIO_Init+0x8>
    }
}
1a0026c8:	bc30      	pop	{r4, r5}
1a0026ca:	4770      	bx	lr
1a0026cc:	4770      	bx	lr
1a0026ce:	bf00      	nop
1a0026d0:	1a0045f8 	.word	0x1a0045f8
1a0026d4:	400f4000 	.word	0x400f4000

1a0026d8 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0026d8:	b510      	push	{r4, lr}
1a0026da:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a0026dc:	4c08      	ldr	r4, [pc, #32]	; (1a002700 <Board_ADC_Init+0x28>)
1a0026de:	4669      	mov	r1, sp
1a0026e0:	4620      	mov	r0, r4
1a0026e2:	f000 f9dd 	bl	1a002aa0 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0026e6:	4a07      	ldr	r2, [pc, #28]	; (1a002704 <Board_ADC_Init+0x2c>)
1a0026e8:	4669      	mov	r1, sp
1a0026ea:	4620      	mov	r0, r4
1a0026ec:	f000 f9f8 	bl	1a002ae0 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0026f0:	2200      	movs	r2, #0
1a0026f2:	4669      	mov	r1, sp
1a0026f4:	4620      	mov	r0, r4
1a0026f6:	f000 fa0c 	bl	1a002b12 <Chip_ADC_SetResolution>
}
1a0026fa:	b002      	add	sp, #8
1a0026fc:	bd10      	pop	{r4, pc}
1a0026fe:	bf00      	nop
1a002700:	400e3000 	.word	0x400e3000
1a002704:	00061a80 	.word	0x00061a80

1a002708 <Board_SPI_Init>:
{
1a002708:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a00270a:	4c0b      	ldr	r4, [pc, #44]	; (1a002738 <Board_SPI_Init+0x30>)
1a00270c:	4620      	mov	r0, r4
1a00270e:	f000 fdc3 	bl	1a003298 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002712:	6863      	ldr	r3, [r4, #4]
1a002714:	f023 0304 	bic.w	r3, r3, #4
1a002718:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00271a:	6823      	ldr	r3, [r4, #0]
1a00271c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002720:	f043 0307 	orr.w	r3, r3, #7
1a002724:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002726:	4905      	ldr	r1, [pc, #20]	; (1a00273c <Board_SPI_Init+0x34>)
1a002728:	4620      	mov	r0, r4
1a00272a:	f000 fd96 	bl	1a00325a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00272e:	6863      	ldr	r3, [r4, #4]
1a002730:	f043 0302 	orr.w	r3, r3, #2
1a002734:	6063      	str	r3, [r4, #4]
}
1a002736:	bd10      	pop	{r4, pc}
1a002738:	400c5000 	.word	0x400c5000
1a00273c:	000186a0 	.word	0x000186a0

1a002740 <Board_I2C_Init>:
{
1a002740:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a002742:	2000      	movs	r0, #0
1a002744:	f000 fdd4 	bl	1a0032f0 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002748:	4b04      	ldr	r3, [pc, #16]	; (1a00275c <Board_I2C_Init+0x1c>)
1a00274a:	f640 0208 	movw	r2, #2056	; 0x808
1a00274e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002752:	4903      	ldr	r1, [pc, #12]	; (1a002760 <Board_I2C_Init+0x20>)
1a002754:	2000      	movs	r0, #0
1a002756:	f000 fddd 	bl	1a003314 <Chip_I2C_SetClockRate>
}
1a00275a:	bd08      	pop	{r3, pc}
1a00275c:	40086000 	.word	0x40086000
1a002760:	000f4240 	.word	0x000f4240

1a002764 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002764:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002766:	4c07      	ldr	r4, [pc, #28]	; (1a002784 <Board_Debug_Init+0x20>)
1a002768:	4620      	mov	r0, r4
1a00276a:	f000 f8b7 	bl	1a0028dc <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00276e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002772:	4620      	mov	r0, r4
1a002774:	f000 f8fc 	bl	1a002970 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002778:	2303      	movs	r3, #3
1a00277a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00277c:	2301      	movs	r3, #1
1a00277e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a002780:	bd10      	pop	{r4, pc}
1a002782:	bf00      	nop
1a002784:	400c1000 	.word	0x400c1000

1a002788 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002788:	4b03      	ldr	r3, [pc, #12]	; (1a002798 <Board_UARTPutChar+0x10>)
1a00278a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00278c:	f013 0f20 	tst.w	r3, #32
1a002790:	d0fa      	beq.n	1a002788 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002792:	4b01      	ldr	r3, [pc, #4]	; (1a002798 <Board_UARTPutChar+0x10>)
1a002794:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002796:	4770      	bx	lr
1a002798:	400c1000 	.word	0x400c1000

1a00279c <Board_UARTGetChar>:
	return pUART->LSR;
1a00279c:	4b05      	ldr	r3, [pc, #20]	; (1a0027b4 <Board_UARTGetChar+0x18>)
1a00279e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0027a0:	f013 0f01 	tst.w	r3, #1
1a0027a4:	d003      	beq.n	1a0027ae <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0027a6:	4b03      	ldr	r3, [pc, #12]	; (1a0027b4 <Board_UARTGetChar+0x18>)
1a0027a8:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0027aa:	b2c0      	uxtb	r0, r0
1a0027ac:	4770      	bx	lr
    }
    return EOF;
1a0027ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0027b2:	4770      	bx	lr
1a0027b4:	400c1000 	.word	0x400c1000

1a0027b8 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0027b8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0027ba:	f7ff ffd3 	bl	1a002764 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0027be:	4808      	ldr	r0, [pc, #32]	; (1a0027e0 <Board_Init+0x28>)
1a0027c0:	f000 fc80 	bl	1a0030c4 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a0027c4:	f7ff ff68 	bl	1a002698 <Board_GPIO_Init>
   Board_ADC_Init();
1a0027c8:	f7ff ff86 	bl	1a0026d8 <Board_ADC_Init>
   Board_SPI_Init();
1a0027cc:	f7ff ff9c 	bl	1a002708 <Board_SPI_Init>
   Board_I2C_Init();
1a0027d0:	f7ff ffb6 	bl	1a002740 <Board_I2C_Init>

   Board_LED_Init();
1a0027d4:	f7ff ff1e 	bl	1a002614 <Board_LED_Init>
   Board_TEC_Init();
1a0027d8:	f7ff ff3e 	bl	1a002658 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a0027dc:	bd08      	pop	{r3, pc}
1a0027de:	bf00      	nop
1a0027e0:	400f4000 	.word	0x400f4000

1a0027e4 <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a0027e4:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0027e6:	b2c0      	uxtb	r0, r0
1a0027e8:	f7ff ffce 	bl	1a002788 <Board_UARTPutChar>
}
1a0027ec:	bd08      	pop	{r3, pc}

1a0027ee <__stdio_getchar>:

int __stdio_getchar() {
1a0027ee:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0027f0:	f7ff ffd4 	bl	1a00279c <Board_UARTGetChar>
}
1a0027f4:	bd08      	pop	{r3, pc}

1a0027f6 <__stdio_init>:

void __stdio_init() {
1a0027f6:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0027f8:	f7ff ffb4 	bl	1a002764 <Board_Debug_Init>
1a0027fc:	bd08      	pop	{r3, pc}
1a0027fe:	Address 0x000000001a0027fe is out of bounds.


1a002800 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002800:	2300      	movs	r3, #0
1a002802:	2b1c      	cmp	r3, #28
1a002804:	d812      	bhi.n	1a00282c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002806:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002808:	4a09      	ldr	r2, [pc, #36]	; (1a002830 <Board_SetupMuxing+0x30>)
1a00280a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00280e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002812:	784a      	ldrb	r2, [r1, #1]
1a002814:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002816:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00281a:	4906      	ldr	r1, [pc, #24]	; (1a002834 <Board_SetupMuxing+0x34>)
1a00281c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002820:	3301      	adds	r3, #1
1a002822:	2b1c      	cmp	r3, #28
1a002824:	d9f0      	bls.n	1a002808 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002826:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00282a:	4770      	bx	lr
1a00282c:	4770      	bx	lr
1a00282e:	bf00      	nop
1a002830:	1a004614 	.word	0x1a004614
1a002834:	40086000 	.word	0x40086000

1a002838 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002838:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00283a:	4a17      	ldr	r2, [pc, #92]	; (1a002898 <Board_SetupClocking+0x60>)
1a00283c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002844:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002848:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00284c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002854:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002858:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00285c:	2201      	movs	r2, #1
1a00285e:	490f      	ldr	r1, [pc, #60]	; (1a00289c <Board_SetupClocking+0x64>)
1a002860:	2006      	movs	r0, #6
1a002862:	f000 fc31 	bl	1a0030c8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002866:	2400      	movs	r4, #0
1a002868:	b14c      	cbz	r4, 1a00287e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00286a:	4b0b      	ldr	r3, [pc, #44]	; (1a002898 <Board_SetupClocking+0x60>)
1a00286c:	685a      	ldr	r2, [r3, #4]
1a00286e:	f022 020c 	bic.w	r2, r2, #12
1a002872:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002874:	685a      	ldr	r2, [r3, #4]
1a002876:	f042 0203 	orr.w	r2, r2, #3
1a00287a:	605a      	str	r2, [r3, #4]
}
1a00287c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00287e:	4808      	ldr	r0, [pc, #32]	; (1a0028a0 <Board_SetupClocking+0x68>)
1a002880:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002884:	2301      	movs	r3, #1
1a002886:	788a      	ldrb	r2, [r1, #2]
1a002888:	7849      	ldrb	r1, [r1, #1]
1a00288a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00288e:	f000 fb6b 	bl	1a002f68 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002892:	3401      	adds	r4, #1
1a002894:	e7e8      	b.n	1a002868 <Board_SetupClocking+0x30>
1a002896:	bf00      	nop
1a002898:	40043000 	.word	0x40043000
1a00289c:	0c28cb00 	.word	0x0c28cb00
1a0028a0:	1a004610 	.word	0x1a004610

1a0028a4 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0028a4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0028a6:	f7ff ffab 	bl	1a002800 <Board_SetupMuxing>
    Board_SetupClocking();
1a0028aa:	f7ff ffc5 	bl	1a002838 <Board_SetupClocking>
}
1a0028ae:	bd08      	pop	{r3, pc}

1a0028b0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0028b0:	4b09      	ldr	r3, [pc, #36]	; (1a0028d8 <Chip_UART_GetIndex+0x28>)
1a0028b2:	4298      	cmp	r0, r3
1a0028b4:	d009      	beq.n	1a0028ca <Chip_UART_GetIndex+0x1a>
1a0028b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0028ba:	4298      	cmp	r0, r3
1a0028bc:	d007      	beq.n	1a0028ce <Chip_UART_GetIndex+0x1e>
1a0028be:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0028c2:	4298      	cmp	r0, r3
1a0028c4:	d005      	beq.n	1a0028d2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0028c6:	2000      	movs	r0, #0
1a0028c8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0028ca:	2002      	movs	r0, #2
1a0028cc:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0028ce:	2003      	movs	r0, #3
1a0028d0:	4770      	bx	lr
			return 1;
1a0028d2:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0028d4:	4770      	bx	lr
1a0028d6:	bf00      	nop
1a0028d8:	400c1000 	.word	0x400c1000

1a0028dc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0028dc:	b530      	push	{r4, r5, lr}
1a0028de:	b083      	sub	sp, #12
1a0028e0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0028e2:	f7ff ffe5 	bl	1a0028b0 <Chip_UART_GetIndex>
1a0028e6:	2301      	movs	r3, #1
1a0028e8:	461a      	mov	r2, r3
1a0028ea:	4619      	mov	r1, r3
1a0028ec:	4d0e      	ldr	r5, [pc, #56]	; (1a002928 <Chip_UART_Init+0x4c>)
1a0028ee:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0028f2:	f000 fb7f 	bl	1a002ff4 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0028f6:	2307      	movs	r3, #7
1a0028f8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0028fa:	2300      	movs	r3, #0
1a0028fc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0028fe:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002900:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002902:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002904:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002906:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002908:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00290a:	4b08      	ldr	r3, [pc, #32]	; (1a00292c <Chip_UART_Init+0x50>)
1a00290c:	429c      	cmp	r4, r3
1a00290e:	d006      	beq.n	1a00291e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002910:	2303      	movs	r3, #3
1a002912:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002914:	2310      	movs	r3, #16
1a002916:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002918:	9b01      	ldr	r3, [sp, #4]
}
1a00291a:	b003      	add	sp, #12
1a00291c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00291e:	2300      	movs	r3, #0
1a002920:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002922:	69a3      	ldr	r3, [r4, #24]
1a002924:	9301      	str	r3, [sp, #4]
1a002926:	e7f3      	b.n	1a002910 <Chip_UART_Init+0x34>
1a002928:	1a004690 	.word	0x1a004690
1a00292c:	40082000 	.word	0x40082000

1a002930 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002930:	b538      	push	{r3, r4, r5, lr}
1a002932:	4605      	mov	r5, r0
1a002934:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002936:	f7ff ffbb 	bl	1a0028b0 <Chip_UART_GetIndex>
1a00293a:	4b0c      	ldr	r3, [pc, #48]	; (1a00296c <Chip_UART_SetBaud+0x3c>)
1a00293c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002940:	f000 fb90 	bl	1a003064 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002944:	0123      	lsls	r3, r4, #4
1a002946:	fbb0 f3f3 	udiv	r3, r0, r3
1a00294a:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00294c:	68ea      	ldr	r2, [r5, #12]
1a00294e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002952:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002954:	6029      	str	r1, [r5, #0]
1a002956:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a00295a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00295c:	68ea      	ldr	r2, [r5, #12]
1a00295e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002962:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002964:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002968:	0900      	lsrs	r0, r0, #4
1a00296a:	bd38      	pop	{r3, r4, r5, pc}
1a00296c:	1a004688 	.word	0x1a004688

1a002970 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002974:	b083      	sub	sp, #12
1a002976:	4683      	mov	fp, r0
1a002978:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00297a:	f7ff ff99 	bl	1a0028b0 <Chip_UART_GetIndex>
1a00297e:	4b35      	ldr	r3, [pc, #212]	; (1a002a54 <Chip_UART_SetBaudFDR+0xe4>)
1a002980:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002984:	f000 fb6e 	bl	1a003064 <Chip_Clock_GetRate>
1a002988:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00298a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00298e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002990:	2300      	movs	r3, #0
1a002992:	9301      	str	r3, [sp, #4]
1a002994:	46a2      	mov	sl, r4
1a002996:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002998:	e02a      	b.n	1a0029f0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00299a:	4242      	negs	r2, r0
				div ++;
1a00299c:	1c4b      	adds	r3, r1, #1
1a00299e:	e017      	b.n	1a0029d0 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0029a0:	b30a      	cbz	r2, 1a0029e6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0029a2:	4617      	mov	r7, r2
			sd = d;
1a0029a4:	9501      	str	r5, [sp, #4]
			sm = m;
1a0029a6:	46a2      	mov	sl, r4
			sdiv = div;
1a0029a8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0029aa:	3501      	adds	r5, #1
1a0029ac:	42ac      	cmp	r4, r5
1a0029ae:	d91e      	bls.n	1a0029ee <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0029b0:	0933      	lsrs	r3, r6, #4
1a0029b2:	0730      	lsls	r0, r6, #28
1a0029b4:	fba4 0100 	umull	r0, r1, r4, r0
1a0029b8:	fb04 1103 	mla	r1, r4, r3, r1
1a0029bc:	1962      	adds	r2, r4, r5
1a0029be:	fb08 f202 	mul.w	r2, r8, r2
1a0029c2:	2300      	movs	r3, #0
1a0029c4:	f000 ff70 	bl	1a0038a8 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0029c8:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0029ca:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0029cc:	2800      	cmp	r0, #0
1a0029ce:	dbe4      	blt.n	1a00299a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0029d0:	4297      	cmp	r7, r2
1a0029d2:	d3ea      	bcc.n	1a0029aa <Chip_UART_SetBaudFDR+0x3a>
1a0029d4:	2b00      	cmp	r3, #0
1a0029d6:	d0e8      	beq.n	1a0029aa <Chip_UART_SetBaudFDR+0x3a>
1a0029d8:	0c19      	lsrs	r1, r3, #16
1a0029da:	d1e6      	bne.n	1a0029aa <Chip_UART_SetBaudFDR+0x3a>
1a0029dc:	2b02      	cmp	r3, #2
1a0029de:	d8df      	bhi.n	1a0029a0 <Chip_UART_SetBaudFDR+0x30>
1a0029e0:	2d00      	cmp	r5, #0
1a0029e2:	d0dd      	beq.n	1a0029a0 <Chip_UART_SetBaudFDR+0x30>
1a0029e4:	e7e1      	b.n	1a0029aa <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0029e6:	4617      	mov	r7, r2
			sd = d;
1a0029e8:	9501      	str	r5, [sp, #4]
			sm = m;
1a0029ea:	46a2      	mov	sl, r4
			sdiv = div;
1a0029ec:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0029ee:	3401      	adds	r4, #1
1a0029f0:	b11f      	cbz	r7, 1a0029fa <Chip_UART_SetBaudFDR+0x8a>
1a0029f2:	2c0f      	cmp	r4, #15
1a0029f4:	d801      	bhi.n	1a0029fa <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0029f6:	2500      	movs	r5, #0
1a0029f8:	e7d8      	b.n	1a0029ac <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0029fa:	f1b9 0f00 	cmp.w	r9, #0
1a0029fe:	d024      	beq.n	1a002a4a <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002a00:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002a08:	f8cb 300c 	str.w	r3, [fp, #12]
1a002a0c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002a10:	f8cb 3000 	str.w	r3, [fp]
1a002a14:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002a18:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002a1c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002a24:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002a28:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002a2c:	b2db      	uxtb	r3, r3
1a002a2e:	9901      	ldr	r1, [sp, #4]
1a002a30:	f001 020f 	and.w	r2, r1, #15
1a002a34:	4313      	orrs	r3, r2
1a002a36:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002a3a:	0933      	lsrs	r3, r6, #4
1a002a3c:	fb0a f303 	mul.w	r3, sl, r3
1a002a40:	448a      	add	sl, r1
1a002a42:	fb09 f90a 	mul.w	r9, r9, sl
1a002a46:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002a4a:	4648      	mov	r0, r9
1a002a4c:	b003      	add	sp, #12
1a002a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002a52:	bf00      	nop
1a002a54:	1a004688 	.word	0x1a004688

1a002a58 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002a58:	4b03      	ldr	r3, [pc, #12]	; (1a002a68 <Chip_ADC_GetClockIndex+0x10>)
1a002a5a:	4298      	cmp	r0, r3
1a002a5c:	d001      	beq.n	1a002a62 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002a5e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002a60:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002a62:	2004      	movs	r0, #4
1a002a64:	4770      	bx	lr
1a002a66:	bf00      	nop
1a002a68:	400e4000 	.word	0x400e4000

1a002a6c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002a6c:	b570      	push	{r4, r5, r6, lr}
1a002a6e:	460d      	mov	r5, r1
1a002a70:	4614      	mov	r4, r2
1a002a72:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002a74:	f7ff fff0 	bl	1a002a58 <Chip_ADC_GetClockIndex>
1a002a78:	f000 faf4 	bl	1a003064 <Chip_Clock_GetRate>
	if (burstMode) {
1a002a7c:	b965      	cbnz	r5, 1a002a98 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002a7e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002a82:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002a86:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002a8a:	0064      	lsls	r4, r4, #1
1a002a8c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002a90:	b2c0      	uxtb	r0, r0
1a002a92:	3801      	subs	r0, #1
	return div;
}
1a002a94:	b2c0      	uxtb	r0, r0
1a002a96:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002a98:	fb04 f406 	mul.w	r4, r4, r6
1a002a9c:	e7f3      	b.n	1a002a86 <getClkDiv+0x1a>
1a002a9e:	Address 0x000000001a002a9e is out of bounds.


1a002aa0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002aa0:	b538      	push	{r3, r4, r5, lr}
1a002aa2:	4605      	mov	r5, r0
1a002aa4:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002aa6:	f7ff ffd7 	bl	1a002a58 <Chip_ADC_GetClockIndex>
1a002aaa:	2301      	movs	r3, #1
1a002aac:	461a      	mov	r2, r3
1a002aae:	4619      	mov	r1, r3
1a002ab0:	f000 faa0 	bl	1a002ff4 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002ab4:	2100      	movs	r1, #0
1a002ab6:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002ab8:	4a08      	ldr	r2, [pc, #32]	; (1a002adc <Chip_ADC_Init+0x3c>)
1a002aba:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002abc:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002abe:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002ac0:	230b      	movs	r3, #11
1a002ac2:	4628      	mov	r0, r5
1a002ac4:	f7ff ffd2 	bl	1a002a6c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002ac8:	0200      	lsls	r0, r0, #8
1a002aca:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002ace:	7920      	ldrb	r0, [r4, #4]
1a002ad0:	0440      	lsls	r0, r0, #17
1a002ad2:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002ad6:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002ad8:	6028      	str	r0, [r5, #0]
}
1a002ada:	bd38      	pop	{r3, r4, r5, pc}
1a002adc:	00061a80 	.word	0x00061a80

1a002ae0 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002ae0:	b570      	push	{r4, r5, r6, lr}
1a002ae2:	4605      	mov	r5, r0
1a002ae4:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002ae6:	6804      	ldr	r4, [r0, #0]
1a002ae8:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002aec:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002af0:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002af2:	790b      	ldrb	r3, [r1, #4]
1a002af4:	f1c3 030b 	rsb	r3, r3, #11
1a002af8:	b2db      	uxtb	r3, r3
1a002afa:	7949      	ldrb	r1, [r1, #5]
1a002afc:	f7ff ffb6 	bl	1a002a6c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002b00:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002b04:	7930      	ldrb	r0, [r6, #4]
1a002b06:	0440      	lsls	r0, r0, #17
1a002b08:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002b0c:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a002b0e:	6028      	str	r0, [r5, #0]
}
1a002b10:	bd70      	pop	{r4, r5, r6, pc}

1a002b12 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002b12:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002b14:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002b16:	680a      	ldr	r2, [r1, #0]
1a002b18:	f7ff ffe2 	bl	1a002ae0 <Chip_ADC_SetSampleRate>
}
1a002b1c:	bd08      	pop	{r3, pc}
1a002b1e:	Address 0x000000001a002b1e is out of bounds.


1a002b20 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002b20:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002b22:	680b      	ldr	r3, [r1, #0]
1a002b24:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002b28:	d002      	beq.n	1a002b30 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002b2e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002b30:	4607      	mov	r7, r0
1a002b32:	2501      	movs	r5, #1
1a002b34:	e03b      	b.n	1a002bae <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002b36:	694b      	ldr	r3, [r1, #20]
1a002b38:	fb03 f302 	mul.w	r3, r3, r2
1a002b3c:	fbb3 f3f5 	udiv	r3, r3, r5
1a002b40:	e014      	b.n	1a002b6c <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002b42:	461c      	mov	r4, r3
1a002b44:	e020      	b.n	1a002b88 <pll_calc_divs+0x68>
		return -val;
1a002b46:	f1cc 0c00 	rsb	ip, ip, #0
1a002b4a:	e020      	b.n	1a002b8e <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002b4c:	3201      	adds	r2, #1
1a002b4e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002b52:	dc26      	bgt.n	1a002ba2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002b54:	680c      	ldr	r4, [r1, #0]
1a002b56:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002b5a:	d0ec      	beq.n	1a002b36 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002b5c:	1c73      	adds	r3, r6, #1
1a002b5e:	fa02 fc03 	lsl.w	ip, r2, r3
1a002b62:	694b      	ldr	r3, [r1, #20]
1a002b64:	fb03 f30c 	mul.w	r3, r3, ip
1a002b68:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002b6c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a002bbc <pll_calc_divs+0x9c>
1a002b70:	4563      	cmp	r3, ip
1a002b72:	d9eb      	bls.n	1a002b4c <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002b74:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a002bc0 <pll_calc_divs+0xa0>
1a002b78:	4563      	cmp	r3, ip
1a002b7a:	d812      	bhi.n	1a002ba2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002b7c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002b80:	d1df      	bne.n	1a002b42 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a002b82:	1c74      	adds	r4, r6, #1
1a002b84:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a002b88:	ebb0 0c04 	subs.w	ip, r0, r4
1a002b8c:	d4db      	bmi.n	1a002b46 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a002b8e:	4567      	cmp	r7, ip
1a002b90:	d9dc      	bls.n	1a002b4c <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002b92:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002b94:	1c77      	adds	r7, r6, #1
1a002b96:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002b98:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002b9a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002b9c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002b9e:	4667      	mov	r7, ip
1a002ba0:	e7d4      	b.n	1a002b4c <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a002ba2:	3601      	adds	r6, #1
1a002ba4:	2e03      	cmp	r6, #3
1a002ba6:	dc01      	bgt.n	1a002bac <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a002ba8:	2201      	movs	r2, #1
1a002baa:	e7d0      	b.n	1a002b4e <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a002bac:	3501      	adds	r5, #1
1a002bae:	2d04      	cmp	r5, #4
1a002bb0:	dc01      	bgt.n	1a002bb6 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a002bb2:	2600      	movs	r6, #0
1a002bb4:	e7f6      	b.n	1a002ba4 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a002bb6:	bcf0      	pop	{r4, r5, r6, r7}
1a002bb8:	4770      	bx	lr
1a002bba:	bf00      	nop
1a002bbc:	094c5eff 	.word	0x094c5eff
1a002bc0:	1312d000 	.word	0x1312d000

1a002bc4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002bc6:	b099      	sub	sp, #100	; 0x64
1a002bc8:	4605      	mov	r5, r0
1a002bca:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002bcc:	225c      	movs	r2, #92	; 0x5c
1a002bce:	2100      	movs	r1, #0
1a002bd0:	a801      	add	r0, sp, #4
1a002bd2:	f001 f818 	bl	1a003c06 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002bd6:	2380      	movs	r3, #128	; 0x80
1a002bd8:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002bda:	6963      	ldr	r3, [r4, #20]
1a002bdc:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002bde:	7923      	ldrb	r3, [r4, #4]
1a002be0:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002be4:	4669      	mov	r1, sp
1a002be6:	4628      	mov	r0, r5
1a002be8:	f7ff ff9a 	bl	1a002b20 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002bec:	9b06      	ldr	r3, [sp, #24]
1a002bee:	42ab      	cmp	r3, r5
1a002bf0:	d027      	beq.n	1a002c42 <pll_get_frac+0x7e>
	if (val < 0)
1a002bf2:	1aeb      	subs	r3, r5, r3
1a002bf4:	d42e      	bmi.n	1a002c54 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002bf6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002bf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002bfe:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002c00:	6963      	ldr	r3, [r4, #20]
1a002c02:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002c04:	7923      	ldrb	r3, [r4, #4]
1a002c06:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002c0a:	a910      	add	r1, sp, #64	; 0x40
1a002c0c:	4628      	mov	r0, r5
1a002c0e:	f7ff ff87 	bl	1a002b20 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002c12:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002c14:	42ab      	cmp	r3, r5
1a002c16:	d01f      	beq.n	1a002c58 <pll_get_frac+0x94>
	if (val < 0)
1a002c18:	1aeb      	subs	r3, r5, r3
1a002c1a:	d425      	bmi.n	1a002c68 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002c1c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002c1e:	4b2b      	ldr	r3, [pc, #172]	; (1a002ccc <pll_get_frac+0x108>)
1a002c20:	429d      	cmp	r5, r3
1a002c22:	d923      	bls.n	1a002c6c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002c24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002c26:	1aed      	subs	r5, r5, r3
1a002c28:	d433      	bmi.n	1a002c92 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002c2a:	42ae      	cmp	r6, r5
1a002c2c:	dc3b      	bgt.n	1a002ca6 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002c2e:	42be      	cmp	r6, r7
1a002c30:	dc31      	bgt.n	1a002c96 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002c32:	466d      	mov	r5, sp
1a002c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c40:	e006      	b.n	1a002c50 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002c42:	466d      	mov	r5, sp
1a002c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002c50:	b019      	add	sp, #100	; 0x64
1a002c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002c54:	425b      	negs	r3, r3
1a002c56:	e7ce      	b.n	1a002bf6 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002c58:	ad10      	add	r5, sp, #64	; 0x40
1a002c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002c66:	e7f3      	b.n	1a002c50 <pll_get_frac+0x8c>
		return -val;
1a002c68:	425b      	negs	r3, r3
1a002c6a:	e7d7      	b.n	1a002c1c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002c6c:	2340      	movs	r3, #64	; 0x40
1a002c6e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002c70:	6963      	ldr	r3, [r4, #20]
1a002c72:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002c74:	a908      	add	r1, sp, #32
1a002c76:	4628      	mov	r0, r5
1a002c78:	f7ff ff52 	bl	1a002b20 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002c7e:	42ab      	cmp	r3, r5
1a002c80:	d1d0      	bne.n	1a002c24 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002c82:	ad08      	add	r5, sp, #32
1a002c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002c90:	e7de      	b.n	1a002c50 <pll_get_frac+0x8c>
		return -val;
1a002c92:	426d      	negs	r5, r5
1a002c94:	e7c9      	b.n	1a002c2a <pll_get_frac+0x66>
			*ppll = pll[2];
1a002c96:	ad10      	add	r5, sp, #64	; 0x40
1a002c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002ca4:	e7d4      	b.n	1a002c50 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002ca6:	42af      	cmp	r7, r5
1a002ca8:	db07      	blt.n	1a002cba <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002caa:	ad08      	add	r5, sp, #32
1a002cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002cb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002cb8:	e7ca      	b.n	1a002c50 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002cba:	ad10      	add	r5, sp, #64	; 0x40
1a002cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002cc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002cc8:	e7c2      	b.n	1a002c50 <pll_get_frac+0x8c>
1a002cca:	bf00      	nop
1a002ccc:	068e7780 	.word	0x068e7780

1a002cd0 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002cd0:	b430      	push	{r4, r5}
1a002cd2:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002cd4:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002cd6:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002cd8:	e000      	b.n	1a002cdc <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002cda:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002cdc:	281c      	cmp	r0, #28
1a002cde:	d118      	bne.n	1a002d12 <Chip_Clock_FindBaseClock+0x42>
1a002ce0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002ce4:	0051      	lsls	r1, r2, #1
1a002ce6:	4a0c      	ldr	r2, [pc, #48]	; (1a002d18 <Chip_Clock_FindBaseClock+0x48>)
1a002ce8:	440a      	add	r2, r1
1a002cea:	7914      	ldrb	r4, [r2, #4]
1a002cec:	4284      	cmp	r4, r0
1a002cee:	d010      	beq.n	1a002d12 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002cf0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002cf4:	004a      	lsls	r2, r1, #1
1a002cf6:	4908      	ldr	r1, [pc, #32]	; (1a002d18 <Chip_Clock_FindBaseClock+0x48>)
1a002cf8:	5a8a      	ldrh	r2, [r1, r2]
1a002cfa:	42aa      	cmp	r2, r5
1a002cfc:	d8ed      	bhi.n	1a002cda <Chip_Clock_FindBaseClock+0xa>
1a002cfe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002d02:	0051      	lsls	r1, r2, #1
1a002d04:	4a04      	ldr	r2, [pc, #16]	; (1a002d18 <Chip_Clock_FindBaseClock+0x48>)
1a002d06:	440a      	add	r2, r1
1a002d08:	8852      	ldrh	r2, [r2, #2]
1a002d0a:	42aa      	cmp	r2, r5
1a002d0c:	d3e5      	bcc.n	1a002cda <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002d0e:	4620      	mov	r0, r4
1a002d10:	e7e4      	b.n	1a002cdc <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002d12:	bc30      	pop	{r4, r5}
1a002d14:	4770      	bx	lr
1a002d16:	bf00      	nop
1a002d18:	1a0046a4 	.word	0x1a0046a4

1a002d1c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002d1c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002d22:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002d24:	4a0d      	ldr	r2, [pc, #52]	; (1a002d5c <Chip_Clock_EnableCrystal+0x40>)
1a002d26:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002d28:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002d2c:	6992      	ldr	r2, [r2, #24]
1a002d2e:	428a      	cmp	r2, r1
1a002d30:	d001      	beq.n	1a002d36 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002d32:	4a0a      	ldr	r2, [pc, #40]	; (1a002d5c <Chip_Clock_EnableCrystal+0x40>)
1a002d34:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002d36:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002d3a:	4a09      	ldr	r2, [pc, #36]	; (1a002d60 <Chip_Clock_EnableCrystal+0x44>)
1a002d3c:	6811      	ldr	r1, [r2, #0]
1a002d3e:	4a09      	ldr	r2, [pc, #36]	; (1a002d64 <Chip_Clock_EnableCrystal+0x48>)
1a002d40:	4291      	cmp	r1, r2
1a002d42:	d901      	bls.n	1a002d48 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002d44:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002d48:	4a04      	ldr	r2, [pc, #16]	; (1a002d5c <Chip_Clock_EnableCrystal+0x40>)
1a002d4a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002d4c:	9b01      	ldr	r3, [sp, #4]
1a002d4e:	1e5a      	subs	r2, r3, #1
1a002d50:	9201      	str	r2, [sp, #4]
1a002d52:	2b00      	cmp	r3, #0
1a002d54:	d1fa      	bne.n	1a002d4c <Chip_Clock_EnableCrystal+0x30>
}
1a002d56:	b002      	add	sp, #8
1a002d58:	4770      	bx	lr
1a002d5a:	bf00      	nop
1a002d5c:	40050000 	.word	0x40050000
1a002d60:	1a00460c 	.word	0x1a00460c
1a002d64:	01312cff 	.word	0x01312cff

1a002d68 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002d68:	3012      	adds	r0, #18
1a002d6a:	4b05      	ldr	r3, [pc, #20]	; (1a002d80 <Chip_Clock_GetDividerSource+0x18>)
1a002d6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002d70:	f010 0f01 	tst.w	r0, #1
1a002d74:	d102      	bne.n	1a002d7c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002d76:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002d7a:	4770      	bx	lr
		return CLKINPUT_PD;
1a002d7c:	2011      	movs	r0, #17
}
1a002d7e:	4770      	bx	lr
1a002d80:	40050000 	.word	0x40050000

1a002d84 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002d84:	f100 0212 	add.w	r2, r0, #18
1a002d88:	4b03      	ldr	r3, [pc, #12]	; (1a002d98 <Chip_Clock_GetDividerDivisor+0x14>)
1a002d8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002d8e:	4b03      	ldr	r3, [pc, #12]	; (1a002d9c <Chip_Clock_GetDividerDivisor+0x18>)
1a002d90:	5c18      	ldrb	r0, [r3, r0]
}
1a002d92:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002d96:	4770      	bx	lr
1a002d98:	40050000 	.word	0x40050000
1a002d9c:	1a00469c 	.word	0x1a00469c

1a002da0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002da0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002da2:	2810      	cmp	r0, #16
1a002da4:	d80a      	bhi.n	1a002dbc <Chip_Clock_GetClockInputHz+0x1c>
1a002da6:	e8df f000 	tbb	[pc, r0]
1a002daa:	0b42      	.short	0x0b42
1a002dac:	091f160d 	.word	0x091f160d
1a002db0:	2b282522 	.word	0x2b282522
1a002db4:	322e0909 	.word	0x322e0909
1a002db8:	3a36      	.short	0x3a36
1a002dba:	3e          	.byte	0x3e
1a002dbb:	00          	.byte	0x00
	uint32_t rate = 0;
1a002dbc:	2000      	movs	r0, #0
1a002dbe:	e038      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002dc0:	481e      	ldr	r0, [pc, #120]	; (1a002e3c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002dc2:	e036      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002dc4:	4b1e      	ldr	r3, [pc, #120]	; (1a002e40 <Chip_Clock_GetClockInputHz+0xa0>)
1a002dc6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002dca:	f003 0307 	and.w	r3, r3, #7
1a002dce:	2b04      	cmp	r3, #4
1a002dd0:	d130      	bne.n	1a002e34 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a002dd2:	2000      	movs	r0, #0
1a002dd4:	e02d      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002dd6:	4b1a      	ldr	r3, [pc, #104]	; (1a002e40 <Chip_Clock_GetClockInputHz+0xa0>)
1a002dd8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002ddc:	f003 0307 	and.w	r3, r3, #7
1a002de0:	2b04      	cmp	r3, #4
1a002de2:	d029      	beq.n	1a002e38 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002de4:	4817      	ldr	r0, [pc, #92]	; (1a002e44 <Chip_Clock_GetClockInputHz+0xa4>)
1a002de6:	e024      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002de8:	4b17      	ldr	r3, [pc, #92]	; (1a002e48 <Chip_Clock_GetClockInputHz+0xa8>)
1a002dea:	6818      	ldr	r0, [r3, #0]
		break;
1a002dec:	e021      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002dee:	4b17      	ldr	r3, [pc, #92]	; (1a002e4c <Chip_Clock_GetClockInputHz+0xac>)
1a002df0:	6818      	ldr	r0, [r3, #0]
		break;
1a002df2:	e01e      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002df4:	4b16      	ldr	r3, [pc, #88]	; (1a002e50 <Chip_Clock_GetClockInputHz+0xb0>)
1a002df6:	6818      	ldr	r0, [r3, #0]
		break;
1a002df8:	e01b      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002dfa:	4b15      	ldr	r3, [pc, #84]	; (1a002e50 <Chip_Clock_GetClockInputHz+0xb0>)
1a002dfc:	6858      	ldr	r0, [r3, #4]
		break;
1a002dfe:	e018      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002e00:	f000 f86a 	bl	1a002ed8 <Chip_Clock_GetMainPLLHz>
		break;
1a002e04:	e015      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002e06:	2100      	movs	r1, #0
1a002e08:	f000 f89c 	bl	1a002f44 <Chip_Clock_GetDivRate>
		break;
1a002e0c:	e011      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002e0e:	2101      	movs	r1, #1
1a002e10:	f000 f898 	bl	1a002f44 <Chip_Clock_GetDivRate>
		break;
1a002e14:	e00d      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002e16:	2102      	movs	r1, #2
1a002e18:	f000 f894 	bl	1a002f44 <Chip_Clock_GetDivRate>
		break;
1a002e1c:	e009      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002e1e:	2103      	movs	r1, #3
1a002e20:	f000 f890 	bl	1a002f44 <Chip_Clock_GetDivRate>
		break;
1a002e24:	e005      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002e26:	2104      	movs	r1, #4
1a002e28:	f000 f88c 	bl	1a002f44 <Chip_Clock_GetDivRate>
		break;
1a002e2c:	e001      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a002e2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002e32:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a002e34:	4803      	ldr	r0, [pc, #12]	; (1a002e44 <Chip_Clock_GetClockInputHz+0xa4>)
1a002e36:	e7fc      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a002e38:	4806      	ldr	r0, [pc, #24]	; (1a002e54 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002e3a:	e7fa      	b.n	1a002e32 <Chip_Clock_GetClockInputHz+0x92>
1a002e3c:	00b71b00 	.word	0x00b71b00
1a002e40:	40043000 	.word	0x40043000
1a002e44:	017d7840 	.word	0x017d7840
1a002e48:	1a0045e0 	.word	0x1a0045e0
1a002e4c:	1a00460c 	.word	0x1a00460c
1a002e50:	10002aec 	.word	0x10002aec
1a002e54:	02faf080 	.word	0x02faf080

1a002e58 <Chip_Clock_CalcMainPLLValue>:
{
1a002e58:	b538      	push	{r3, r4, r5, lr}
1a002e5a:	4605      	mov	r5, r0
1a002e5c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002e5e:	7908      	ldrb	r0, [r1, #4]
1a002e60:	f7ff ff9e 	bl	1a002da0 <Chip_Clock_GetClockInputHz>
1a002e64:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002e66:	4b19      	ldr	r3, [pc, #100]	; (1a002ecc <Chip_Clock_CalcMainPLLValue+0x74>)
1a002e68:	442b      	add	r3, r5
1a002e6a:	4a19      	ldr	r2, [pc, #100]	; (1a002ed0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002e6c:	4293      	cmp	r3, r2
1a002e6e:	d821      	bhi.n	1a002eb4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002e70:	b318      	cbz	r0, 1a002eba <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002e72:	2380      	movs	r3, #128	; 0x80
1a002e74:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002e76:	2300      	movs	r3, #0
1a002e78:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002e7a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002e7c:	fbb5 f3f0 	udiv	r3, r5, r0
1a002e80:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002e82:	4a14      	ldr	r2, [pc, #80]	; (1a002ed4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002e84:	4295      	cmp	r5, r2
1a002e86:	d903      	bls.n	1a002e90 <Chip_Clock_CalcMainPLLValue+0x38>
1a002e88:	fb03 f000 	mul.w	r0, r3, r0
1a002e8c:	42a8      	cmp	r0, r5
1a002e8e:	d007      	beq.n	1a002ea0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002e90:	4621      	mov	r1, r4
1a002e92:	4628      	mov	r0, r5
1a002e94:	f7ff fe96 	bl	1a002bc4 <pll_get_frac>
		if (!ppll->nsel) {
1a002e98:	68a3      	ldr	r3, [r4, #8]
1a002e9a:	b18b      	cbz	r3, 1a002ec0 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002e9c:	3b01      	subs	r3, #1
1a002e9e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002ea0:	6923      	ldr	r3, [r4, #16]
1a002ea2:	b183      	cbz	r3, 1a002ec6 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002ea4:	68e2      	ldr	r2, [r4, #12]
1a002ea6:	b10a      	cbz	r2, 1a002eac <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002ea8:	3a01      	subs	r2, #1
1a002eaa:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002eac:	3b01      	subs	r3, #1
1a002eae:	6123      	str	r3, [r4, #16]
	return 0;
1a002eb0:	2000      	movs	r0, #0
}
1a002eb2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002eb8:	e7fb      	b.n	1a002eb2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002ebe:	e7f8      	b.n	1a002eb2 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002ec4:	e7f5      	b.n	1a002eb2 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002eca:	e7f2      	b.n	1a002eb2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002ecc:	ff6b3a10 	.word	0xff6b3a10
1a002ed0:	0b940510 	.word	0x0b940510
1a002ed4:	094c5eff 	.word	0x094c5eff

1a002ed8 <Chip_Clock_GetMainPLLHz>:
{
1a002ed8:	b530      	push	{r4, r5, lr}
1a002eda:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002edc:	4d17      	ldr	r5, [pc, #92]	; (1a002f3c <Chip_Clock_GetMainPLLHz+0x64>)
1a002ede:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002ee0:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002ee4:	f7ff ff5c 	bl	1a002da0 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002ee8:	4b15      	ldr	r3, [pc, #84]	; (1a002f40 <Chip_Clock_GetMainPLLHz+0x68>)
1a002eea:	681b      	ldr	r3, [r3, #0]
1a002eec:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002eee:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002ef0:	f013 0f01 	tst.w	r3, #1
1a002ef4:	d01f      	beq.n	1a002f36 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a002ef6:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002efa:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002efe:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002f02:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002f06:	3301      	adds	r3, #1
	n = nsel + 1;
1a002f08:	3201      	adds	r2, #1
	p = ptab[psel];
1a002f0a:	f10d 0c08 	add.w	ip, sp, #8
1a002f0e:	4461      	add	r1, ip
1a002f10:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002f14:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002f18:	d108      	bne.n	1a002f2c <Chip_Clock_GetMainPLLHz+0x54>
1a002f1a:	b93d      	cbnz	r5, 1a002f2c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002f1c:	0049      	lsls	r1, r1, #1
1a002f1e:	fbb3 f3f1 	udiv	r3, r3, r1
1a002f22:	fbb0 f0f2 	udiv	r0, r0, r2
1a002f26:	fb00 f003 	mul.w	r0, r0, r3
1a002f2a:	e005      	b.n	1a002f38 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a002f2c:	fbb0 f0f2 	udiv	r0, r0, r2
1a002f30:	fb03 f000 	mul.w	r0, r3, r0
1a002f34:	e000      	b.n	1a002f38 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a002f36:	2000      	movs	r0, #0
}
1a002f38:	b003      	add	sp, #12
1a002f3a:	bd30      	pop	{r4, r5, pc}
1a002f3c:	40050000 	.word	0x40050000
1a002f40:	1a004698 	.word	0x1a004698

1a002f44 <Chip_Clock_GetDivRate>:
{
1a002f44:	b538      	push	{r3, r4, r5, lr}
1a002f46:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002f48:	4608      	mov	r0, r1
1a002f4a:	f7ff ff0d 	bl	1a002d68 <Chip_Clock_GetDividerSource>
1a002f4e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002f50:	4620      	mov	r0, r4
1a002f52:	f7ff ff17 	bl	1a002d84 <Chip_Clock_GetDividerDivisor>
1a002f56:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002f58:	4628      	mov	r0, r5
1a002f5a:	f7ff ff21 	bl	1a002da0 <Chip_Clock_GetClockInputHz>
1a002f5e:	3401      	adds	r4, #1
}
1a002f60:	fbb0 f0f4 	udiv	r0, r0, r4
1a002f64:	bd38      	pop	{r3, r4, r5, pc}
1a002f66:	Address 0x000000001a002f66 is out of bounds.


1a002f68 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002f68:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002f6a:	f100 0416 	add.w	r4, r0, #22
1a002f6e:	00a4      	lsls	r4, r4, #2
1a002f70:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002f74:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002f78:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002f7a:	281b      	cmp	r0, #27
1a002f7c:	d813      	bhi.n	1a002fa6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002f7e:	2911      	cmp	r1, #17
1a002f80:	d01a      	beq.n	1a002fb8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002f82:	4d0e      	ldr	r5, [pc, #56]	; (1a002fbc <Chip_Clock_SetBaseClock+0x54>)
1a002f84:	4025      	ands	r5, r4

			if (autoblocken) {
1a002f86:	b10a      	cbz	r2, 1a002f8c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002f88:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002f8c:	b10b      	cbz	r3, 1a002f92 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002f8e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002f92:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002f96:	3016      	adds	r0, #22
1a002f98:	0080      	lsls	r0, r0, #2
1a002f9a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002f9e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002fa2:	6045      	str	r5, [r0, #4]
1a002fa4:	e008      	b.n	1a002fb8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002fa6:	f044 0401 	orr.w	r4, r4, #1
1a002faa:	3016      	adds	r0, #22
1a002fac:	0080      	lsls	r0, r0, #2
1a002fae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002fb2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002fb6:	6044      	str	r4, [r0, #4]
	}
}
1a002fb8:	bc30      	pop	{r4, r5}
1a002fba:	4770      	bx	lr
1a002fbc:	e0fff7fe 	.word	0xe0fff7fe

1a002fc0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002fc0:	281b      	cmp	r0, #27
1a002fc2:	d80c      	bhi.n	1a002fde <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002fc4:	3016      	adds	r0, #22
1a002fc6:	0080      	lsls	r0, r0, #2
1a002fc8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002fcc:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002fd0:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002fd2:	f010 0f01 	tst.w	r0, #1
1a002fd6:	d104      	bne.n	1a002fe2 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002fd8:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002fdc:	4770      	bx	lr
		return CLKINPUT_PD;
1a002fde:	2011      	movs	r0, #17
1a002fe0:	4770      	bx	lr
		return CLKINPUT_PD;
1a002fe2:	2011      	movs	r0, #17
}
1a002fe4:	4770      	bx	lr

1a002fe6 <Chip_Clock_GetBaseClocktHz>:
{
1a002fe6:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002fe8:	f7ff ffea 	bl	1a002fc0 <Chip_Clock_GetBaseClock>
1a002fec:	f7ff fed8 	bl	1a002da0 <Chip_Clock_GetClockInputHz>
}
1a002ff0:	bd08      	pop	{r3, pc}
1a002ff2:	Address 0x000000001a002ff2 is out of bounds.


1a002ff4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002ff4:	b969      	cbnz	r1, 1a003012 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a002ff6:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002ff8:	b10a      	cbz	r2, 1a002ffe <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002ffa:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002ffe:	2b02      	cmp	r3, #2
1a003000:	d009      	beq.n	1a003016 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003002:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003006:	d209      	bcs.n	1a00301c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003008:	3020      	adds	r0, #32
1a00300a:	4b07      	ldr	r3, [pc, #28]	; (1a003028 <Chip_Clock_EnableOpts+0x34>)
1a00300c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003010:	4770      	bx	lr
		reg |= (1 << 1);
1a003012:	2103      	movs	r1, #3
1a003014:	e7f0      	b.n	1a002ff8 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003016:	f041 0120 	orr.w	r1, r1, #32
1a00301a:	e7f2      	b.n	1a003002 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00301c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003020:	4b02      	ldr	r3, [pc, #8]	; (1a00302c <Chip_Clock_EnableOpts+0x38>)
1a003022:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003026:	4770      	bx	lr
1a003028:	40051000 	.word	0x40051000
1a00302c:	40052000 	.word	0x40052000

1a003030 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003030:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003034:	d208      	bcs.n	1a003048 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003036:	4a09      	ldr	r2, [pc, #36]	; (1a00305c <Chip_Clock_Enable+0x2c>)
1a003038:	3020      	adds	r0, #32
1a00303a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00303e:	f043 0301 	orr.w	r3, r3, #1
1a003042:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003046:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003048:	4a05      	ldr	r2, [pc, #20]	; (1a003060 <Chip_Clock_Enable+0x30>)
1a00304a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00304e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003052:	f043 0301 	orr.w	r3, r3, #1
1a003056:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00305a:	4770      	bx	lr
1a00305c:	40051000 	.word	0x40051000
1a003060:	40052000 	.word	0x40052000

1a003064 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003064:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003066:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00306a:	d309      	bcc.n	1a003080 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00306c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003070:	4a0d      	ldr	r2, [pc, #52]	; (1a0030a8 <Chip_Clock_GetRate+0x44>)
1a003072:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003076:	f014 0f01 	tst.w	r4, #1
1a00307a:	d107      	bne.n	1a00308c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00307c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00307e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003080:	f100 0320 	add.w	r3, r0, #32
1a003084:	4a09      	ldr	r2, [pc, #36]	; (1a0030ac <Chip_Clock_GetRate+0x48>)
1a003086:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00308a:	e7f4      	b.n	1a003076 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00308c:	f7ff fe20 	bl	1a002cd0 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003090:	f7ff ffa9 	bl	1a002fe6 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003094:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003098:	d103      	bne.n	1a0030a2 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00309a:	2301      	movs	r3, #1
		rate = rate / div;
1a00309c:	fbb0 f0f3 	udiv	r0, r0, r3
1a0030a0:	e7ed      	b.n	1a00307e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0030a2:	2302      	movs	r3, #2
1a0030a4:	e7fa      	b.n	1a00309c <Chip_Clock_GetRate+0x38>
1a0030a6:	bf00      	nop
1a0030a8:	40052000 	.word	0x40052000
1a0030ac:	40051000 	.word	0x40051000

1a0030b0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0030b0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0030b2:	2069      	movs	r0, #105	; 0x69
1a0030b4:	f7ff ffd6 	bl	1a003064 <Chip_Clock_GetRate>
1a0030b8:	4b01      	ldr	r3, [pc, #4]	; (1a0030c0 <SystemCoreClockUpdate+0x10>)
1a0030ba:	6018      	str	r0, [r3, #0]
}
1a0030bc:	bd08      	pop	{r3, pc}
1a0030be:	bf00      	nop
1a0030c0:	10002b84 	.word	0x10002b84

1a0030c4 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0030c4:	4770      	bx	lr
1a0030c6:	Address 0x000000001a0030c6 is out of bounds.


1a0030c8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0030c8:	b570      	push	{r4, r5, r6, lr}
1a0030ca:	b08a      	sub	sp, #40	; 0x28
1a0030cc:	4605      	mov	r5, r0
1a0030ce:	460e      	mov	r6, r1
1a0030d0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0030d2:	f242 7310 	movw	r3, #10000	; 0x2710
1a0030d6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0030d8:	2806      	cmp	r0, #6
1a0030da:	d018      	beq.n	1a00310e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0030dc:	2300      	movs	r3, #0
1a0030de:	2201      	movs	r2, #1
1a0030e0:	4629      	mov	r1, r5
1a0030e2:	2004      	movs	r0, #4
1a0030e4:	f7ff ff40 	bl	1a002f68 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0030e8:	4a49      	ldr	r2, [pc, #292]	; (1a003210 <Chip_SetupCoreClock+0x148>)
1a0030ea:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0030ec:	f043 0301 	orr.w	r3, r3, #1
1a0030f0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0030f2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0030f6:	a901      	add	r1, sp, #4
1a0030f8:	4630      	mov	r0, r6
1a0030fa:	f7ff fead 	bl	1a002e58 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0030fe:	4b45      	ldr	r3, [pc, #276]	; (1a003214 <Chip_SetupCoreClock+0x14c>)
1a003100:	429e      	cmp	r6, r3
1a003102:	d916      	bls.n	1a003132 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003104:	9b01      	ldr	r3, [sp, #4]
1a003106:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00310a:	d003      	beq.n	1a003114 <Chip_SetupCoreClock+0x4c>
1a00310c:	e7fe      	b.n	1a00310c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00310e:	f7ff fe05 	bl	1a002d1c <Chip_Clock_EnableCrystal>
1a003112:	e7e3      	b.n	1a0030dc <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003114:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003118:	d005      	beq.n	1a003126 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00311a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00311e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003120:	2500      	movs	r5, #0
			direct = 1;
1a003122:	2601      	movs	r6, #1
1a003124:	e007      	b.n	1a003136 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003126:	9b04      	ldr	r3, [sp, #16]
1a003128:	3301      	adds	r3, #1
1a00312a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00312c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00312e:	2600      	movs	r6, #0
1a003130:	e001      	b.n	1a003136 <Chip_SetupCoreClock+0x6e>
1a003132:	2500      	movs	r5, #0
1a003134:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003136:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00313a:	9b01      	ldr	r3, [sp, #4]
1a00313c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003140:	9a05      	ldr	r2, [sp, #20]
1a003142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003146:	9a03      	ldr	r2, [sp, #12]
1a003148:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00314c:	9a04      	ldr	r2, [sp, #16]
1a00314e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003152:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003156:	4a2e      	ldr	r2, [pc, #184]	; (1a003210 <Chip_SetupCoreClock+0x148>)
1a003158:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00315a:	4b2d      	ldr	r3, [pc, #180]	; (1a003210 <Chip_SetupCoreClock+0x148>)
1a00315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00315e:	f013 0f01 	tst.w	r3, #1
1a003162:	d0fa      	beq.n	1a00315a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003164:	2300      	movs	r3, #0
1a003166:	2201      	movs	r2, #1
1a003168:	2109      	movs	r1, #9
1a00316a:	2004      	movs	r0, #4
1a00316c:	f7ff fefc 	bl	1a002f68 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003170:	b1fe      	cbz	r6, 1a0031b2 <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003172:	f242 7310 	movw	r3, #10000	; 0x2710
1a003176:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003178:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00317a:	1e5a      	subs	r2, r3, #1
1a00317c:	9209      	str	r2, [sp, #36]	; 0x24
1a00317e:	2b00      	cmp	r3, #0
1a003180:	d1fa      	bne.n	1a003178 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003182:	9b01      	ldr	r3, [sp, #4]
1a003184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003188:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00318a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00318e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003192:	9a05      	ldr	r2, [sp, #20]
1a003194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003198:	9a03      	ldr	r2, [sp, #12]
1a00319a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00319e:	9a04      	ldr	r2, [sp, #16]
1a0031a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0031a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0031a8:	4a19      	ldr	r2, [pc, #100]	; (1a003210 <Chip_SetupCoreClock+0x148>)
1a0031aa:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0031ac:	b36c      	cbz	r4, 1a00320a <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0031ae:	2400      	movs	r4, #0
1a0031b0:	e029      	b.n	1a003206 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0031b2:	2d00      	cmp	r5, #0
1a0031b4:	d0fa      	beq.n	1a0031ac <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0031b6:	f242 7310 	movw	r3, #10000	; 0x2710
1a0031ba:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0031bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0031be:	1e5a      	subs	r2, r3, #1
1a0031c0:	9209      	str	r2, [sp, #36]	; 0x24
1a0031c2:	2b00      	cmp	r3, #0
1a0031c4:	d1fa      	bne.n	1a0031bc <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0031c6:	9b04      	ldr	r3, [sp, #16]
1a0031c8:	1e5a      	subs	r2, r3, #1
1a0031ca:	9204      	str	r2, [sp, #16]
1a0031cc:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0031d0:	9b01      	ldr	r3, [sp, #4]
1a0031d2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0031d6:	9905      	ldr	r1, [sp, #20]
1a0031d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0031dc:	9903      	ldr	r1, [sp, #12]
1a0031de:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0031e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0031e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0031ea:	4a09      	ldr	r2, [pc, #36]	; (1a003210 <Chip_SetupCoreClock+0x148>)
1a0031ec:	6453      	str	r3, [r2, #68]	; 0x44
1a0031ee:	e7dd      	b.n	1a0031ac <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0031f0:	4809      	ldr	r0, [pc, #36]	; (1a003218 <Chip_SetupCoreClock+0x150>)
1a0031f2:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0031f6:	78cb      	ldrb	r3, [r1, #3]
1a0031f8:	788a      	ldrb	r2, [r1, #2]
1a0031fa:	7849      	ldrb	r1, [r1, #1]
1a0031fc:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003200:	f7ff feb2 	bl	1a002f68 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003204:	3401      	adds	r4, #1
1a003206:	2c11      	cmp	r4, #17
1a003208:	d9f2      	bls.n	1a0031f0 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00320a:	b00a      	add	sp, #40	; 0x28
1a00320c:	bd70      	pop	{r4, r5, r6, pc}
1a00320e:	bf00      	nop
1a003210:	40050000 	.word	0x40050000
1a003214:	068e7780 	.word	0x068e7780
1a003218:	1a004710 	.word	0x1a004710

1a00321c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00321c:	4b03      	ldr	r3, [pc, #12]	; (1a00322c <Chip_SSP_GetClockIndex+0x10>)
1a00321e:	4298      	cmp	r0, r3
1a003220:	d001      	beq.n	1a003226 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003222:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003224:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003226:	20a5      	movs	r0, #165	; 0xa5
1a003228:	4770      	bx	lr
1a00322a:	bf00      	nop
1a00322c:	400c5000 	.word	0x400c5000

1a003230 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003230:	4b04      	ldr	r3, [pc, #16]	; (1a003244 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003232:	4298      	cmp	r0, r3
1a003234:	d002      	beq.n	1a00323c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003236:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00323a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00323c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003240:	4770      	bx	lr
1a003242:	bf00      	nop
1a003244:	400c5000 	.word	0x400c5000

1a003248 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003248:	6803      	ldr	r3, [r0, #0]
1a00324a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00324e:	0209      	lsls	r1, r1, #8
1a003250:	b289      	uxth	r1, r1
1a003252:	4319      	orrs	r1, r3
1a003254:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003256:	6102      	str	r2, [r0, #16]
}
1a003258:	4770      	bx	lr

1a00325a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00325a:	b570      	push	{r4, r5, r6, lr}
1a00325c:	4606      	mov	r6, r0
1a00325e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003260:	f7ff ffe6 	bl	1a003230 <Chip_SSP_GetPeriphClockIndex>
1a003264:	f7ff fefe 	bl	1a003064 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003268:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00326a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00326e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003270:	e000      	b.n	1a003274 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003272:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003274:	42ab      	cmp	r3, r5
1a003276:	d90b      	bls.n	1a003290 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003278:	1c4c      	adds	r4, r1, #1
1a00327a:	fb02 f304 	mul.w	r3, r2, r4
1a00327e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003282:	429d      	cmp	r5, r3
1a003284:	d2f6      	bcs.n	1a003274 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003286:	2cff      	cmp	r4, #255	; 0xff
1a003288:	d9f3      	bls.n	1a003272 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00328a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00328c:	2100      	movs	r1, #0
1a00328e:	e7f1      	b.n	1a003274 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003290:	4630      	mov	r0, r6
1a003292:	f7ff ffd9 	bl	1a003248 <Chip_SSP_SetClockRate>
}
1a003296:	bd70      	pop	{r4, r5, r6, pc}

1a003298 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003298:	b510      	push	{r4, lr}
1a00329a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00329c:	f7ff ffbe 	bl	1a00321c <Chip_SSP_GetClockIndex>
1a0032a0:	f7ff fec6 	bl	1a003030 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0032a4:	4620      	mov	r0, r4
1a0032a6:	f7ff ffc3 	bl	1a003230 <Chip_SSP_GetPeriphClockIndex>
1a0032aa:	f7ff fec1 	bl	1a003030 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0032ae:	6863      	ldr	r3, [r4, #4]
1a0032b0:	f023 0304 	bic.w	r3, r3, #4
1a0032b4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0032b6:	6823      	ldr	r3, [r4, #0]
1a0032b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0032bc:	f043 0307 	orr.w	r3, r3, #7
1a0032c0:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0032c2:	4902      	ldr	r1, [pc, #8]	; (1a0032cc <Chip_SSP_Init+0x34>)
1a0032c4:	4620      	mov	r0, r4
1a0032c6:	f7ff ffc8 	bl	1a00325a <Chip_SSP_SetBitRate>
}
1a0032ca:	bd10      	pop	{r4, pc}
1a0032cc:	000186a0 	.word	0x000186a0

1a0032d0 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0032d0:	2901      	cmp	r1, #1
1a0032d2:	d000      	beq.n	1a0032d6 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a0032d4:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a0032d6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0032da:	0082      	lsls	r2, r0, #2
1a0032dc:	4b03      	ldr	r3, [pc, #12]	; (1a0032ec <Chip_I2C_EventHandler+0x1c>)
1a0032de:	4413      	add	r3, r2
1a0032e0:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a0032e2:	7d13      	ldrb	r3, [r2, #20]
1a0032e4:	b2db      	uxtb	r3, r3
1a0032e6:	2b04      	cmp	r3, #4
1a0032e8:	d0fb      	beq.n	1a0032e2 <Chip_I2C_EventHandler+0x12>
1a0032ea:	e7f3      	b.n	1a0032d4 <Chip_I2C_EventHandler+0x4>
1a0032ec:	10000004 	.word	0x10000004

1a0032f0 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0032f0:	b570      	push	{r4, r5, r6, lr}
1a0032f2:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0032f4:	4e06      	ldr	r6, [pc, #24]	; (1a003310 <Chip_I2C_Init+0x20>)
1a0032f6:	00c4      	lsls	r4, r0, #3
1a0032f8:	1a22      	subs	r2, r4, r0
1a0032fa:	0093      	lsls	r3, r2, #2
1a0032fc:	4433      	add	r3, r6
1a0032fe:	8898      	ldrh	r0, [r3, #4]
1a003300:	f7ff fe96 	bl	1a003030 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003304:	1b64      	subs	r4, r4, r5
1a003306:	00a3      	lsls	r3, r4, #2
1a003308:	58f3      	ldr	r3, [r6, r3]
1a00330a:	226c      	movs	r2, #108	; 0x6c
1a00330c:	619a      	str	r2, [r3, #24]
}
1a00330e:	bd70      	pop	{r4, r5, r6, pc}
1a003310:	10000004 	.word	0x10000004

1a003314 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003318:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00331a:	4e0b      	ldr	r6, [pc, #44]	; (1a003348 <Chip_I2C_SetClockRate+0x34>)
1a00331c:	00c5      	lsls	r5, r0, #3
1a00331e:	1a2b      	subs	r3, r5, r0
1a003320:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003324:	eb06 0308 	add.w	r3, r6, r8
1a003328:	8898      	ldrh	r0, [r3, #4]
1a00332a:	f7ff fe9b 	bl	1a003064 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00332e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003332:	f856 3008 	ldr.w	r3, [r6, r8]
1a003336:	0842      	lsrs	r2, r0, #1
1a003338:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00333a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00333e:	691a      	ldr	r2, [r3, #16]
1a003340:	1a80      	subs	r0, r0, r2
1a003342:	6158      	str	r0, [r3, #20]
}
1a003344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003348:	10000004 	.word	0x10000004

1a00334c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00334c:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00334e:	4a0b      	ldr	r2, [pc, #44]	; (1a00337c <SystemInit+0x30>)
1a003350:	4b0b      	ldr	r3, [pc, #44]	; (1a003380 <SystemInit+0x34>)
1a003352:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003354:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003358:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00335a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00335e:	2b20      	cmp	r3, #32
1a003360:	d004      	beq.n	1a00336c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003362:	f7ff fa9f 	bl	1a0028a4 <Board_SystemInit>
   Board_Init();
1a003366:	f7ff fa27 	bl	1a0027b8 <Board_Init>
}
1a00336a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00336c:	4a04      	ldr	r2, [pc, #16]	; (1a003380 <SystemInit+0x34>)
1a00336e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003372:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003376:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00337a:	e7f2      	b.n	1a003362 <SystemInit+0x16>
1a00337c:	1a000000 	.word	0x1a000000
1a003380:	e000ed00 	.word	0xe000ed00

1a003384 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003384:	4b04      	ldr	r3, [pc, #16]	; (1a003398 <cyclesCounterInit+0x14>)
1a003386:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003388:	4a04      	ldr	r2, [pc, #16]	; (1a00339c <cyclesCounterInit+0x18>)
1a00338a:	6813      	ldr	r3, [r2, #0]
1a00338c:	f043 0301 	orr.w	r3, r3, #1
1a003390:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003392:	2001      	movs	r0, #1
1a003394:	4770      	bx	lr
1a003396:	bf00      	nop
1a003398:	1000003c 	.word	0x1000003c
1a00339c:	e0001000 	.word	0xe0001000

1a0033a0 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0033a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0033a4:	0083      	lsls	r3, r0, #2
1a0033a6:	4a03      	ldr	r2, [pc, #12]	; (1a0033b4 <uartTxReady+0x14>)
1a0033a8:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a0033aa:	6958      	ldr	r0, [r3, #20]
}
1a0033ac:	f000 0020 	and.w	r0, r0, #32
1a0033b0:	4770      	bx	lr
1a0033b2:	bf00      	nop
1a0033b4:	1a004758 	.word	0x1a004758

1a0033b8 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0033b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0033bc:	0083      	lsls	r3, r0, #2
1a0033be:	4a02      	ldr	r2, [pc, #8]	; (1a0033c8 <uartTxWrite+0x10>)
1a0033c0:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0033c2:	6019      	str	r1, [r3, #0]
}
1a0033c4:	4770      	bx	lr
1a0033c6:	bf00      	nop
1a0033c8:	1a004758 	.word	0x1a004758

1a0033cc <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0033cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0033d0:	4680      	mov	r8, r0
1a0033d2:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0033d4:	4c19      	ldr	r4, [pc, #100]	; (1a00343c <uartInit+0x70>)
1a0033d6:	0045      	lsls	r5, r0, #1
1a0033d8:	182a      	adds	r2, r5, r0
1a0033da:	0093      	lsls	r3, r2, #2
1a0033dc:	18e6      	adds	r6, r4, r3
1a0033de:	58e7      	ldr	r7, [r4, r3]
1a0033e0:	4638      	mov	r0, r7
1a0033e2:	f7ff fa7b 	bl	1a0028dc <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0033e6:	4649      	mov	r1, r9
1a0033e8:	4638      	mov	r0, r7
1a0033ea:	f7ff faa1 	bl	1a002930 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0033ee:	2307      	movs	r3, #7
1a0033f0:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0033f2:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0033f4:	2301      	movs	r3, #1
1a0033f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0033f8:	7930      	ldrb	r0, [r6, #4]
1a0033fa:	7973      	ldrb	r3, [r6, #5]
1a0033fc:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0033fe:	f042 0218 	orr.w	r2, r2, #24
1a003402:	490f      	ldr	r1, [pc, #60]	; (1a003440 <uartInit+0x74>)
1a003404:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a00340c:	79f0      	ldrb	r0, [r6, #7]
1a00340e:	7a33      	ldrb	r3, [r6, #8]
1a003410:	7a72      	ldrb	r2, [r6, #9]
1a003412:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003416:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00341a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a00341e:	f1b8 0f01 	cmp.w	r8, #1
1a003422:	d001      	beq.n	1a003428 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a003424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003428:	4a06      	ldr	r2, [pc, #24]	; (1a003444 <uartInit+0x78>)
1a00342a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a00342c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a003430:	64d3      	str	r3, [r2, #76]	; 0x4c
1a003432:	221a      	movs	r2, #26
1a003434:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003438:	e7f4      	b.n	1a003424 <uartInit+0x58>
1a00343a:	bf00      	nop
1a00343c:	1a004758 	.word	0x1a004758
1a003440:	40086000 	.word	0x40086000
1a003444:	40081000 	.word	0x40081000

1a003448 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a003448:	b538      	push	{r3, r4, r5, lr}
1a00344a:	4604      	mov	r4, r0
1a00344c:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a00344e:	4620      	mov	r0, r4
1a003450:	f7ff ffa6 	bl	1a0033a0 <uartTxReady>
1a003454:	2800      	cmp	r0, #0
1a003456:	d0fa      	beq.n	1a00344e <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a003458:	4629      	mov	r1, r5
1a00345a:	4620      	mov	r0, r4
1a00345c:	f7ff ffac 	bl	1a0033b8 <uartTxWrite>
}
1a003460:	bd38      	pop	{r3, r4, r5, pc}

1a003462 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a003462:	b538      	push	{r3, r4, r5, lr}
1a003464:	4605      	mov	r5, r0
1a003466:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a003468:	e003      	b.n	1a003472 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a00346a:	4628      	mov	r0, r5
1a00346c:	f7ff ffec 	bl	1a003448 <uartWriteByte>
      str++;
1a003470:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a003472:	7821      	ldrb	r1, [r4, #0]
1a003474:	2900      	cmp	r1, #0
1a003476:	d1f8      	bne.n	1a00346a <uartWriteString+0x8>
   }
}
1a003478:	bd38      	pop	{r3, r4, r5, pc}
1a00347a:	Address 0x000000001a00347a is out of bounds.


1a00347c <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00347c:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a003480:	4908      	ldr	r1, [pc, #32]	; (1a0034a4 <tickerCallback+0x28>)
1a003482:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003486:	f112 0b01 	adds.w	fp, r2, #1
1a00348a:	f143 0c00 	adc.w	ip, r3, #0
1a00348e:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a003492:	4b05      	ldr	r3, [pc, #20]	; (1a0034a8 <tickerCallback+0x2c>)
1a003494:	681b      	ldr	r3, [r3, #0]
1a003496:	b113      	cbz	r3, 1a00349e <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a003498:	4a04      	ldr	r2, [pc, #16]	; (1a0034ac <tickerCallback+0x30>)
1a00349a:	6810      	ldr	r0, [r2, #0]
1a00349c:	4798      	blx	r3
   }
}
1a00349e:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a0034a2:	bf00      	nop
1a0034a4:	10002af8 	.word	0x10002af8
1a0034a8:	10002b00 	.word	0x10002b00
1a0034ac:	10002af4 	.word	0x10002af4

1a0034b0 <tickInit>:
{
1a0034b0:	b510      	push	{r4, lr}
1a0034b2:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a0034b4:	4b0e      	ldr	r3, [pc, #56]	; (1a0034f0 <tickInit+0x40>)
1a0034b6:	9301      	str	r3, [sp, #4]
1a0034b8:	4b0e      	ldr	r3, [pc, #56]	; (1a0034f4 <tickInit+0x44>)
1a0034ba:	9300      	str	r3, [sp, #0]
1a0034bc:	2300      	movs	r3, #0
1a0034be:	2201      	movs	r2, #1
1a0034c0:	4601      	mov	r1, r0
1a0034c2:	480d      	ldr	r0, [pc, #52]	; (1a0034f8 <tickInit+0x48>)
1a0034c4:	f7fe fd40 	bl	1a001f48 <xTimerCreateStatic>
         if (h == NULL)
1a0034c8:	b178      	cbz	r0, 1a0034ea <tickInit+0x3a>
1a0034ca:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a0034cc:	f7fe f8be 	bl	1a00164c <xTaskGetTickCount>
1a0034d0:	2300      	movs	r3, #0
1a0034d2:	9300      	str	r3, [sp, #0]
1a0034d4:	4602      	mov	r2, r0
1a0034d6:	2101      	movs	r1, #1
1a0034d8:	4620      	mov	r0, r4
1a0034da:	f7fe fd5b 	bl	1a001f94 <xTimerGenericCommand>
1a0034de:	2801      	cmp	r0, #1
1a0034e0:	bf14      	ite	ne
1a0034e2:	2000      	movne	r0, #0
1a0034e4:	2001      	moveq	r0, #1
}
1a0034e6:	b002      	add	sp, #8
1a0034e8:	bd10      	pop	{r4, pc}
            return 0;
1a0034ea:	2000      	movs	r0, #0
1a0034ec:	e7fb      	b.n	1a0034e6 <tickInit+0x36>
1a0034ee:	bf00      	nop
1a0034f0:	10002b04 	.word	0x10002b04
1a0034f4:	1a00347d 	.word	0x1a00347d
1a0034f8:	1a0047a0 	.word	0x1a0047a0

1a0034fc <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0034fc:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0034fe:	4d0b      	ldr	r5, [pc, #44]	; (1a00352c <gpioObtainPinInit+0x30>)
1a003500:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003504:	182c      	adds	r4, r5, r0
1a003506:	5628      	ldrsb	r0, [r5, r0]
1a003508:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00350a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00350e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003510:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003514:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003516:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00351a:	9b02      	ldr	r3, [sp, #8]
1a00351c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00351e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a003522:	9b03      	ldr	r3, [sp, #12]
1a003524:	701a      	strb	r2, [r3, #0]
}
1a003526:	bc30      	pop	{r4, r5}
1a003528:	4770      	bx	lr
1a00352a:	bf00      	nop
1a00352c:	1a0047ac 	.word	0x1a0047ac

1a003530 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a003530:	b570      	push	{r4, r5, r6, lr}
1a003532:	b084      	sub	sp, #16
1a003534:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003536:	2300      	movs	r3, #0
1a003538:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00353c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003540:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003544:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003548:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00354c:	f10d 030b 	add.w	r3, sp, #11
1a003550:	9301      	str	r3, [sp, #4]
1a003552:	ab03      	add	r3, sp, #12
1a003554:	9300      	str	r3, [sp, #0]
1a003556:	f10d 030d 	add.w	r3, sp, #13
1a00355a:	f10d 020e 	add.w	r2, sp, #14
1a00355e:	f10d 010f 	add.w	r1, sp, #15
1a003562:	f7ff ffcb 	bl	1a0034fc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003566:	2c05      	cmp	r4, #5
1a003568:	f200 80a5 	bhi.w	1a0036b6 <gpioInit+0x186>
1a00356c:	e8df f004 	tbb	[pc, r4]
1a003570:	45278109 	.word	0x45278109
1a003574:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003576:	4851      	ldr	r0, [pc, #324]	; (1a0036bc <gpioInit+0x18c>)
1a003578:	f7ff fda4 	bl	1a0030c4 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a00357c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00357e:	b004      	add	sp, #16
1a003580:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a003582:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003586:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00358a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00358e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003592:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003596:	494a      	ldr	r1, [pc, #296]	; (1a0036c0 <gpioInit+0x190>)
1a003598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00359c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0035a0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0035a4:	2001      	movs	r0, #1
1a0035a6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0035aa:	4c44      	ldr	r4, [pc, #272]	; (1a0036bc <gpioInit+0x18c>)
1a0035ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0035b0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0035b4:	ea22 0201 	bic.w	r2, r2, r1
1a0035b8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0035bc:	e7df      	b.n	1a00357e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0035be:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0035c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0035c6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0035ca:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0035ce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0035d2:	493b      	ldr	r1, [pc, #236]	; (1a0036c0 <gpioInit+0x190>)
1a0035d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0035d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0035dc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0035e0:	2001      	movs	r0, #1
1a0035e2:	fa00 f102 	lsl.w	r1, r0, r2
1a0035e6:	4c35      	ldr	r4, [pc, #212]	; (1a0036bc <gpioInit+0x18c>)
1a0035e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0035ec:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0035f0:	ea22 0201 	bic.w	r2, r2, r1
1a0035f4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0035f8:	e7c1      	b.n	1a00357e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0035fa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0035fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003602:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003606:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00360a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00360e:	492c      	ldr	r1, [pc, #176]	; (1a0036c0 <gpioInit+0x190>)
1a003610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003614:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003618:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00361c:	2001      	movs	r0, #1
1a00361e:	fa00 f102 	lsl.w	r1, r0, r2
1a003622:	4c26      	ldr	r4, [pc, #152]	; (1a0036bc <gpioInit+0x18c>)
1a003624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003628:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00362c:	ea22 0201 	bic.w	r2, r2, r1
1a003630:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003634:	e7a3      	b.n	1a00357e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003636:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00363a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00363e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003642:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003646:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00364a:	491d      	ldr	r1, [pc, #116]	; (1a0036c0 <gpioInit+0x190>)
1a00364c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003650:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003654:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003658:	2001      	movs	r0, #1
1a00365a:	fa00 f102 	lsl.w	r1, r0, r2
1a00365e:	4c17      	ldr	r4, [pc, #92]	; (1a0036bc <gpioInit+0x18c>)
1a003660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003664:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003668:	ea22 0201 	bic.w	r2, r2, r1
1a00366c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003670:	e785      	b.n	1a00357e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003672:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003676:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00367a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00367e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003682:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003686:	490e      	ldr	r1, [pc, #56]	; (1a0036c0 <gpioInit+0x190>)
1a003688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00368c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003690:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003694:	2001      	movs	r0, #1
1a003696:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00369a:	4b08      	ldr	r3, [pc, #32]	; (1a0036bc <gpioInit+0x18c>)
1a00369c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0036a0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0036a4:	4331      	orrs	r1, r6
1a0036a6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0036aa:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0036ac:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0036b0:	2100      	movs	r1, #0
1a0036b2:	5499      	strb	r1, [r3, r2]
1a0036b4:	e763      	b.n	1a00357e <gpioInit+0x4e>
      ret_val = 0;
1a0036b6:	2000      	movs	r0, #0
1a0036b8:	e761      	b.n	1a00357e <gpioInit+0x4e>
1a0036ba:	bf00      	nop
1a0036bc:	400f4000 	.word	0x400f4000
1a0036c0:	40086000 	.word	0x40086000

1a0036c4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0036c4:	b510      	push	{r4, lr}
1a0036c6:	b084      	sub	sp, #16
1a0036c8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0036ca:	2300      	movs	r3, #0
1a0036cc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0036d0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0036d4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0036d8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0036dc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0036e0:	f10d 030b 	add.w	r3, sp, #11
1a0036e4:	9301      	str	r3, [sp, #4]
1a0036e6:	ab03      	add	r3, sp, #12
1a0036e8:	9300      	str	r3, [sp, #0]
1a0036ea:	f10d 030d 	add.w	r3, sp, #13
1a0036ee:	f10d 020e 	add.w	r2, sp, #14
1a0036f2:	f10d 010f 	add.w	r1, sp, #15
1a0036f6:	f7ff ff01 	bl	1a0034fc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0036fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0036fe:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003702:	3400      	adds	r4, #0
1a003704:	bf18      	it	ne
1a003706:	2401      	movne	r4, #1
1a003708:	015b      	lsls	r3, r3, #5
1a00370a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00370e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003712:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a003714:	2001      	movs	r0, #1
1a003716:	b004      	add	sp, #16
1a003718:	bd10      	pop	{r4, pc}

1a00371a <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a00371a:	b500      	push	{lr}
1a00371c:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00371e:	2300      	movs	r3, #0
1a003720:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003724:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003728:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00372c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003730:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003734:	f10d 030b 	add.w	r3, sp, #11
1a003738:	9301      	str	r3, [sp, #4]
1a00373a:	ab03      	add	r3, sp, #12
1a00373c:	9300      	str	r3, [sp, #0]
1a00373e:	f10d 030d 	add.w	r3, sp, #13
1a003742:	f10d 020e 	add.w	r2, sp, #14
1a003746:	f10d 010f 	add.w	r1, sp, #15
1a00374a:	f7ff fed7 	bl	1a0034fc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00374e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a003752:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003756:	015b      	lsls	r3, r3, #5
1a003758:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00375c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003760:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a003762:	3000      	adds	r0, #0
1a003764:	bf18      	it	ne
1a003766:	2001      	movne	r0, #1
1a003768:	b005      	add	sp, #20
1a00376a:	f85d fb04 	ldr.w	pc, [sp], #4
1a00376e:	Address 0x000000001a00376e is out of bounds.


1a003770 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003770:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003772:	4b04      	ldr	r3, [pc, #16]	; (1a003784 <USB0_IRQHandler+0x14>)
1a003774:	681b      	ldr	r3, [r3, #0]
1a003776:	681b      	ldr	r3, [r3, #0]
1a003778:	68db      	ldr	r3, [r3, #12]
1a00377a:	4a03      	ldr	r2, [pc, #12]	; (1a003788 <USB0_IRQHandler+0x18>)
1a00377c:	6810      	ldr	r0, [r2, #0]
1a00377e:	4798      	blx	r3
}
1a003780:	bd08      	pop	{r3, pc}
1a003782:	bf00      	nop
1a003784:	10002b88 	.word	0x10002b88
1a003788:	10002b34 	.word	0x10002b34

1a00378c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a00378c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00378e:	f7ff fc8f 	bl	1a0030b0 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003792:	4b3a      	ldr	r3, [pc, #232]	; (1a00387c <boardInit+0xf0>)
1a003794:	6818      	ldr	r0, [r3, #0]
1a003796:	f7ff fdf5 	bl	1a003384 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a00379a:	2001      	movs	r0, #1
1a00379c:	2100      	movs	r1, #0
1a00379e:	f7ff fe87 	bl	1a0034b0 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a0037a2:	2105      	movs	r1, #5
1a0037a4:	2000      	movs	r0, #0
1a0037a6:	f7ff fec3 	bl	1a003530 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a0037aa:	2100      	movs	r1, #0
1a0037ac:	2026      	movs	r0, #38	; 0x26
1a0037ae:	f7ff febf 	bl	1a003530 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a0037b2:	2100      	movs	r1, #0
1a0037b4:	2027      	movs	r0, #39	; 0x27
1a0037b6:	f7ff febb 	bl	1a003530 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a0037ba:	2100      	movs	r1, #0
1a0037bc:	2028      	movs	r0, #40	; 0x28
1a0037be:	f7ff feb7 	bl	1a003530 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a0037c2:	2100      	movs	r1, #0
1a0037c4:	2029      	movs	r0, #41	; 0x29
1a0037c6:	f7ff feb3 	bl	1a003530 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a0037ca:	2101      	movs	r1, #1
1a0037cc:	202a      	movs	r0, #42	; 0x2a
1a0037ce:	f7ff feaf 	bl	1a003530 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a0037d2:	2101      	movs	r1, #1
1a0037d4:	202b      	movs	r0, #43	; 0x2b
1a0037d6:	f7ff feab 	bl	1a003530 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a0037da:	2101      	movs	r1, #1
1a0037dc:	202c      	movs	r0, #44	; 0x2c
1a0037de:	f7ff fea7 	bl	1a003530 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a0037e2:	2101      	movs	r1, #1
1a0037e4:	202d      	movs	r0, #45	; 0x2d
1a0037e6:	f7ff fea3 	bl	1a003530 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a0037ea:	2101      	movs	r1, #1
1a0037ec:	202e      	movs	r0, #46	; 0x2e
1a0037ee:	f7ff fe9f 	bl	1a003530 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a0037f2:	2101      	movs	r1, #1
1a0037f4:	202f      	movs	r0, #47	; 0x2f
1a0037f6:	f7ff fe9b 	bl	1a003530 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a0037fa:	2100      	movs	r1, #0
1a0037fc:	2030      	movs	r0, #48	; 0x30
1a0037fe:	f7ff fe97 	bl	1a003530 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a003802:	2100      	movs	r1, #0
1a003804:	2031      	movs	r0, #49	; 0x31
1a003806:	f7ff fe93 	bl	1a003530 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00380a:	2100      	movs	r1, #0
1a00380c:	2032      	movs	r0, #50	; 0x32
1a00380e:	f7ff fe8f 	bl	1a003530 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a003812:	2100      	movs	r1, #0
1a003814:	2033      	movs	r0, #51	; 0x33
1a003816:	f7ff fe8b 	bl	1a003530 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00381a:	2100      	movs	r1, #0
1a00381c:	2034      	movs	r0, #52	; 0x34
1a00381e:	f7ff fe87 	bl	1a003530 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a003822:	2100      	movs	r1, #0
1a003824:	2035      	movs	r0, #53	; 0x35
1a003826:	f7ff fe83 	bl	1a003530 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a00382a:	2100      	movs	r1, #0
1a00382c:	2036      	movs	r0, #54	; 0x36
1a00382e:	f7ff fe7f 	bl	1a003530 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a003832:	2100      	movs	r1, #0
1a003834:	2037      	movs	r0, #55	; 0x37
1a003836:	f7ff fe7b 	bl	1a003530 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a00383a:	2101      	movs	r1, #1
1a00383c:	2038      	movs	r0, #56	; 0x38
1a00383e:	f7ff fe77 	bl	1a003530 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a003842:	2101      	movs	r1, #1
1a003844:	2039      	movs	r0, #57	; 0x39
1a003846:	f7ff fe73 	bl	1a003530 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a00384a:	2101      	movs	r1, #1
1a00384c:	203a      	movs	r0, #58	; 0x3a
1a00384e:	f7ff fe6f 	bl	1a003530 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a003852:	2101      	movs	r1, #1
1a003854:	203b      	movs	r0, #59	; 0x3b
1a003856:	f7ff fe6b 	bl	1a003530 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a00385a:	2101      	movs	r1, #1
1a00385c:	203c      	movs	r0, #60	; 0x3c
1a00385e:	f7ff fe67 	bl	1a003530 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a003862:	2101      	movs	r1, #1
1a003864:	203d      	movs	r0, #61	; 0x3d
1a003866:	f7ff fe63 	bl	1a003530 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a00386a:	2101      	movs	r1, #1
1a00386c:	203e      	movs	r0, #62	; 0x3e
1a00386e:	f7ff fe5f 	bl	1a003530 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a003872:	2101      	movs	r1, #1
1a003874:	203f      	movs	r0, #63	; 0x3f
1a003876:	f7ff fe5b 	bl	1a003530 <gpioInit>

}
1a00387a:	bd08      	pop	{r3, pc}
1a00387c:	10002b84 	.word	0x10002b84

1a003880 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a003880:	b508      	push	{r3, lr}
1a003882:	460b      	mov	r3, r1
   *printer = uart;
1a003884:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a003886:	4611      	mov	r1, r2
1a003888:	4618      	mov	r0, r3
1a00388a:	f7ff fd9f 	bl	1a0033cc <uartInit>
}
1a00388e:	bd08      	pop	{r3, pc}

1a003890 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a003890:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a003892:	f7ff fde6 	bl	1a003462 <uartWriteString>
}
1a003896:	bd08      	pop	{r3, pc}

1a003898 <printEnter>:

void printEnter( print_t printer )
{
1a003898:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a00389a:	4902      	ldr	r1, [pc, #8]	; (1a0038a4 <printEnter+0xc>)
1a00389c:	f7ff fde1 	bl	1a003462 <uartWriteString>
}
1a0038a0:	bd08      	pop	{r3, pc}
1a0038a2:	bf00      	nop
1a0038a4:	1a0048ec 	.word	0x1a0048ec

1a0038a8 <__aeabi_uldivmod>:
1a0038a8:	b953      	cbnz	r3, 1a0038c0 <__aeabi_uldivmod+0x18>
1a0038aa:	b94a      	cbnz	r2, 1a0038c0 <__aeabi_uldivmod+0x18>
1a0038ac:	2900      	cmp	r1, #0
1a0038ae:	bf08      	it	eq
1a0038b0:	2800      	cmpeq	r0, #0
1a0038b2:	bf1c      	itt	ne
1a0038b4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0038b8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0038bc:	f000 b972 	b.w	1a003ba4 <__aeabi_idiv0>
1a0038c0:	f1ad 0c08 	sub.w	ip, sp, #8
1a0038c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0038c8:	f000 f806 	bl	1a0038d8 <__udivmoddi4>
1a0038cc:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0038d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0038d4:	b004      	add	sp, #16
1a0038d6:	4770      	bx	lr

1a0038d8 <__udivmoddi4>:
1a0038d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0038dc:	9e08      	ldr	r6, [sp, #32]
1a0038de:	4604      	mov	r4, r0
1a0038e0:	4688      	mov	r8, r1
1a0038e2:	2b00      	cmp	r3, #0
1a0038e4:	d14b      	bne.n	1a00397e <__udivmoddi4+0xa6>
1a0038e6:	428a      	cmp	r2, r1
1a0038e8:	4615      	mov	r5, r2
1a0038ea:	d967      	bls.n	1a0039bc <__udivmoddi4+0xe4>
1a0038ec:	fab2 f282 	clz	r2, r2
1a0038f0:	b14a      	cbz	r2, 1a003906 <__udivmoddi4+0x2e>
1a0038f2:	f1c2 0720 	rsb	r7, r2, #32
1a0038f6:	fa01 f302 	lsl.w	r3, r1, r2
1a0038fa:	fa20 f707 	lsr.w	r7, r0, r7
1a0038fe:	4095      	lsls	r5, r2
1a003900:	ea47 0803 	orr.w	r8, r7, r3
1a003904:	4094      	lsls	r4, r2
1a003906:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00390a:	0c23      	lsrs	r3, r4, #16
1a00390c:	fbb8 f7fe 	udiv	r7, r8, lr
1a003910:	fa1f fc85 	uxth.w	ip, r5
1a003914:	fb0e 8817 	mls	r8, lr, r7, r8
1a003918:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a00391c:	fb07 f10c 	mul.w	r1, r7, ip
1a003920:	4299      	cmp	r1, r3
1a003922:	d909      	bls.n	1a003938 <__udivmoddi4+0x60>
1a003924:	18eb      	adds	r3, r5, r3
1a003926:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00392a:	f080 811b 	bcs.w	1a003b64 <__udivmoddi4+0x28c>
1a00392e:	4299      	cmp	r1, r3
1a003930:	f240 8118 	bls.w	1a003b64 <__udivmoddi4+0x28c>
1a003934:	3f02      	subs	r7, #2
1a003936:	442b      	add	r3, r5
1a003938:	1a5b      	subs	r3, r3, r1
1a00393a:	b2a4      	uxth	r4, r4
1a00393c:	fbb3 f0fe 	udiv	r0, r3, lr
1a003940:	fb0e 3310 	mls	r3, lr, r0, r3
1a003944:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003948:	fb00 fc0c 	mul.w	ip, r0, ip
1a00394c:	45a4      	cmp	ip, r4
1a00394e:	d909      	bls.n	1a003964 <__udivmoddi4+0x8c>
1a003950:	192c      	adds	r4, r5, r4
1a003952:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003956:	f080 8107 	bcs.w	1a003b68 <__udivmoddi4+0x290>
1a00395a:	45a4      	cmp	ip, r4
1a00395c:	f240 8104 	bls.w	1a003b68 <__udivmoddi4+0x290>
1a003960:	3802      	subs	r0, #2
1a003962:	442c      	add	r4, r5
1a003964:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a003968:	eba4 040c 	sub.w	r4, r4, ip
1a00396c:	2700      	movs	r7, #0
1a00396e:	b11e      	cbz	r6, 1a003978 <__udivmoddi4+0xa0>
1a003970:	40d4      	lsrs	r4, r2
1a003972:	2300      	movs	r3, #0
1a003974:	e9c6 4300 	strd	r4, r3, [r6]
1a003978:	4639      	mov	r1, r7
1a00397a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00397e:	428b      	cmp	r3, r1
1a003980:	d909      	bls.n	1a003996 <__udivmoddi4+0xbe>
1a003982:	2e00      	cmp	r6, #0
1a003984:	f000 80eb 	beq.w	1a003b5e <__udivmoddi4+0x286>
1a003988:	2700      	movs	r7, #0
1a00398a:	e9c6 0100 	strd	r0, r1, [r6]
1a00398e:	4638      	mov	r0, r7
1a003990:	4639      	mov	r1, r7
1a003992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003996:	fab3 f783 	clz	r7, r3
1a00399a:	2f00      	cmp	r7, #0
1a00399c:	d147      	bne.n	1a003a2e <__udivmoddi4+0x156>
1a00399e:	428b      	cmp	r3, r1
1a0039a0:	d302      	bcc.n	1a0039a8 <__udivmoddi4+0xd0>
1a0039a2:	4282      	cmp	r2, r0
1a0039a4:	f200 80fa 	bhi.w	1a003b9c <__udivmoddi4+0x2c4>
1a0039a8:	1a84      	subs	r4, r0, r2
1a0039aa:	eb61 0303 	sbc.w	r3, r1, r3
1a0039ae:	2001      	movs	r0, #1
1a0039b0:	4698      	mov	r8, r3
1a0039b2:	2e00      	cmp	r6, #0
1a0039b4:	d0e0      	beq.n	1a003978 <__udivmoddi4+0xa0>
1a0039b6:	e9c6 4800 	strd	r4, r8, [r6]
1a0039ba:	e7dd      	b.n	1a003978 <__udivmoddi4+0xa0>
1a0039bc:	b902      	cbnz	r2, 1a0039c0 <__udivmoddi4+0xe8>
1a0039be:	deff      	udf	#255	; 0xff
1a0039c0:	fab2 f282 	clz	r2, r2
1a0039c4:	2a00      	cmp	r2, #0
1a0039c6:	f040 808f 	bne.w	1a003ae8 <__udivmoddi4+0x210>
1a0039ca:	1b49      	subs	r1, r1, r5
1a0039cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0039d0:	fa1f f885 	uxth.w	r8, r5
1a0039d4:	2701      	movs	r7, #1
1a0039d6:	fbb1 fcfe 	udiv	ip, r1, lr
1a0039da:	0c23      	lsrs	r3, r4, #16
1a0039dc:	fb0e 111c 	mls	r1, lr, ip, r1
1a0039e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0039e4:	fb08 f10c 	mul.w	r1, r8, ip
1a0039e8:	4299      	cmp	r1, r3
1a0039ea:	d907      	bls.n	1a0039fc <__udivmoddi4+0x124>
1a0039ec:	18eb      	adds	r3, r5, r3
1a0039ee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0039f2:	d202      	bcs.n	1a0039fa <__udivmoddi4+0x122>
1a0039f4:	4299      	cmp	r1, r3
1a0039f6:	f200 80cd 	bhi.w	1a003b94 <__udivmoddi4+0x2bc>
1a0039fa:	4684      	mov	ip, r0
1a0039fc:	1a59      	subs	r1, r3, r1
1a0039fe:	b2a3      	uxth	r3, r4
1a003a00:	fbb1 f0fe 	udiv	r0, r1, lr
1a003a04:	fb0e 1410 	mls	r4, lr, r0, r1
1a003a08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003a0c:	fb08 f800 	mul.w	r8, r8, r0
1a003a10:	45a0      	cmp	r8, r4
1a003a12:	d907      	bls.n	1a003a24 <__udivmoddi4+0x14c>
1a003a14:	192c      	adds	r4, r5, r4
1a003a16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003a1a:	d202      	bcs.n	1a003a22 <__udivmoddi4+0x14a>
1a003a1c:	45a0      	cmp	r8, r4
1a003a1e:	f200 80b6 	bhi.w	1a003b8e <__udivmoddi4+0x2b6>
1a003a22:	4618      	mov	r0, r3
1a003a24:	eba4 0408 	sub.w	r4, r4, r8
1a003a28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003a2c:	e79f      	b.n	1a00396e <__udivmoddi4+0x96>
1a003a2e:	f1c7 0c20 	rsb	ip, r7, #32
1a003a32:	40bb      	lsls	r3, r7
1a003a34:	fa22 fe0c 	lsr.w	lr, r2, ip
1a003a38:	ea4e 0e03 	orr.w	lr, lr, r3
1a003a3c:	fa01 f407 	lsl.w	r4, r1, r7
1a003a40:	fa20 f50c 	lsr.w	r5, r0, ip
1a003a44:	fa21 f30c 	lsr.w	r3, r1, ip
1a003a48:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a003a4c:	4325      	orrs	r5, r4
1a003a4e:	fbb3 f9f8 	udiv	r9, r3, r8
1a003a52:	0c2c      	lsrs	r4, r5, #16
1a003a54:	fb08 3319 	mls	r3, r8, r9, r3
1a003a58:	fa1f fa8e 	uxth.w	sl, lr
1a003a5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a003a60:	fb09 f40a 	mul.w	r4, r9, sl
1a003a64:	429c      	cmp	r4, r3
1a003a66:	fa02 f207 	lsl.w	r2, r2, r7
1a003a6a:	fa00 f107 	lsl.w	r1, r0, r7
1a003a6e:	d90b      	bls.n	1a003a88 <__udivmoddi4+0x1b0>
1a003a70:	eb1e 0303 	adds.w	r3, lr, r3
1a003a74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a003a78:	f080 8087 	bcs.w	1a003b8a <__udivmoddi4+0x2b2>
1a003a7c:	429c      	cmp	r4, r3
1a003a7e:	f240 8084 	bls.w	1a003b8a <__udivmoddi4+0x2b2>
1a003a82:	f1a9 0902 	sub.w	r9, r9, #2
1a003a86:	4473      	add	r3, lr
1a003a88:	1b1b      	subs	r3, r3, r4
1a003a8a:	b2ad      	uxth	r5, r5
1a003a8c:	fbb3 f0f8 	udiv	r0, r3, r8
1a003a90:	fb08 3310 	mls	r3, r8, r0, r3
1a003a94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a003a98:	fb00 fa0a 	mul.w	sl, r0, sl
1a003a9c:	45a2      	cmp	sl, r4
1a003a9e:	d908      	bls.n	1a003ab2 <__udivmoddi4+0x1da>
1a003aa0:	eb1e 0404 	adds.w	r4, lr, r4
1a003aa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003aa8:	d26b      	bcs.n	1a003b82 <__udivmoddi4+0x2aa>
1a003aaa:	45a2      	cmp	sl, r4
1a003aac:	d969      	bls.n	1a003b82 <__udivmoddi4+0x2aa>
1a003aae:	3802      	subs	r0, #2
1a003ab0:	4474      	add	r4, lr
1a003ab2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003ab6:	fba0 8902 	umull	r8, r9, r0, r2
1a003aba:	eba4 040a 	sub.w	r4, r4, sl
1a003abe:	454c      	cmp	r4, r9
1a003ac0:	46c2      	mov	sl, r8
1a003ac2:	464b      	mov	r3, r9
1a003ac4:	d354      	bcc.n	1a003b70 <__udivmoddi4+0x298>
1a003ac6:	d051      	beq.n	1a003b6c <__udivmoddi4+0x294>
1a003ac8:	2e00      	cmp	r6, #0
1a003aca:	d069      	beq.n	1a003ba0 <__udivmoddi4+0x2c8>
1a003acc:	ebb1 050a 	subs.w	r5, r1, sl
1a003ad0:	eb64 0403 	sbc.w	r4, r4, r3
1a003ad4:	fa04 fc0c 	lsl.w	ip, r4, ip
1a003ad8:	40fd      	lsrs	r5, r7
1a003ada:	40fc      	lsrs	r4, r7
1a003adc:	ea4c 0505 	orr.w	r5, ip, r5
1a003ae0:	e9c6 5400 	strd	r5, r4, [r6]
1a003ae4:	2700      	movs	r7, #0
1a003ae6:	e747      	b.n	1a003978 <__udivmoddi4+0xa0>
1a003ae8:	f1c2 0320 	rsb	r3, r2, #32
1a003aec:	fa20 f703 	lsr.w	r7, r0, r3
1a003af0:	4095      	lsls	r5, r2
1a003af2:	fa01 f002 	lsl.w	r0, r1, r2
1a003af6:	fa21 f303 	lsr.w	r3, r1, r3
1a003afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003afe:	4338      	orrs	r0, r7
1a003b00:	0c01      	lsrs	r1, r0, #16
1a003b02:	fbb3 f7fe 	udiv	r7, r3, lr
1a003b06:	fa1f f885 	uxth.w	r8, r5
1a003b0a:	fb0e 3317 	mls	r3, lr, r7, r3
1a003b0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003b12:	fb07 f308 	mul.w	r3, r7, r8
1a003b16:	428b      	cmp	r3, r1
1a003b18:	fa04 f402 	lsl.w	r4, r4, r2
1a003b1c:	d907      	bls.n	1a003b2e <__udivmoddi4+0x256>
1a003b1e:	1869      	adds	r1, r5, r1
1a003b20:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003b24:	d22f      	bcs.n	1a003b86 <__udivmoddi4+0x2ae>
1a003b26:	428b      	cmp	r3, r1
1a003b28:	d92d      	bls.n	1a003b86 <__udivmoddi4+0x2ae>
1a003b2a:	3f02      	subs	r7, #2
1a003b2c:	4429      	add	r1, r5
1a003b2e:	1acb      	subs	r3, r1, r3
1a003b30:	b281      	uxth	r1, r0
1a003b32:	fbb3 f0fe 	udiv	r0, r3, lr
1a003b36:	fb0e 3310 	mls	r3, lr, r0, r3
1a003b3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003b3e:	fb00 f308 	mul.w	r3, r0, r8
1a003b42:	428b      	cmp	r3, r1
1a003b44:	d907      	bls.n	1a003b56 <__udivmoddi4+0x27e>
1a003b46:	1869      	adds	r1, r5, r1
1a003b48:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003b4c:	d217      	bcs.n	1a003b7e <__udivmoddi4+0x2a6>
1a003b4e:	428b      	cmp	r3, r1
1a003b50:	d915      	bls.n	1a003b7e <__udivmoddi4+0x2a6>
1a003b52:	3802      	subs	r0, #2
1a003b54:	4429      	add	r1, r5
1a003b56:	1ac9      	subs	r1, r1, r3
1a003b58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003b5c:	e73b      	b.n	1a0039d6 <__udivmoddi4+0xfe>
1a003b5e:	4637      	mov	r7, r6
1a003b60:	4630      	mov	r0, r6
1a003b62:	e709      	b.n	1a003978 <__udivmoddi4+0xa0>
1a003b64:	4607      	mov	r7, r0
1a003b66:	e6e7      	b.n	1a003938 <__udivmoddi4+0x60>
1a003b68:	4618      	mov	r0, r3
1a003b6a:	e6fb      	b.n	1a003964 <__udivmoddi4+0x8c>
1a003b6c:	4541      	cmp	r1, r8
1a003b6e:	d2ab      	bcs.n	1a003ac8 <__udivmoddi4+0x1f0>
1a003b70:	ebb8 0a02 	subs.w	sl, r8, r2
1a003b74:	eb69 020e 	sbc.w	r2, r9, lr
1a003b78:	3801      	subs	r0, #1
1a003b7a:	4613      	mov	r3, r2
1a003b7c:	e7a4      	b.n	1a003ac8 <__udivmoddi4+0x1f0>
1a003b7e:	4660      	mov	r0, ip
1a003b80:	e7e9      	b.n	1a003b56 <__udivmoddi4+0x27e>
1a003b82:	4618      	mov	r0, r3
1a003b84:	e795      	b.n	1a003ab2 <__udivmoddi4+0x1da>
1a003b86:	4667      	mov	r7, ip
1a003b88:	e7d1      	b.n	1a003b2e <__udivmoddi4+0x256>
1a003b8a:	4681      	mov	r9, r0
1a003b8c:	e77c      	b.n	1a003a88 <__udivmoddi4+0x1b0>
1a003b8e:	3802      	subs	r0, #2
1a003b90:	442c      	add	r4, r5
1a003b92:	e747      	b.n	1a003a24 <__udivmoddi4+0x14c>
1a003b94:	f1ac 0c02 	sub.w	ip, ip, #2
1a003b98:	442b      	add	r3, r5
1a003b9a:	e72f      	b.n	1a0039fc <__udivmoddi4+0x124>
1a003b9c:	4638      	mov	r0, r7
1a003b9e:	e708      	b.n	1a0039b2 <__udivmoddi4+0xda>
1a003ba0:	4637      	mov	r7, r6
1a003ba2:	e6e9      	b.n	1a003978 <__udivmoddi4+0xa0>

1a003ba4 <__aeabi_idiv0>:
1a003ba4:	4770      	bx	lr
1a003ba6:	bf00      	nop

1a003ba8 <__libc_init_array>:
1a003ba8:	b570      	push	{r4, r5, r6, lr}
1a003baa:	4e0d      	ldr	r6, [pc, #52]	; (1a003be0 <__libc_init_array+0x38>)
1a003bac:	4c0d      	ldr	r4, [pc, #52]	; (1a003be4 <__libc_init_array+0x3c>)
1a003bae:	1ba4      	subs	r4, r4, r6
1a003bb0:	10a4      	asrs	r4, r4, #2
1a003bb2:	2500      	movs	r5, #0
1a003bb4:	42a5      	cmp	r5, r4
1a003bb6:	d109      	bne.n	1a003bcc <__libc_init_array+0x24>
1a003bb8:	4e0b      	ldr	r6, [pc, #44]	; (1a003be8 <__libc_init_array+0x40>)
1a003bba:	4c0c      	ldr	r4, [pc, #48]	; (1a003bec <__libc_init_array+0x44>)
1a003bbc:	f7fc fcc9 	bl	1a000552 <_init>
1a003bc0:	1ba4      	subs	r4, r4, r6
1a003bc2:	10a4      	asrs	r4, r4, #2
1a003bc4:	2500      	movs	r5, #0
1a003bc6:	42a5      	cmp	r5, r4
1a003bc8:	d105      	bne.n	1a003bd6 <__libc_init_array+0x2e>
1a003bca:	bd70      	pop	{r4, r5, r6, pc}
1a003bcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003bd0:	4798      	blx	r3
1a003bd2:	3501      	adds	r5, #1
1a003bd4:	e7ee      	b.n	1a003bb4 <__libc_init_array+0xc>
1a003bd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003bda:	4798      	blx	r3
1a003bdc:	3501      	adds	r5, #1
1a003bde:	e7f2      	b.n	1a003bc6 <__libc_init_array+0x1e>
1a003be0:	1a004954 	.word	0x1a004954
1a003be4:	1a004954 	.word	0x1a004954
1a003be8:	1a004954 	.word	0x1a004954
1a003bec:	1a004958 	.word	0x1a004958

1a003bf0 <memcpy>:
1a003bf0:	b510      	push	{r4, lr}
1a003bf2:	1e43      	subs	r3, r0, #1
1a003bf4:	440a      	add	r2, r1
1a003bf6:	4291      	cmp	r1, r2
1a003bf8:	d100      	bne.n	1a003bfc <memcpy+0xc>
1a003bfa:	bd10      	pop	{r4, pc}
1a003bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003c00:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003c04:	e7f7      	b.n	1a003bf6 <memcpy+0x6>

1a003c06 <memset>:
1a003c06:	4402      	add	r2, r0
1a003c08:	4603      	mov	r3, r0
1a003c0a:	4293      	cmp	r3, r2
1a003c0c:	d100      	bne.n	1a003c10 <memset+0xa>
1a003c0e:	4770      	bx	lr
1a003c10:	f803 1b01 	strb.w	r1, [r3], #1
1a003c14:	e7f9      	b.n	1a003c0a <memset+0x4>
1a003c16:	Address 0x000000001a003c16 is out of bounds.


1a003c18 <_puts_r>:
1a003c18:	b570      	push	{r4, r5, r6, lr}
1a003c1a:	460e      	mov	r6, r1
1a003c1c:	4605      	mov	r5, r0
1a003c1e:	b118      	cbz	r0, 1a003c28 <_puts_r+0x10>
1a003c20:	6983      	ldr	r3, [r0, #24]
1a003c22:	b90b      	cbnz	r3, 1a003c28 <_puts_r+0x10>
1a003c24:	f000 fa0c 	bl	1a004040 <__sinit>
1a003c28:	69ab      	ldr	r3, [r5, #24]
1a003c2a:	68ac      	ldr	r4, [r5, #8]
1a003c2c:	b913      	cbnz	r3, 1a003c34 <_puts_r+0x1c>
1a003c2e:	4628      	mov	r0, r5
1a003c30:	f000 fa06 	bl	1a004040 <__sinit>
1a003c34:	4b23      	ldr	r3, [pc, #140]	; (1a003cc4 <_puts_r+0xac>)
1a003c36:	429c      	cmp	r4, r3
1a003c38:	d117      	bne.n	1a003c6a <_puts_r+0x52>
1a003c3a:	686c      	ldr	r4, [r5, #4]
1a003c3c:	89a3      	ldrh	r3, [r4, #12]
1a003c3e:	071b      	lsls	r3, r3, #28
1a003c40:	d51d      	bpl.n	1a003c7e <_puts_r+0x66>
1a003c42:	6923      	ldr	r3, [r4, #16]
1a003c44:	b1db      	cbz	r3, 1a003c7e <_puts_r+0x66>
1a003c46:	3e01      	subs	r6, #1
1a003c48:	68a3      	ldr	r3, [r4, #8]
1a003c4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a003c4e:	3b01      	subs	r3, #1
1a003c50:	60a3      	str	r3, [r4, #8]
1a003c52:	b9e9      	cbnz	r1, 1a003c90 <_puts_r+0x78>
1a003c54:	2b00      	cmp	r3, #0
1a003c56:	da2e      	bge.n	1a003cb6 <_puts_r+0x9e>
1a003c58:	4622      	mov	r2, r4
1a003c5a:	210a      	movs	r1, #10
1a003c5c:	4628      	mov	r0, r5
1a003c5e:	f000 f83f 	bl	1a003ce0 <__swbuf_r>
1a003c62:	3001      	adds	r0, #1
1a003c64:	d011      	beq.n	1a003c8a <_puts_r+0x72>
1a003c66:	200a      	movs	r0, #10
1a003c68:	e011      	b.n	1a003c8e <_puts_r+0x76>
1a003c6a:	4b17      	ldr	r3, [pc, #92]	; (1a003cc8 <_puts_r+0xb0>)
1a003c6c:	429c      	cmp	r4, r3
1a003c6e:	d101      	bne.n	1a003c74 <_puts_r+0x5c>
1a003c70:	68ac      	ldr	r4, [r5, #8]
1a003c72:	e7e3      	b.n	1a003c3c <_puts_r+0x24>
1a003c74:	4b15      	ldr	r3, [pc, #84]	; (1a003ccc <_puts_r+0xb4>)
1a003c76:	429c      	cmp	r4, r3
1a003c78:	bf08      	it	eq
1a003c7a:	68ec      	ldreq	r4, [r5, #12]
1a003c7c:	e7de      	b.n	1a003c3c <_puts_r+0x24>
1a003c7e:	4621      	mov	r1, r4
1a003c80:	4628      	mov	r0, r5
1a003c82:	f000 f87f 	bl	1a003d84 <__swsetup_r>
1a003c86:	2800      	cmp	r0, #0
1a003c88:	d0dd      	beq.n	1a003c46 <_puts_r+0x2e>
1a003c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003c8e:	bd70      	pop	{r4, r5, r6, pc}
1a003c90:	2b00      	cmp	r3, #0
1a003c92:	da04      	bge.n	1a003c9e <_puts_r+0x86>
1a003c94:	69a2      	ldr	r2, [r4, #24]
1a003c96:	429a      	cmp	r2, r3
1a003c98:	dc06      	bgt.n	1a003ca8 <_puts_r+0x90>
1a003c9a:	290a      	cmp	r1, #10
1a003c9c:	d004      	beq.n	1a003ca8 <_puts_r+0x90>
1a003c9e:	6823      	ldr	r3, [r4, #0]
1a003ca0:	1c5a      	adds	r2, r3, #1
1a003ca2:	6022      	str	r2, [r4, #0]
1a003ca4:	7019      	strb	r1, [r3, #0]
1a003ca6:	e7cf      	b.n	1a003c48 <_puts_r+0x30>
1a003ca8:	4622      	mov	r2, r4
1a003caa:	4628      	mov	r0, r5
1a003cac:	f000 f818 	bl	1a003ce0 <__swbuf_r>
1a003cb0:	3001      	adds	r0, #1
1a003cb2:	d1c9      	bne.n	1a003c48 <_puts_r+0x30>
1a003cb4:	e7e9      	b.n	1a003c8a <_puts_r+0x72>
1a003cb6:	6823      	ldr	r3, [r4, #0]
1a003cb8:	200a      	movs	r0, #10
1a003cba:	1c5a      	adds	r2, r3, #1
1a003cbc:	6022      	str	r2, [r4, #0]
1a003cbe:	7018      	strb	r0, [r3, #0]
1a003cc0:	e7e5      	b.n	1a003c8e <_puts_r+0x76>
1a003cc2:	bf00      	nop
1a003cc4:	1a004910 	.word	0x1a004910
1a003cc8:	1a004930 	.word	0x1a004930
1a003ccc:	1a0048f0 	.word	0x1a0048f0

1a003cd0 <puts>:
1a003cd0:	4b02      	ldr	r3, [pc, #8]	; (1a003cdc <puts+0xc>)
1a003cd2:	4601      	mov	r1, r0
1a003cd4:	6818      	ldr	r0, [r3, #0]
1a003cd6:	f7ff bf9f 	b.w	1a003c18 <_puts_r>
1a003cda:	bf00      	nop
1a003cdc:	10000040 	.word	0x10000040

1a003ce0 <__swbuf_r>:
1a003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003ce2:	460e      	mov	r6, r1
1a003ce4:	4614      	mov	r4, r2
1a003ce6:	4605      	mov	r5, r0
1a003ce8:	b118      	cbz	r0, 1a003cf2 <__swbuf_r+0x12>
1a003cea:	6983      	ldr	r3, [r0, #24]
1a003cec:	b90b      	cbnz	r3, 1a003cf2 <__swbuf_r+0x12>
1a003cee:	f000 f9a7 	bl	1a004040 <__sinit>
1a003cf2:	4b21      	ldr	r3, [pc, #132]	; (1a003d78 <__swbuf_r+0x98>)
1a003cf4:	429c      	cmp	r4, r3
1a003cf6:	d12a      	bne.n	1a003d4e <__swbuf_r+0x6e>
1a003cf8:	686c      	ldr	r4, [r5, #4]
1a003cfa:	69a3      	ldr	r3, [r4, #24]
1a003cfc:	60a3      	str	r3, [r4, #8]
1a003cfe:	89a3      	ldrh	r3, [r4, #12]
1a003d00:	071a      	lsls	r2, r3, #28
1a003d02:	d52e      	bpl.n	1a003d62 <__swbuf_r+0x82>
1a003d04:	6923      	ldr	r3, [r4, #16]
1a003d06:	b363      	cbz	r3, 1a003d62 <__swbuf_r+0x82>
1a003d08:	6923      	ldr	r3, [r4, #16]
1a003d0a:	6820      	ldr	r0, [r4, #0]
1a003d0c:	1ac0      	subs	r0, r0, r3
1a003d0e:	6963      	ldr	r3, [r4, #20]
1a003d10:	b2f6      	uxtb	r6, r6
1a003d12:	4283      	cmp	r3, r0
1a003d14:	4637      	mov	r7, r6
1a003d16:	dc04      	bgt.n	1a003d22 <__swbuf_r+0x42>
1a003d18:	4621      	mov	r1, r4
1a003d1a:	4628      	mov	r0, r5
1a003d1c:	f000 f926 	bl	1a003f6c <_fflush_r>
1a003d20:	bb28      	cbnz	r0, 1a003d6e <__swbuf_r+0x8e>
1a003d22:	68a3      	ldr	r3, [r4, #8]
1a003d24:	3b01      	subs	r3, #1
1a003d26:	60a3      	str	r3, [r4, #8]
1a003d28:	6823      	ldr	r3, [r4, #0]
1a003d2a:	1c5a      	adds	r2, r3, #1
1a003d2c:	6022      	str	r2, [r4, #0]
1a003d2e:	701e      	strb	r6, [r3, #0]
1a003d30:	6963      	ldr	r3, [r4, #20]
1a003d32:	3001      	adds	r0, #1
1a003d34:	4283      	cmp	r3, r0
1a003d36:	d004      	beq.n	1a003d42 <__swbuf_r+0x62>
1a003d38:	89a3      	ldrh	r3, [r4, #12]
1a003d3a:	07db      	lsls	r3, r3, #31
1a003d3c:	d519      	bpl.n	1a003d72 <__swbuf_r+0x92>
1a003d3e:	2e0a      	cmp	r6, #10
1a003d40:	d117      	bne.n	1a003d72 <__swbuf_r+0x92>
1a003d42:	4621      	mov	r1, r4
1a003d44:	4628      	mov	r0, r5
1a003d46:	f000 f911 	bl	1a003f6c <_fflush_r>
1a003d4a:	b190      	cbz	r0, 1a003d72 <__swbuf_r+0x92>
1a003d4c:	e00f      	b.n	1a003d6e <__swbuf_r+0x8e>
1a003d4e:	4b0b      	ldr	r3, [pc, #44]	; (1a003d7c <__swbuf_r+0x9c>)
1a003d50:	429c      	cmp	r4, r3
1a003d52:	d101      	bne.n	1a003d58 <__swbuf_r+0x78>
1a003d54:	68ac      	ldr	r4, [r5, #8]
1a003d56:	e7d0      	b.n	1a003cfa <__swbuf_r+0x1a>
1a003d58:	4b09      	ldr	r3, [pc, #36]	; (1a003d80 <__swbuf_r+0xa0>)
1a003d5a:	429c      	cmp	r4, r3
1a003d5c:	bf08      	it	eq
1a003d5e:	68ec      	ldreq	r4, [r5, #12]
1a003d60:	e7cb      	b.n	1a003cfa <__swbuf_r+0x1a>
1a003d62:	4621      	mov	r1, r4
1a003d64:	4628      	mov	r0, r5
1a003d66:	f000 f80d 	bl	1a003d84 <__swsetup_r>
1a003d6a:	2800      	cmp	r0, #0
1a003d6c:	d0cc      	beq.n	1a003d08 <__swbuf_r+0x28>
1a003d6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a003d72:	4638      	mov	r0, r7
1a003d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003d76:	bf00      	nop
1a003d78:	1a004910 	.word	0x1a004910
1a003d7c:	1a004930 	.word	0x1a004930
1a003d80:	1a0048f0 	.word	0x1a0048f0

1a003d84 <__swsetup_r>:
1a003d84:	4b32      	ldr	r3, [pc, #200]	; (1a003e50 <__swsetup_r+0xcc>)
1a003d86:	b570      	push	{r4, r5, r6, lr}
1a003d88:	681d      	ldr	r5, [r3, #0]
1a003d8a:	4606      	mov	r6, r0
1a003d8c:	460c      	mov	r4, r1
1a003d8e:	b125      	cbz	r5, 1a003d9a <__swsetup_r+0x16>
1a003d90:	69ab      	ldr	r3, [r5, #24]
1a003d92:	b913      	cbnz	r3, 1a003d9a <__swsetup_r+0x16>
1a003d94:	4628      	mov	r0, r5
1a003d96:	f000 f953 	bl	1a004040 <__sinit>
1a003d9a:	4b2e      	ldr	r3, [pc, #184]	; (1a003e54 <__swsetup_r+0xd0>)
1a003d9c:	429c      	cmp	r4, r3
1a003d9e:	d10f      	bne.n	1a003dc0 <__swsetup_r+0x3c>
1a003da0:	686c      	ldr	r4, [r5, #4]
1a003da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003da6:	b29a      	uxth	r2, r3
1a003da8:	0715      	lsls	r5, r2, #28
1a003daa:	d42c      	bmi.n	1a003e06 <__swsetup_r+0x82>
1a003dac:	06d0      	lsls	r0, r2, #27
1a003dae:	d411      	bmi.n	1a003dd4 <__swsetup_r+0x50>
1a003db0:	2209      	movs	r2, #9
1a003db2:	6032      	str	r2, [r6, #0]
1a003db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003db8:	81a3      	strh	r3, [r4, #12]
1a003dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003dbe:	e03e      	b.n	1a003e3e <__swsetup_r+0xba>
1a003dc0:	4b25      	ldr	r3, [pc, #148]	; (1a003e58 <__swsetup_r+0xd4>)
1a003dc2:	429c      	cmp	r4, r3
1a003dc4:	d101      	bne.n	1a003dca <__swsetup_r+0x46>
1a003dc6:	68ac      	ldr	r4, [r5, #8]
1a003dc8:	e7eb      	b.n	1a003da2 <__swsetup_r+0x1e>
1a003dca:	4b24      	ldr	r3, [pc, #144]	; (1a003e5c <__swsetup_r+0xd8>)
1a003dcc:	429c      	cmp	r4, r3
1a003dce:	bf08      	it	eq
1a003dd0:	68ec      	ldreq	r4, [r5, #12]
1a003dd2:	e7e6      	b.n	1a003da2 <__swsetup_r+0x1e>
1a003dd4:	0751      	lsls	r1, r2, #29
1a003dd6:	d512      	bpl.n	1a003dfe <__swsetup_r+0x7a>
1a003dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003dda:	b141      	cbz	r1, 1a003dee <__swsetup_r+0x6a>
1a003ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003de0:	4299      	cmp	r1, r3
1a003de2:	d002      	beq.n	1a003dea <__swsetup_r+0x66>
1a003de4:	4630      	mov	r0, r6
1a003de6:	f000 fa19 	bl	1a00421c <_free_r>
1a003dea:	2300      	movs	r3, #0
1a003dec:	6363      	str	r3, [r4, #52]	; 0x34
1a003dee:	89a3      	ldrh	r3, [r4, #12]
1a003df0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a003df4:	81a3      	strh	r3, [r4, #12]
1a003df6:	2300      	movs	r3, #0
1a003df8:	6063      	str	r3, [r4, #4]
1a003dfa:	6923      	ldr	r3, [r4, #16]
1a003dfc:	6023      	str	r3, [r4, #0]
1a003dfe:	89a3      	ldrh	r3, [r4, #12]
1a003e00:	f043 0308 	orr.w	r3, r3, #8
1a003e04:	81a3      	strh	r3, [r4, #12]
1a003e06:	6923      	ldr	r3, [r4, #16]
1a003e08:	b94b      	cbnz	r3, 1a003e1e <__swsetup_r+0x9a>
1a003e0a:	89a3      	ldrh	r3, [r4, #12]
1a003e0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a003e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a003e14:	d003      	beq.n	1a003e1e <__swsetup_r+0x9a>
1a003e16:	4621      	mov	r1, r4
1a003e18:	4630      	mov	r0, r6
1a003e1a:	f000 f9bf 	bl	1a00419c <__smakebuf_r>
1a003e1e:	89a2      	ldrh	r2, [r4, #12]
1a003e20:	f012 0301 	ands.w	r3, r2, #1
1a003e24:	d00c      	beq.n	1a003e40 <__swsetup_r+0xbc>
1a003e26:	2300      	movs	r3, #0
1a003e28:	60a3      	str	r3, [r4, #8]
1a003e2a:	6963      	ldr	r3, [r4, #20]
1a003e2c:	425b      	negs	r3, r3
1a003e2e:	61a3      	str	r3, [r4, #24]
1a003e30:	6923      	ldr	r3, [r4, #16]
1a003e32:	b953      	cbnz	r3, 1a003e4a <__swsetup_r+0xc6>
1a003e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003e38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a003e3c:	d1ba      	bne.n	1a003db4 <__swsetup_r+0x30>
1a003e3e:	bd70      	pop	{r4, r5, r6, pc}
1a003e40:	0792      	lsls	r2, r2, #30
1a003e42:	bf58      	it	pl
1a003e44:	6963      	ldrpl	r3, [r4, #20]
1a003e46:	60a3      	str	r3, [r4, #8]
1a003e48:	e7f2      	b.n	1a003e30 <__swsetup_r+0xac>
1a003e4a:	2000      	movs	r0, #0
1a003e4c:	e7f7      	b.n	1a003e3e <__swsetup_r+0xba>
1a003e4e:	bf00      	nop
1a003e50:	10000040 	.word	0x10000040
1a003e54:	1a004910 	.word	0x1a004910
1a003e58:	1a004930 	.word	0x1a004930
1a003e5c:	1a0048f0 	.word	0x1a0048f0

1a003e60 <__sflush_r>:
1a003e60:	898a      	ldrh	r2, [r1, #12]
1a003e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003e66:	4605      	mov	r5, r0
1a003e68:	0710      	lsls	r0, r2, #28
1a003e6a:	460c      	mov	r4, r1
1a003e6c:	d458      	bmi.n	1a003f20 <__sflush_r+0xc0>
1a003e6e:	684b      	ldr	r3, [r1, #4]
1a003e70:	2b00      	cmp	r3, #0
1a003e72:	dc05      	bgt.n	1a003e80 <__sflush_r+0x20>
1a003e74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a003e76:	2b00      	cmp	r3, #0
1a003e78:	dc02      	bgt.n	1a003e80 <__sflush_r+0x20>
1a003e7a:	2000      	movs	r0, #0
1a003e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003e80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003e82:	2e00      	cmp	r6, #0
1a003e84:	d0f9      	beq.n	1a003e7a <__sflush_r+0x1a>
1a003e86:	2300      	movs	r3, #0
1a003e88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003e8c:	682f      	ldr	r7, [r5, #0]
1a003e8e:	6a21      	ldr	r1, [r4, #32]
1a003e90:	602b      	str	r3, [r5, #0]
1a003e92:	d032      	beq.n	1a003efa <__sflush_r+0x9a>
1a003e94:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a003e96:	89a3      	ldrh	r3, [r4, #12]
1a003e98:	075a      	lsls	r2, r3, #29
1a003e9a:	d505      	bpl.n	1a003ea8 <__sflush_r+0x48>
1a003e9c:	6863      	ldr	r3, [r4, #4]
1a003e9e:	1ac0      	subs	r0, r0, r3
1a003ea0:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003ea2:	b10b      	cbz	r3, 1a003ea8 <__sflush_r+0x48>
1a003ea4:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003ea6:	1ac0      	subs	r0, r0, r3
1a003ea8:	2300      	movs	r3, #0
1a003eaa:	4602      	mov	r2, r0
1a003eac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003eae:	6a21      	ldr	r1, [r4, #32]
1a003eb0:	4628      	mov	r0, r5
1a003eb2:	47b0      	blx	r6
1a003eb4:	1c43      	adds	r3, r0, #1
1a003eb6:	89a3      	ldrh	r3, [r4, #12]
1a003eb8:	d106      	bne.n	1a003ec8 <__sflush_r+0x68>
1a003eba:	6829      	ldr	r1, [r5, #0]
1a003ebc:	291d      	cmp	r1, #29
1a003ebe:	d848      	bhi.n	1a003f52 <__sflush_r+0xf2>
1a003ec0:	4a29      	ldr	r2, [pc, #164]	; (1a003f68 <__sflush_r+0x108>)
1a003ec2:	40ca      	lsrs	r2, r1
1a003ec4:	07d6      	lsls	r6, r2, #31
1a003ec6:	d544      	bpl.n	1a003f52 <__sflush_r+0xf2>
1a003ec8:	2200      	movs	r2, #0
1a003eca:	6062      	str	r2, [r4, #4]
1a003ecc:	04d9      	lsls	r1, r3, #19
1a003ece:	6922      	ldr	r2, [r4, #16]
1a003ed0:	6022      	str	r2, [r4, #0]
1a003ed2:	d504      	bpl.n	1a003ede <__sflush_r+0x7e>
1a003ed4:	1c42      	adds	r2, r0, #1
1a003ed6:	d101      	bne.n	1a003edc <__sflush_r+0x7c>
1a003ed8:	682b      	ldr	r3, [r5, #0]
1a003eda:	b903      	cbnz	r3, 1a003ede <__sflush_r+0x7e>
1a003edc:	6560      	str	r0, [r4, #84]	; 0x54
1a003ede:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003ee0:	602f      	str	r7, [r5, #0]
1a003ee2:	2900      	cmp	r1, #0
1a003ee4:	d0c9      	beq.n	1a003e7a <__sflush_r+0x1a>
1a003ee6:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003eea:	4299      	cmp	r1, r3
1a003eec:	d002      	beq.n	1a003ef4 <__sflush_r+0x94>
1a003eee:	4628      	mov	r0, r5
1a003ef0:	f000 f994 	bl	1a00421c <_free_r>
1a003ef4:	2000      	movs	r0, #0
1a003ef6:	6360      	str	r0, [r4, #52]	; 0x34
1a003ef8:	e7c0      	b.n	1a003e7c <__sflush_r+0x1c>
1a003efa:	2301      	movs	r3, #1
1a003efc:	4628      	mov	r0, r5
1a003efe:	47b0      	blx	r6
1a003f00:	1c41      	adds	r1, r0, #1
1a003f02:	d1c8      	bne.n	1a003e96 <__sflush_r+0x36>
1a003f04:	682b      	ldr	r3, [r5, #0]
1a003f06:	2b00      	cmp	r3, #0
1a003f08:	d0c5      	beq.n	1a003e96 <__sflush_r+0x36>
1a003f0a:	2b1d      	cmp	r3, #29
1a003f0c:	d001      	beq.n	1a003f12 <__sflush_r+0xb2>
1a003f0e:	2b16      	cmp	r3, #22
1a003f10:	d101      	bne.n	1a003f16 <__sflush_r+0xb6>
1a003f12:	602f      	str	r7, [r5, #0]
1a003f14:	e7b1      	b.n	1a003e7a <__sflush_r+0x1a>
1a003f16:	89a3      	ldrh	r3, [r4, #12]
1a003f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003f1c:	81a3      	strh	r3, [r4, #12]
1a003f1e:	e7ad      	b.n	1a003e7c <__sflush_r+0x1c>
1a003f20:	690f      	ldr	r7, [r1, #16]
1a003f22:	2f00      	cmp	r7, #0
1a003f24:	d0a9      	beq.n	1a003e7a <__sflush_r+0x1a>
1a003f26:	0793      	lsls	r3, r2, #30
1a003f28:	680e      	ldr	r6, [r1, #0]
1a003f2a:	bf08      	it	eq
1a003f2c:	694b      	ldreq	r3, [r1, #20]
1a003f2e:	600f      	str	r7, [r1, #0]
1a003f30:	bf18      	it	ne
1a003f32:	2300      	movne	r3, #0
1a003f34:	eba6 0807 	sub.w	r8, r6, r7
1a003f38:	608b      	str	r3, [r1, #8]
1a003f3a:	f1b8 0f00 	cmp.w	r8, #0
1a003f3e:	dd9c      	ble.n	1a003e7a <__sflush_r+0x1a>
1a003f40:	4643      	mov	r3, r8
1a003f42:	463a      	mov	r2, r7
1a003f44:	6a21      	ldr	r1, [r4, #32]
1a003f46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a003f48:	4628      	mov	r0, r5
1a003f4a:	47b0      	blx	r6
1a003f4c:	2800      	cmp	r0, #0
1a003f4e:	dc06      	bgt.n	1a003f5e <__sflush_r+0xfe>
1a003f50:	89a3      	ldrh	r3, [r4, #12]
1a003f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003f56:	81a3      	strh	r3, [r4, #12]
1a003f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003f5c:	e78e      	b.n	1a003e7c <__sflush_r+0x1c>
1a003f5e:	4407      	add	r7, r0
1a003f60:	eba8 0800 	sub.w	r8, r8, r0
1a003f64:	e7e9      	b.n	1a003f3a <__sflush_r+0xda>
1a003f66:	bf00      	nop
1a003f68:	20400001 	.word	0x20400001

1a003f6c <_fflush_r>:
1a003f6c:	b538      	push	{r3, r4, r5, lr}
1a003f6e:	690b      	ldr	r3, [r1, #16]
1a003f70:	4605      	mov	r5, r0
1a003f72:	460c      	mov	r4, r1
1a003f74:	b1db      	cbz	r3, 1a003fae <_fflush_r+0x42>
1a003f76:	b118      	cbz	r0, 1a003f80 <_fflush_r+0x14>
1a003f78:	6983      	ldr	r3, [r0, #24]
1a003f7a:	b90b      	cbnz	r3, 1a003f80 <_fflush_r+0x14>
1a003f7c:	f000 f860 	bl	1a004040 <__sinit>
1a003f80:	4b0c      	ldr	r3, [pc, #48]	; (1a003fb4 <_fflush_r+0x48>)
1a003f82:	429c      	cmp	r4, r3
1a003f84:	d109      	bne.n	1a003f9a <_fflush_r+0x2e>
1a003f86:	686c      	ldr	r4, [r5, #4]
1a003f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003f8c:	b17b      	cbz	r3, 1a003fae <_fflush_r+0x42>
1a003f8e:	4621      	mov	r1, r4
1a003f90:	4628      	mov	r0, r5
1a003f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003f96:	f7ff bf63 	b.w	1a003e60 <__sflush_r>
1a003f9a:	4b07      	ldr	r3, [pc, #28]	; (1a003fb8 <_fflush_r+0x4c>)
1a003f9c:	429c      	cmp	r4, r3
1a003f9e:	d101      	bne.n	1a003fa4 <_fflush_r+0x38>
1a003fa0:	68ac      	ldr	r4, [r5, #8]
1a003fa2:	e7f1      	b.n	1a003f88 <_fflush_r+0x1c>
1a003fa4:	4b05      	ldr	r3, [pc, #20]	; (1a003fbc <_fflush_r+0x50>)
1a003fa6:	429c      	cmp	r4, r3
1a003fa8:	bf08      	it	eq
1a003faa:	68ec      	ldreq	r4, [r5, #12]
1a003fac:	e7ec      	b.n	1a003f88 <_fflush_r+0x1c>
1a003fae:	2000      	movs	r0, #0
1a003fb0:	bd38      	pop	{r3, r4, r5, pc}
1a003fb2:	bf00      	nop
1a003fb4:	1a004910 	.word	0x1a004910
1a003fb8:	1a004930 	.word	0x1a004930
1a003fbc:	1a0048f0 	.word	0x1a0048f0

1a003fc0 <std>:
1a003fc0:	2300      	movs	r3, #0
1a003fc2:	b510      	push	{r4, lr}
1a003fc4:	4604      	mov	r4, r0
1a003fc6:	e9c0 3300 	strd	r3, r3, [r0]
1a003fca:	6083      	str	r3, [r0, #8]
1a003fcc:	8181      	strh	r1, [r0, #12]
1a003fce:	6643      	str	r3, [r0, #100]	; 0x64
1a003fd0:	81c2      	strh	r2, [r0, #14]
1a003fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a003fd6:	6183      	str	r3, [r0, #24]
1a003fd8:	4619      	mov	r1, r3
1a003fda:	2208      	movs	r2, #8
1a003fdc:	305c      	adds	r0, #92	; 0x5c
1a003fde:	f7ff fe12 	bl	1a003c06 <memset>
1a003fe2:	4b05      	ldr	r3, [pc, #20]	; (1a003ff8 <std+0x38>)
1a003fe4:	6263      	str	r3, [r4, #36]	; 0x24
1a003fe6:	4b05      	ldr	r3, [pc, #20]	; (1a003ffc <std+0x3c>)
1a003fe8:	62a3      	str	r3, [r4, #40]	; 0x28
1a003fea:	4b05      	ldr	r3, [pc, #20]	; (1a004000 <std+0x40>)
1a003fec:	62e3      	str	r3, [r4, #44]	; 0x2c
1a003fee:	4b05      	ldr	r3, [pc, #20]	; (1a004004 <std+0x44>)
1a003ff0:	6224      	str	r4, [r4, #32]
1a003ff2:	6323      	str	r3, [r4, #48]	; 0x30
1a003ff4:	bd10      	pop	{r4, pc}
1a003ff6:	bf00      	nop
1a003ff8:	1a00436d 	.word	0x1a00436d
1a003ffc:	1a00438f 	.word	0x1a00438f
1a004000:	1a0043c7 	.word	0x1a0043c7
1a004004:	1a0043eb 	.word	0x1a0043eb

1a004008 <_cleanup_r>:
1a004008:	4901      	ldr	r1, [pc, #4]	; (1a004010 <_cleanup_r+0x8>)
1a00400a:	f000 b885 	b.w	1a004118 <_fwalk_reent>
1a00400e:	bf00      	nop
1a004010:	1a003f6d 	.word	0x1a003f6d

1a004014 <__sfmoreglue>:
1a004014:	b570      	push	{r4, r5, r6, lr}
1a004016:	1e4a      	subs	r2, r1, #1
1a004018:	2568      	movs	r5, #104	; 0x68
1a00401a:	4355      	muls	r5, r2
1a00401c:	460e      	mov	r6, r1
1a00401e:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a004022:	f000 f949 	bl	1a0042b8 <_malloc_r>
1a004026:	4604      	mov	r4, r0
1a004028:	b140      	cbz	r0, 1a00403c <__sfmoreglue+0x28>
1a00402a:	2100      	movs	r1, #0
1a00402c:	e9c0 1600 	strd	r1, r6, [r0]
1a004030:	300c      	adds	r0, #12
1a004032:	60a0      	str	r0, [r4, #8]
1a004034:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a004038:	f7ff fde5 	bl	1a003c06 <memset>
1a00403c:	4620      	mov	r0, r4
1a00403e:	bd70      	pop	{r4, r5, r6, pc}

1a004040 <__sinit>:
1a004040:	6983      	ldr	r3, [r0, #24]
1a004042:	b510      	push	{r4, lr}
1a004044:	4604      	mov	r4, r0
1a004046:	bb33      	cbnz	r3, 1a004096 <__sinit+0x56>
1a004048:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a00404c:	6503      	str	r3, [r0, #80]	; 0x50
1a00404e:	4b12      	ldr	r3, [pc, #72]	; (1a004098 <__sinit+0x58>)
1a004050:	4a12      	ldr	r2, [pc, #72]	; (1a00409c <__sinit+0x5c>)
1a004052:	681b      	ldr	r3, [r3, #0]
1a004054:	6282      	str	r2, [r0, #40]	; 0x28
1a004056:	4298      	cmp	r0, r3
1a004058:	bf04      	itt	eq
1a00405a:	2301      	moveq	r3, #1
1a00405c:	6183      	streq	r3, [r0, #24]
1a00405e:	f000 f81f 	bl	1a0040a0 <__sfp>
1a004062:	6060      	str	r0, [r4, #4]
1a004064:	4620      	mov	r0, r4
1a004066:	f000 f81b 	bl	1a0040a0 <__sfp>
1a00406a:	60a0      	str	r0, [r4, #8]
1a00406c:	4620      	mov	r0, r4
1a00406e:	f000 f817 	bl	1a0040a0 <__sfp>
1a004072:	2200      	movs	r2, #0
1a004074:	60e0      	str	r0, [r4, #12]
1a004076:	2104      	movs	r1, #4
1a004078:	6860      	ldr	r0, [r4, #4]
1a00407a:	f7ff ffa1 	bl	1a003fc0 <std>
1a00407e:	2201      	movs	r2, #1
1a004080:	2109      	movs	r1, #9
1a004082:	68a0      	ldr	r0, [r4, #8]
1a004084:	f7ff ff9c 	bl	1a003fc0 <std>
1a004088:	2202      	movs	r2, #2
1a00408a:	2112      	movs	r1, #18
1a00408c:	68e0      	ldr	r0, [r4, #12]
1a00408e:	f7ff ff97 	bl	1a003fc0 <std>
1a004092:	2301      	movs	r3, #1
1a004094:	61a3      	str	r3, [r4, #24]
1a004096:	bd10      	pop	{r4, pc}
1a004098:	1a004950 	.word	0x1a004950
1a00409c:	1a004009 	.word	0x1a004009

1a0040a0 <__sfp>:
1a0040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0040a2:	4b1b      	ldr	r3, [pc, #108]	; (1a004110 <__sfp+0x70>)
1a0040a4:	681e      	ldr	r6, [r3, #0]
1a0040a6:	69b3      	ldr	r3, [r6, #24]
1a0040a8:	4607      	mov	r7, r0
1a0040aa:	b913      	cbnz	r3, 1a0040b2 <__sfp+0x12>
1a0040ac:	4630      	mov	r0, r6
1a0040ae:	f7ff ffc7 	bl	1a004040 <__sinit>
1a0040b2:	3648      	adds	r6, #72	; 0x48
1a0040b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a0040b8:	3b01      	subs	r3, #1
1a0040ba:	d503      	bpl.n	1a0040c4 <__sfp+0x24>
1a0040bc:	6833      	ldr	r3, [r6, #0]
1a0040be:	b133      	cbz	r3, 1a0040ce <__sfp+0x2e>
1a0040c0:	6836      	ldr	r6, [r6, #0]
1a0040c2:	e7f7      	b.n	1a0040b4 <__sfp+0x14>
1a0040c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0040c8:	b16d      	cbz	r5, 1a0040e6 <__sfp+0x46>
1a0040ca:	3468      	adds	r4, #104	; 0x68
1a0040cc:	e7f4      	b.n	1a0040b8 <__sfp+0x18>
1a0040ce:	2104      	movs	r1, #4
1a0040d0:	4638      	mov	r0, r7
1a0040d2:	f7ff ff9f 	bl	1a004014 <__sfmoreglue>
1a0040d6:	6030      	str	r0, [r6, #0]
1a0040d8:	2800      	cmp	r0, #0
1a0040da:	d1f1      	bne.n	1a0040c0 <__sfp+0x20>
1a0040dc:	230c      	movs	r3, #12
1a0040de:	603b      	str	r3, [r7, #0]
1a0040e0:	4604      	mov	r4, r0
1a0040e2:	4620      	mov	r0, r4
1a0040e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0040e6:	4b0b      	ldr	r3, [pc, #44]	; (1a004114 <__sfp+0x74>)
1a0040e8:	6665      	str	r5, [r4, #100]	; 0x64
1a0040ea:	e9c4 5500 	strd	r5, r5, [r4]
1a0040ee:	60a5      	str	r5, [r4, #8]
1a0040f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a0040f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a0040f8:	2208      	movs	r2, #8
1a0040fa:	4629      	mov	r1, r5
1a0040fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a004100:	f7ff fd81 	bl	1a003c06 <memset>
1a004104:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a004108:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a00410c:	e7e9      	b.n	1a0040e2 <__sfp+0x42>
1a00410e:	bf00      	nop
1a004110:	1a004950 	.word	0x1a004950
1a004114:	ffff0001 	.word	0xffff0001

1a004118 <_fwalk_reent>:
1a004118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00411c:	4680      	mov	r8, r0
1a00411e:	4689      	mov	r9, r1
1a004120:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a004124:	2600      	movs	r6, #0
1a004126:	b914      	cbnz	r4, 1a00412e <_fwalk_reent+0x16>
1a004128:	4630      	mov	r0, r6
1a00412a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00412e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a004132:	3f01      	subs	r7, #1
1a004134:	d501      	bpl.n	1a00413a <_fwalk_reent+0x22>
1a004136:	6824      	ldr	r4, [r4, #0]
1a004138:	e7f5      	b.n	1a004126 <_fwalk_reent+0xe>
1a00413a:	89ab      	ldrh	r3, [r5, #12]
1a00413c:	2b01      	cmp	r3, #1
1a00413e:	d907      	bls.n	1a004150 <_fwalk_reent+0x38>
1a004140:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a004144:	3301      	adds	r3, #1
1a004146:	d003      	beq.n	1a004150 <_fwalk_reent+0x38>
1a004148:	4629      	mov	r1, r5
1a00414a:	4640      	mov	r0, r8
1a00414c:	47c8      	blx	r9
1a00414e:	4306      	orrs	r6, r0
1a004150:	3568      	adds	r5, #104	; 0x68
1a004152:	e7ee      	b.n	1a004132 <_fwalk_reent+0x1a>

1a004154 <__swhatbuf_r>:
1a004154:	b570      	push	{r4, r5, r6, lr}
1a004156:	460e      	mov	r6, r1
1a004158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00415c:	2900      	cmp	r1, #0
1a00415e:	b096      	sub	sp, #88	; 0x58
1a004160:	4614      	mov	r4, r2
1a004162:	461d      	mov	r5, r3
1a004164:	da07      	bge.n	1a004176 <__swhatbuf_r+0x22>
1a004166:	2300      	movs	r3, #0
1a004168:	602b      	str	r3, [r5, #0]
1a00416a:	89b3      	ldrh	r3, [r6, #12]
1a00416c:	061a      	lsls	r2, r3, #24
1a00416e:	d410      	bmi.n	1a004192 <__swhatbuf_r+0x3e>
1a004170:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a004174:	e00e      	b.n	1a004194 <__swhatbuf_r+0x40>
1a004176:	466a      	mov	r2, sp
1a004178:	f7fc f9f1 	bl	1a00055e <_fstat_r>
1a00417c:	2800      	cmp	r0, #0
1a00417e:	dbf2      	blt.n	1a004166 <__swhatbuf_r+0x12>
1a004180:	9a01      	ldr	r2, [sp, #4]
1a004182:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a004186:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a00418a:	425a      	negs	r2, r3
1a00418c:	415a      	adcs	r2, r3
1a00418e:	602a      	str	r2, [r5, #0]
1a004190:	e7ee      	b.n	1a004170 <__swhatbuf_r+0x1c>
1a004192:	2340      	movs	r3, #64	; 0x40
1a004194:	2000      	movs	r0, #0
1a004196:	6023      	str	r3, [r4, #0]
1a004198:	b016      	add	sp, #88	; 0x58
1a00419a:	bd70      	pop	{r4, r5, r6, pc}

1a00419c <__smakebuf_r>:
1a00419c:	898b      	ldrh	r3, [r1, #12]
1a00419e:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a0041a0:	079d      	lsls	r5, r3, #30
1a0041a2:	4606      	mov	r6, r0
1a0041a4:	460c      	mov	r4, r1
1a0041a6:	d507      	bpl.n	1a0041b8 <__smakebuf_r+0x1c>
1a0041a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a0041ac:	6023      	str	r3, [r4, #0]
1a0041ae:	6123      	str	r3, [r4, #16]
1a0041b0:	2301      	movs	r3, #1
1a0041b2:	6163      	str	r3, [r4, #20]
1a0041b4:	b002      	add	sp, #8
1a0041b6:	bd70      	pop	{r4, r5, r6, pc}
1a0041b8:	ab01      	add	r3, sp, #4
1a0041ba:	466a      	mov	r2, sp
1a0041bc:	f7ff ffca 	bl	1a004154 <__swhatbuf_r>
1a0041c0:	9900      	ldr	r1, [sp, #0]
1a0041c2:	4605      	mov	r5, r0
1a0041c4:	4630      	mov	r0, r6
1a0041c6:	f000 f877 	bl	1a0042b8 <_malloc_r>
1a0041ca:	b948      	cbnz	r0, 1a0041e0 <__smakebuf_r+0x44>
1a0041cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0041d0:	059a      	lsls	r2, r3, #22
1a0041d2:	d4ef      	bmi.n	1a0041b4 <__smakebuf_r+0x18>
1a0041d4:	f023 0303 	bic.w	r3, r3, #3
1a0041d8:	f043 0302 	orr.w	r3, r3, #2
1a0041dc:	81a3      	strh	r3, [r4, #12]
1a0041de:	e7e3      	b.n	1a0041a8 <__smakebuf_r+0xc>
1a0041e0:	4b0d      	ldr	r3, [pc, #52]	; (1a004218 <__smakebuf_r+0x7c>)
1a0041e2:	62b3      	str	r3, [r6, #40]	; 0x28
1a0041e4:	89a3      	ldrh	r3, [r4, #12]
1a0041e6:	6020      	str	r0, [r4, #0]
1a0041e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0041ec:	81a3      	strh	r3, [r4, #12]
1a0041ee:	9b00      	ldr	r3, [sp, #0]
1a0041f0:	6163      	str	r3, [r4, #20]
1a0041f2:	9b01      	ldr	r3, [sp, #4]
1a0041f4:	6120      	str	r0, [r4, #16]
1a0041f6:	b15b      	cbz	r3, 1a004210 <__smakebuf_r+0x74>
1a0041f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0041fc:	4630      	mov	r0, r6
1a0041fe:	f7fc f9b3 	bl	1a000568 <_isatty_r>
1a004202:	b128      	cbz	r0, 1a004210 <__smakebuf_r+0x74>
1a004204:	89a3      	ldrh	r3, [r4, #12]
1a004206:	f023 0303 	bic.w	r3, r3, #3
1a00420a:	f043 0301 	orr.w	r3, r3, #1
1a00420e:	81a3      	strh	r3, [r4, #12]
1a004210:	89a3      	ldrh	r3, [r4, #12]
1a004212:	431d      	orrs	r5, r3
1a004214:	81a5      	strh	r5, [r4, #12]
1a004216:	e7cd      	b.n	1a0041b4 <__smakebuf_r+0x18>
1a004218:	1a004009 	.word	0x1a004009

1a00421c <_free_r>:
1a00421c:	b538      	push	{r3, r4, r5, lr}
1a00421e:	4605      	mov	r5, r0
1a004220:	2900      	cmp	r1, #0
1a004222:	d045      	beq.n	1a0042b0 <_free_r+0x94>
1a004224:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004228:	1f0c      	subs	r4, r1, #4
1a00422a:	2b00      	cmp	r3, #0
1a00422c:	bfb8      	it	lt
1a00422e:	18e4      	addlt	r4, r4, r3
1a004230:	f000 f8df 	bl	1a0043f2 <__malloc_lock>
1a004234:	4a1f      	ldr	r2, [pc, #124]	; (1a0042b4 <_free_r+0x98>)
1a004236:	6813      	ldr	r3, [r2, #0]
1a004238:	4610      	mov	r0, r2
1a00423a:	b933      	cbnz	r3, 1a00424a <_free_r+0x2e>
1a00423c:	6063      	str	r3, [r4, #4]
1a00423e:	6014      	str	r4, [r2, #0]
1a004240:	4628      	mov	r0, r5
1a004242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004246:	f000 b8d5 	b.w	1a0043f4 <__malloc_unlock>
1a00424a:	42a3      	cmp	r3, r4
1a00424c:	d90c      	bls.n	1a004268 <_free_r+0x4c>
1a00424e:	6821      	ldr	r1, [r4, #0]
1a004250:	1862      	adds	r2, r4, r1
1a004252:	4293      	cmp	r3, r2
1a004254:	bf04      	itt	eq
1a004256:	681a      	ldreq	r2, [r3, #0]
1a004258:	685b      	ldreq	r3, [r3, #4]
1a00425a:	6063      	str	r3, [r4, #4]
1a00425c:	bf04      	itt	eq
1a00425e:	1852      	addeq	r2, r2, r1
1a004260:	6022      	streq	r2, [r4, #0]
1a004262:	6004      	str	r4, [r0, #0]
1a004264:	e7ec      	b.n	1a004240 <_free_r+0x24>
1a004266:	4613      	mov	r3, r2
1a004268:	685a      	ldr	r2, [r3, #4]
1a00426a:	b10a      	cbz	r2, 1a004270 <_free_r+0x54>
1a00426c:	42a2      	cmp	r2, r4
1a00426e:	d9fa      	bls.n	1a004266 <_free_r+0x4a>
1a004270:	6819      	ldr	r1, [r3, #0]
1a004272:	1858      	adds	r0, r3, r1
1a004274:	42a0      	cmp	r0, r4
1a004276:	d10b      	bne.n	1a004290 <_free_r+0x74>
1a004278:	6820      	ldr	r0, [r4, #0]
1a00427a:	4401      	add	r1, r0
1a00427c:	1858      	adds	r0, r3, r1
1a00427e:	4282      	cmp	r2, r0
1a004280:	6019      	str	r1, [r3, #0]
1a004282:	d1dd      	bne.n	1a004240 <_free_r+0x24>
1a004284:	6810      	ldr	r0, [r2, #0]
1a004286:	6852      	ldr	r2, [r2, #4]
1a004288:	605a      	str	r2, [r3, #4]
1a00428a:	4401      	add	r1, r0
1a00428c:	6019      	str	r1, [r3, #0]
1a00428e:	e7d7      	b.n	1a004240 <_free_r+0x24>
1a004290:	d902      	bls.n	1a004298 <_free_r+0x7c>
1a004292:	230c      	movs	r3, #12
1a004294:	602b      	str	r3, [r5, #0]
1a004296:	e7d3      	b.n	1a004240 <_free_r+0x24>
1a004298:	6820      	ldr	r0, [r4, #0]
1a00429a:	1821      	adds	r1, r4, r0
1a00429c:	428a      	cmp	r2, r1
1a00429e:	bf04      	itt	eq
1a0042a0:	6811      	ldreq	r1, [r2, #0]
1a0042a2:	6852      	ldreq	r2, [r2, #4]
1a0042a4:	6062      	str	r2, [r4, #4]
1a0042a6:	bf04      	itt	eq
1a0042a8:	1809      	addeq	r1, r1, r0
1a0042aa:	6021      	streq	r1, [r4, #0]
1a0042ac:	605c      	str	r4, [r3, #4]
1a0042ae:	e7c7      	b.n	1a004240 <_free_r+0x24>
1a0042b0:	bd38      	pop	{r3, r4, r5, pc}
1a0042b2:	bf00      	nop
1a0042b4:	10002b38 	.word	0x10002b38

1a0042b8 <_malloc_r>:
1a0042b8:	b570      	push	{r4, r5, r6, lr}
1a0042ba:	1ccd      	adds	r5, r1, #3
1a0042bc:	f025 0503 	bic.w	r5, r5, #3
1a0042c0:	3508      	adds	r5, #8
1a0042c2:	2d0c      	cmp	r5, #12
1a0042c4:	bf38      	it	cc
1a0042c6:	250c      	movcc	r5, #12
1a0042c8:	2d00      	cmp	r5, #0
1a0042ca:	4606      	mov	r6, r0
1a0042cc:	db01      	blt.n	1a0042d2 <_malloc_r+0x1a>
1a0042ce:	42a9      	cmp	r1, r5
1a0042d0:	d903      	bls.n	1a0042da <_malloc_r+0x22>
1a0042d2:	230c      	movs	r3, #12
1a0042d4:	6033      	str	r3, [r6, #0]
1a0042d6:	2000      	movs	r0, #0
1a0042d8:	bd70      	pop	{r4, r5, r6, pc}
1a0042da:	f000 f88a 	bl	1a0043f2 <__malloc_lock>
1a0042de:	4a21      	ldr	r2, [pc, #132]	; (1a004364 <_malloc_r+0xac>)
1a0042e0:	6814      	ldr	r4, [r2, #0]
1a0042e2:	4621      	mov	r1, r4
1a0042e4:	b991      	cbnz	r1, 1a00430c <_malloc_r+0x54>
1a0042e6:	4c20      	ldr	r4, [pc, #128]	; (1a004368 <_malloc_r+0xb0>)
1a0042e8:	6823      	ldr	r3, [r4, #0]
1a0042ea:	b91b      	cbnz	r3, 1a0042f4 <_malloc_r+0x3c>
1a0042ec:	4630      	mov	r0, r6
1a0042ee:	f7fc f985 	bl	1a0005fc <_sbrk_r>
1a0042f2:	6020      	str	r0, [r4, #0]
1a0042f4:	4629      	mov	r1, r5
1a0042f6:	4630      	mov	r0, r6
1a0042f8:	f7fc f980 	bl	1a0005fc <_sbrk_r>
1a0042fc:	1c43      	adds	r3, r0, #1
1a0042fe:	d124      	bne.n	1a00434a <_malloc_r+0x92>
1a004300:	230c      	movs	r3, #12
1a004302:	6033      	str	r3, [r6, #0]
1a004304:	4630      	mov	r0, r6
1a004306:	f000 f875 	bl	1a0043f4 <__malloc_unlock>
1a00430a:	e7e4      	b.n	1a0042d6 <_malloc_r+0x1e>
1a00430c:	680b      	ldr	r3, [r1, #0]
1a00430e:	1b5b      	subs	r3, r3, r5
1a004310:	d418      	bmi.n	1a004344 <_malloc_r+0x8c>
1a004312:	2b0b      	cmp	r3, #11
1a004314:	d90f      	bls.n	1a004336 <_malloc_r+0x7e>
1a004316:	600b      	str	r3, [r1, #0]
1a004318:	50cd      	str	r5, [r1, r3]
1a00431a:	18cc      	adds	r4, r1, r3
1a00431c:	4630      	mov	r0, r6
1a00431e:	f000 f869 	bl	1a0043f4 <__malloc_unlock>
1a004322:	f104 000b 	add.w	r0, r4, #11
1a004326:	1d23      	adds	r3, r4, #4
1a004328:	f020 0007 	bic.w	r0, r0, #7
1a00432c:	1ac3      	subs	r3, r0, r3
1a00432e:	d0d3      	beq.n	1a0042d8 <_malloc_r+0x20>
1a004330:	425a      	negs	r2, r3
1a004332:	50e2      	str	r2, [r4, r3]
1a004334:	e7d0      	b.n	1a0042d8 <_malloc_r+0x20>
1a004336:	428c      	cmp	r4, r1
1a004338:	684b      	ldr	r3, [r1, #4]
1a00433a:	bf16      	itet	ne
1a00433c:	6063      	strne	r3, [r4, #4]
1a00433e:	6013      	streq	r3, [r2, #0]
1a004340:	460c      	movne	r4, r1
1a004342:	e7eb      	b.n	1a00431c <_malloc_r+0x64>
1a004344:	460c      	mov	r4, r1
1a004346:	6849      	ldr	r1, [r1, #4]
1a004348:	e7cc      	b.n	1a0042e4 <_malloc_r+0x2c>
1a00434a:	1cc4      	adds	r4, r0, #3
1a00434c:	f024 0403 	bic.w	r4, r4, #3
1a004350:	42a0      	cmp	r0, r4
1a004352:	d005      	beq.n	1a004360 <_malloc_r+0xa8>
1a004354:	1a21      	subs	r1, r4, r0
1a004356:	4630      	mov	r0, r6
1a004358:	f7fc f950 	bl	1a0005fc <_sbrk_r>
1a00435c:	3001      	adds	r0, #1
1a00435e:	d0cf      	beq.n	1a004300 <_malloc_r+0x48>
1a004360:	6025      	str	r5, [r4, #0]
1a004362:	e7db      	b.n	1a00431c <_malloc_r+0x64>
1a004364:	10002b38 	.word	0x10002b38
1a004368:	10002b3c 	.word	0x10002b3c

1a00436c <__sread>:
1a00436c:	b510      	push	{r4, lr}
1a00436e:	460c      	mov	r4, r1
1a004370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004374:	f7fc f906 	bl	1a000584 <_read_r>
1a004378:	2800      	cmp	r0, #0
1a00437a:	bfab      	itete	ge
1a00437c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a00437e:	89a3      	ldrhlt	r3, [r4, #12]
1a004380:	181b      	addge	r3, r3, r0
1a004382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a004386:	bfac      	ite	ge
1a004388:	6563      	strge	r3, [r4, #84]	; 0x54
1a00438a:	81a3      	strhlt	r3, [r4, #12]
1a00438c:	bd10      	pop	{r4, pc}

1a00438e <__swrite>:
1a00438e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004392:	461f      	mov	r7, r3
1a004394:	898b      	ldrh	r3, [r1, #12]
1a004396:	05db      	lsls	r3, r3, #23
1a004398:	4605      	mov	r5, r0
1a00439a:	460c      	mov	r4, r1
1a00439c:	4616      	mov	r6, r2
1a00439e:	d505      	bpl.n	1a0043ac <__swrite+0x1e>
1a0043a0:	2302      	movs	r3, #2
1a0043a2:	2200      	movs	r2, #0
1a0043a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0043a8:	f7fc f8e7 	bl	1a00057a <_lseek_r>
1a0043ac:	89a3      	ldrh	r3, [r4, #12]
1a0043ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0043b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0043b6:	81a3      	strh	r3, [r4, #12]
1a0043b8:	4632      	mov	r2, r6
1a0043ba:	463b      	mov	r3, r7
1a0043bc:	4628      	mov	r0, r5
1a0043be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0043c2:	f7fc b906 	b.w	1a0005d2 <_write_r>

1a0043c6 <__sseek>:
1a0043c6:	b510      	push	{r4, lr}
1a0043c8:	460c      	mov	r4, r1
1a0043ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0043ce:	f7fc f8d4 	bl	1a00057a <_lseek_r>
1a0043d2:	1c43      	adds	r3, r0, #1
1a0043d4:	89a3      	ldrh	r3, [r4, #12]
1a0043d6:	bf15      	itete	ne
1a0043d8:	6560      	strne	r0, [r4, #84]	; 0x54
1a0043da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0043de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0043e2:	81a3      	strheq	r3, [r4, #12]
1a0043e4:	bf18      	it	ne
1a0043e6:	81a3      	strhne	r3, [r4, #12]
1a0043e8:	bd10      	pop	{r4, pc}

1a0043ea <__sclose>:
1a0043ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0043ee:	f7fc b8b1 	b.w	1a000554 <_close_r>

1a0043f2 <__malloc_lock>:
1a0043f2:	4770      	bx	lr

1a0043f4 <__malloc_unlock>:
1a0043f4:	4770      	bx	lr
1a0043f6:	ffff 6c42 	vdup.8	q11, d2[7]
1a0043fa:	6e69      	.short	0x6e69
1a0043fc:	6320796b 	.word	0x6320796b
1a004400:	66206e6f 	.word	0x66206e6f
1a004404:	52656572 	.word	0x52656572
1a004408:	20534f54 	.word	0x20534f54
1a00440c:	41732079 	.word	0x41732079
1a004410:	002e4950 	.word	0x002e4950
1a004414:	6f727245 	.word	0x6f727245
1a004418:	6e652072 	.word	0x6e652072
1a00441c:	69734120 	.word	0x69734120
1a004420:	63616e67 	.word	0x63616e67
1a004424:	206e6f69 	.word	0x206e6f69
1a004428:	53206564 	.word	0x53206564
1a00442c:	66616d65 	.word	0x66616d65
1a004430:	206f726f 	.word	0x206f726f
1a004434:	65766527 	.word	0x65766527
1a004438:	426f746e 	.word	0x426f746e
1a00443c:	6e6f746f 	.word	0x6e6f746f
1a004440:	72656d45 	.word	0x72656d45
1a004444:	636e6567 	.word	0x636e6567
1a004448:	75506169 	.word	0x75506169
1a00444c:	6461736c 	.word	0x6461736c
1a004450:	0d20276f 	.word	0x0d20276f
1a004454:	00000000 	.word	0x00000000
1a004458:	6154796d 	.word	0x6154796d
1a00445c:	425f6b73 	.word	0x425f6b73
1a004460:	6e6f746f 	.word	0x6e6f746f
1a004464:	72656d45 	.word	0x72656d45
1a004468:	636e6567 	.word	0x636e6567
1a00446c:	00006169 	.word	0x00006169
1a004470:	6154796d 	.word	0x6154796d
1a004474:	525f6b73 	.word	0x525f6b73
1a004478:	57646165 	.word	0x57646165
1a00447c:	65746972 	.word	0x65746972
1a004480:	69676552 	.word	0x69676552
1a004484:	72657473 	.word	0x72657473
1a004488:	76697244 	.word	0x76697244
1a00448c:	00007265 	.word	0x00007265
1a004490:	6154796d 	.word	0x6154796d
1a004494:	435f6b73 	.word	0x435f6b73
1a004498:	72746e6f 	.word	0x72746e6f
1a00449c:	61556c6f 	.word	0x61556c6f
1a0044a0:	00007472 	.word	0x00007472
1a0044a4:	6154796d 	.word	0x6154796d
1a0044a8:	535f6b73 	.word	0x535f6b73
1a0044ac:	61696e65 	.word	0x61696e65
1a0044b0:	4c73656c 	.word	0x4c73656c
1a0044b4:	00006465 	.word	0x00006465
1a0044b8:	73615456 	.word	0x73615456
1a0044bc:	6174536b 	.word	0x6174536b
1a0044c0:	63537472 	.word	0x63537472
1a0044c4:	75646568 	.word	0x75646568
1a0044c8:	2072656c 	.word	0x2072656c
1a0044cc:	73206f6e 	.word	0x73206f6e
1a0044d0:	61682065 	.word	0x61682065
1a0044d4:	646f7020 	.word	0x646f7020
1a0044d8:	206f6469 	.word	0x206f6469
1a0044dc:	63656a65 	.word	0x63656a65
1a0044e0:	72617475 	.word	0x72617475
1a0044e4:	726f7020 	.word	0x726f7020
1a0044e8:	6f727020 	.word	0x6f727020
1a0044ec:	6d656c62 	.word	0x6d656c62
1a0044f0:	65207361 	.word	0x65207361
1a0044f4:	7361206e 	.word	0x7361206e
1a0044f8:	616e6769 	.word	0x616e6769
1a0044fc:	6e6f6963 	.word	0x6e6f6963
1a004500:	20656420 	.word	0x20656420
1a004504:	6f6d656d 	.word	0x6f6d656d
1a004508:	20616972 	.word	0x20616972
1a00450c:	616e6964 	.word	0x616e6964
1a004510:	6163696d 	.word	0x6163696d
1a004514:	73206120 	.word	0x73206120
1a004518:	66616d65 	.word	0x66616d65
1a00451c:	736f726f 	.word	0x736f726f
1a004520:	ff000d21 	.word	0xff000d21
1a004524:	6f746f42 	.word	0x6f746f42
1a004528:	6564206e 	.word	0x6564206e
1a00452c:	656d6520 	.word	0x656d6520
1a004530:	6e656772 	.word	0x6e656772
1a004534:	0d616963 	.word	0x0d616963
1a004538:	00000000 	.word	0x00000000
1a00453c:	63656a45 	.word	0x63656a45
1a004540:	72617475 	.word	0x72617475
1a004544:	65537820 	.word	0x65537820
1a004548:	6870616d 	.word	0x6870616d
1a00454c:	4765726f 	.word	0x4765726f
1a004550:	0d657669 	.word	0x0d657669
1a004554:	00000000 	.word	0x00000000
1a004558:	63656a45 	.word	0x63656a45
1a00455c:	64617475 	.word	0x64617475
1a004560:	5378206f 	.word	0x5378206f
1a004564:	70616d65 	.word	0x70616d65
1a004568:	65726f68 	.word	0x65726f68
1a00456c:	65766947 	.word	0x65766947
1a004570:	ffff000d 	.word	0xffff000d
1a004574:	75736956 	.word	0x75736956
1a004578:	7a696c61 	.word	0x7a696c61
1a00457c:	6f696361 	.word	0x6f696361
1a004580:	2061206e 	.word	0x2061206e
1a004584:	76617274 	.word	0x76617274
1a004588:	64207365 	.word	0x64207365
1a00458c:	6f6c2065 	.word	0x6f6c2065
1a004590:	656c2073 	.word	0x656c2073
1a004594:	65642064 	.word	0x65642064
1a004598:	7365206c 	.word	0x7365206c
1a00459c:	6f646174 	.word	0x6f646174
1a0045a0:	6c656420 	.word	0x6c656420
1a0045a4:	73697320 	.word	0x73697320
1a0045a8:	616d6574 	.word	0x616d6574
1a0045ac:	00000d21 	.word	0x00000d21
1a0045b0:	616d6f54 	.word	0x616d6f54
1a0045b4:	78206f64 	.word	0x78206f64
1a0045b8:	616d6553 	.word	0x616d6553
1a0045bc:	726f6870 	.word	0x726f6870
1a0045c0:	6b615465 	.word	0x6b615465
1a0045c4:	ff000d65 	.word	0xff000d65
1a0045c8:	454c4449 	.word	0x454c4449
1a0045cc:	ffffff00 	.word	0xffffff00
1a0045d0:	51726d54 	.word	0x51726d54
1a0045d4:	ffffff00 	.word	0xffffff00
1a0045d8:	20726d54 	.word	0x20726d54
1a0045dc:	00637653 	.word	0x00637653

1a0045e0 <ExtRateIn>:
1a0045e0:	00000000                                ....

1a0045e4 <GpioButtons>:
1a0045e4:	08000400 09010900                       ........

1a0045ec <GpioLeds>:
1a0045ec:	01050005 0e000205 0c010b01              ............

1a0045f8 <GpioPorts>:
1a0045f8:	03030003 0f050403 05031005 07030603     ................
1a004608:	ffff0802                                ....

1a00460c <OscRateIn>:
1a00460c:	00b71b00                                ....

1a004610 <InitClkStates>:
1a004610:	01010f01                                ....

1a004614 <pinmuxing>:
1a004614:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004624:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004634:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004644:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004654:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004664:	00d50301 00d50401 00160107 00560207     ..............V.
1a004674:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004684:	00570206                                ..W.

1a004688 <UART_BClock>:
1a004688:	01a201c2 01620182                       ......b.

1a004690 <UART_PClock>:
1a004690:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0046a0:	ffff00ff                                ....

1a0046a4 <periph_to_base>:
1a0046a4:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0046b4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0046c4:	000100e0 01000100 01200003 00060120     .......... . ...
1a0046d4:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0046e4:	01820013 00120182 01a201a2 01c20011     ................
1a0046f4:	001001c2 01e201e2 0202000f 000e0202     ................
1a004704:	02220222 0223000d 001c0223              "."...#.#...

1a004710 <InitClkStates>:
1a004710:	00010100 00010909 0001090a 01010701     ................
1a004720:	00010902 00010906 0101090c 0001090d     ................
1a004730:	0001090e 0001090f 00010910 00010911     ................
1a004740:	00010912 00010913 00011114 00011119     ................
1a004750:	0001111a 0001111b                       ........

1a004758 <lpcUarts>:
1a004758:	40081000 06020406 00180205 40081000     ...@...........@
1a004768:	09070509 00180706 40082000 00000000     ......... .@....
1a004778:	00190000 400c1000 07060107 001a0602     .......@........
1a004788:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004798:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a0047a8:	0072656d                                mer.

1a0047ac <gpioPinsInit>:
1a0047ac:	00000001 04020204 01040205 07010200     ................
1a0047bc:	0d030005 01000501 00020408 03040202     ................
1a0047cc:	04030200 00020000 03000407 0402030c     ................
1a0047dc:	01030905 02080504 03050403 05040402     ................
1a0047ec:	000c0604 0b060802 06070300 05030009     ................
1a0047fc:	05040706 0004060f 04040303 04040200     ................
1a00480c:	05020005 02000604 04080406 0a040c05     ................
1a00481c:	010e0504 0a000003 00001401 0012010f     ................
1a00482c:	11010d00 010c0000 03000010 03000707     ................
1a00483c:	0001000f 00000100 06000000 0603000a     ................
1a00484c:	05040806 00050610 01060403 04000300     ................
1a00485c:	0d050409 00000401 000f010b 00010200     ................
1a00486c:	01040000 08000001 00000201 00060109     ................
1a00487c:	00020901 02000504 01050401 05040202     ................
1a00488c:	000a0202 0b020e00 020b0100 0c01000c     ................
1a00489c:	02000004 00010400 02040102 04020200     ................
1a0048ac:	03020003 03000307 0004070b 05070c03     ................
1a0048bc:	070d0300 0e030006 05040102 00060401     ................
1a0048cc:	05040602 04050200 04020004 05040804     ................
1a0048dc:	0409040c 0a040d05 010e0504 08010005     ................
1a0048ec:	00000a0d                                ....

1a0048f0 <__sf_fake_stderr>:
	...

1a004910 <__sf_fake_stdin>:
	...

1a004930 <__sf_fake_stdout>:
	...

1a004950 <_global_impure_ptr>:
1a004950:	10000044                                D...
